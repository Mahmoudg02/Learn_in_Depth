
I2C_M_send_S_rec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00002a5a  00002aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000b0  008000b0  00002b3e  2**0
                  ALLOC
  3 .debug_aranges 00000398  00000000  00000000  00002b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000061c  00000000  00000000  00002ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d90  00000000  00000000  000034f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016be  00000000  00000000  00006282  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002206  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  00009b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008e8  00000000  00000000  0000a038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000a920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <main>
      8a:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MCAL_UART_Init>:
#define RXCIE 7 
#define TXCIE 6

#define Defualt_Stop '\r'

void MCAL_UART_Init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	
	// setup the frame form 
	
	// setup the BuadRate 
	myUBRRL =51 ;
     b4e:	e9 e2       	ldi	r30, 0x29	; 41
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	83 e3       	ldi	r24, 0x33	; 51
     b54:	80 83       	st	Z, r24
	CLR_BIT(myUCSRA ,U2X) ;
     b56:	ab e2       	ldi	r26, 0x2B	; 43
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8c 93       	st	X, r24
	//Setup the interrupts 
	
	//Enable the module 
	SET_BIT(myUCSRB,TXEN) ;
     b64:	aa e2       	ldi	r26, 0x2A	; 42
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	88 60       	ori	r24, 0x08	; 8
     b70:	8c 93       	st	X, r24
	SET_BIT(myUCSRB ,RXEN) ;
     b72:	aa e2       	ldi	r26, 0x2A	; 42
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ea e2       	ldi	r30, 0x2A	; 42
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 61       	ori	r24, 0x10	; 16
     b7e:	8c 93       	st	X, r24
	
	
}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <MCAL_UART_Send>:
void MCAL_UART_Send(u8 data){
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(myUCSRA,UDRE)) ;
     b92:	eb e2       	ldi	r30, 0x2B	; 43
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 95       	swap	r24
     b9a:	86 95       	lsr	r24
     b9c:	87 70       	andi	r24, 0x07	; 7
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	90 70       	andi	r25, 0x00	; 0
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	a1 f3       	breq	.-24     	; 0xb92 <MCAL_UART_Send+0xc>
	myUDR = data ;
     baa:	ec e2       	ldi	r30, 0x2C	; 44
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 83       	st	Z, r24
}
     bb2:	0f 90       	pop	r0
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <MCAL_UART_Recieve>:
u8 MCAL_UART_Recieve(void)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	while (!GET_BIT(myUCSRA,RXC)) ;
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 23       	and	r24, r24
     bca:	dc f7       	brge	.-10     	; 0xbc2 <MCAL_UART_Recieve+0x8>
	return myUDR ;
     bcc:	ec e2       	ldi	r30, 0x2C	; 44
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
}
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <MCAL_UART_SendString>:
void MCAL_UART_SendString(u8* ptrData) 
{	u8 i=0  ;
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	00 d0       	rcall	.+0      	; 0xbde <MCAL_UART_SendString+0x6>
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9b 83       	std	Y+3, r25	; 0x03
     be6:	8a 83       	std	Y+2, r24	; 0x02
     be8:	19 82       	std	Y+1, r1	; 0x01
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <MCAL_UART_SendString+0x30>
	while(ptrData[i])
	{
		MCAL_UART_Send(ptrData[i]);	
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	9b 81       	ldd	r25, Y+3	; 0x03
     bf6:	fc 01       	movw	r30, r24
     bf8:	e2 0f       	add	r30, r18
     bfa:	f3 1f       	adc	r31, r19
     bfc:	80 81       	ld	r24, Z
     bfe:	0e 94 c3 05 	call	0xb86	; 0xb86 <MCAL_UART_Send>
		i++ ;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(myUCSRA,RXC)) ;
	return myUDR ;
}
void MCAL_UART_SendString(u8* ptrData) 
{	u8 i=0  ;
	while(ptrData[i])
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	9b 81       	ldd	r25, Y+3	; 0x03
     c12:	fc 01       	movw	r30, r24
     c14:	e2 0f       	add	r30, r18
     c16:	f3 1f       	adc	r31, r19
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	39 f7       	brne	.-50     	; 0xbec <MCAL_UART_SendString+0x14>
	{
		MCAL_UART_Send(ptrData[i]);	
		i++ ;
	}
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <MCAL_UART_recString>:
void MCAL_UART_recString(u8* DataBuff){
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	00 d0       	rcall	.+0      	; 0xc34 <MCAL_UART_recString+0xa>
     c34:	0f 92       	push	r0
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9b 83       	std	Y+3, r25	; 0x03
     c3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0 ;
     c3e:	19 82       	std	Y+1, r1	; 0x01
do 
{
	DataBuff[i] = MCAL_UART_Recieve() ;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	9b 81       	ldd	r25, Y+3	; 0x03
     c4a:	8c 01       	movw	r16, r24
     c4c:	02 0f       	add	r16, r18
     c4e:	13 1f       	adc	r17, r19
     c50:	0e 94 dd 05 	call	0xbba	; 0xbba <MCAL_UART_Recieve>
     c54:	f8 01       	movw	r30, r16
     c56:	80 83       	st	Z, r24
	i++ ;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	89 83       	std	Y+1, r24	; 0x01
} while (DataBuff[i-1]!='\r');
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	9c 01       	movw	r18, r24
     c66:	21 50       	subi	r18, 0x01	; 1
     c68:	30 40       	sbci	r19, 0x00	; 0
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	9b 81       	ldd	r25, Y+3	; 0x03
     c6e:	fc 01       	movw	r30, r24
     c70:	e2 0f       	add	r30, r18
     c72:	f3 1f       	adc	r31, r19
     c74:	80 81       	ld	r24, Z
     c76:	8d 30       	cpi	r24, 0x0D	; 13
     c78:	19 f7       	brne	.-58     	; 0xc40 <MCAL_UART_recString+0x16>

DataBuff[i-1] ='\0' ;
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	9c 01       	movw	r18, r24
     c82:	21 50       	subi	r18, 0x01	; 1
     c84:	30 40       	sbci	r19, 0x00	; 0
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	9b 81       	ldd	r25, Y+3	; 0x03
     c8a:	fc 01       	movw	r30, r24
     c8c:	e2 0f       	add	r30, r18
     c8e:	f3 1f       	adc	r31, r19
     c90:	10 82       	st	Z, r1
}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <MCAL_UART_TXIEN>:

void MCAL_UART_TXIEN(){
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(myUCSRB ,TXCIE) ;
     caa:	aa e2       	ldi	r26, 0x2A	; 42
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e2       	ldi	r30, 0x2A	; 42
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 64       	ori	r24, 0x40	; 64
     cb6:	8c 93       	st	X, r24
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <MCAL_UART_TXIDIS>:
void MCAL_UART_TXIDIS(){
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(myUCSRB,TXCIE) ;
     cc6:	aa e2       	ldi	r26, 0x2A	; 42
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	ea e2       	ldi	r30, 0x2A	; 42
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8f 7b       	andi	r24, 0xBF	; 191
     cd2:	8c 93       	st	X, r24
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <MCAL_UART_RXIEN>:
void MCAL_UART_RXIEN() {
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(myUCSRB,RXCIE) ;
     ce2:	aa e2       	ldi	r26, 0x2A	; 42
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e2       	ldi	r30, 0x2A	; 42
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 68       	ori	r24, 0x80	; 128
     cee:	8c 93       	st	X, r24
}
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <MCAL_UART_RXDIS>:
void MCAL_UART_RXDIS(){
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(myUCSRB,RXCIE) ;
     cfe:	aa e2       	ldi	r26, 0x2A	; 42
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e2       	ldi	r30, 0x2A	; 42
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8f 77       	andi	r24, 0x7F	; 127
     d0a:	8c 93       	st	X, r24
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <MCAL_UART_SendAsync>:


static u8* ptr_Async ;


void MCAL_UART_SendAsync(u8* DataBaff){
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <MCAL_UART_SendAsync+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(mySREG,7) ;
     d20:	af e5       	ldi	r26, 0x5F	; 95
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ef e5       	ldi	r30, 0x5F	; 95
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24

	MCAL_UART_TXIEN() ;
     d2e:	0e 94 51 06 	call	0xca2	; 0xca2 <MCAL_UART_TXIEN>
	if(DataBaff[0]!=0)
     d32:	e9 81       	ldd	r30, Y+1	; 0x01
     d34:	fa 81       	ldd	r31, Y+2	; 0x02
     d36:	80 81       	ld	r24, Z
     d38:	88 23       	and	r24, r24
     d3a:	29 f0       	breq	.+10     	; 0xd46 <MCAL_UART_SendAsync+0x34>
	MCAL_UART_Send(DataBaff[0]) ;
     d3c:	e9 81       	ldd	r30, Y+1	; 0x01
     d3e:	fa 81       	ldd	r31, Y+2	; 0x02
     d40:	80 81       	ld	r24, Z
     d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <MCAL_UART_Send>

	ptr_Async = DataBaff ;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	90 93 b1 00 	sts	0x00B1, r25
     d4e:	80 93 b0 00 	sts	0x00B0, r24

	
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <__vector_15>:

ISR(USART_TXC_vect){
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	af 93       	push	r26
     d70:	bf 93       	push	r27
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
	
	static u8 i = 1 ;
	if (ptr_Async[i])
     d7e:	20 91 b0 00 	lds	r18, 0x00B0
     d82:	30 91 b1 00 	lds	r19, 0x00B1
     d86:	80 91 6b 00 	lds	r24, 0x006B
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	e8 0f       	add	r30, r24
     d92:	f9 1f       	adc	r31, r25
     d94:	80 81       	ld	r24, Z
     d96:	88 23       	and	r24, r24
     d98:	a9 f0       	breq	.+42     	; 0xdc4 <__vector_15+0x68>
	{
		myUDR =ptr_Async[i] ;
     d9a:	ac e2       	ldi	r26, 0x2C	; 44
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	20 91 b0 00 	lds	r18, 0x00B0
     da2:	30 91 b1 00 	lds	r19, 0x00B1
     da6:	80 91 6b 00 	lds	r24, 0x006B
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	f9 01       	movw	r30, r18
     db0:	e8 0f       	add	r30, r24
     db2:	f9 1f       	adc	r31, r25
     db4:	80 81       	ld	r24, Z
     db6:	8c 93       	st	X, r24
		i++ ;
     db8:	80 91 6b 00 	lds	r24, 0x006B
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	80 93 6b 00 	sts	0x006B, r24
     dc2:	12 c0       	rjmp	.+36     	; 0xde8 <__vector_15+0x8c>
	}else
	{
		i = 1 ;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 6b 00 	sts	0x006B, r24
				myUDR =ptr_Async[i] ;
     dca:	ac e2       	ldi	r26, 0x2C	; 44
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	20 91 b0 00 	lds	r18, 0x00B0
     dd2:	30 91 b1 00 	lds	r19, 0x00B1
     dd6:	80 91 6b 00 	lds	r24, 0x006B
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	e8 0f       	add	r30, r24
     de2:	f9 1f       	adc	r31, r25
     de4:	80 81       	ld	r24, Z
     de6:	8c 93       	st	X, r24

	}
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <s_seg_init>:
----------------------------------------------------------------*/

/*----------------------------------------------------------------
--------------------- Public Function Definitions ----------------
----------------------------------------------------------------*/
u8 s_seg_init(void){
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	0f 92       	push	r0
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	
	GPIO_WritePin_Dir(segment1_enable[0].port,segment1_enable[0].pin,PIN_OUTPUT );
     e10:	80 91 74 00 	lds	r24, 0x0074
     e14:	90 91 75 00 	lds	r25, 0x0075
     e18:	69 2f       	mov	r22, r25
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_WritePin_Dir>
	GPIO_WritePin(segment1_enable[0].port,segment1_enable[0].pin,LOW );
     e20:	80 91 74 00 	lds	r24, 0x0074
     e24:	90 91 75 00 	lds	r25, 0x0075
     e28:	69 2f       	mov	r22, r25
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	
	for (u8 i =0 ;i<4 ; i++)
     e30:	19 82       	std	Y+1, r1	; 0x01
     e32:	31 c0       	rjmp	.+98     	; 0xe96 <s_seg_init+0x90>
	{
		GPIO_WritePin_Dir(segment1_connection[i].port,segment1_connection[i].pin,PIN_OUTPUT) ;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	fc 01       	movw	r30, r24
     e40:	e4 59       	subi	r30, 0x94	; 148
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	20 81       	ld	r18, Z
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	fc 01       	movw	r30, r24
     e52:	e3 59       	subi	r30, 0x93	; 147
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	90 81       	ld	r25, Z
     e58:	82 2f       	mov	r24, r18
     e5a:	69 2f       	mov	r22, r25
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_WritePin_Dir>
		GPIO_WritePin(segment1_connection[i].port,segment1_connection[i].pin,LOW) ;
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	fc 01       	movw	r30, r24
     e6e:	e4 59       	subi	r30, 0x94	; 148
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	20 81       	ld	r18, Z
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	fc 01       	movw	r30, r24
     e80:	e3 59       	subi	r30, 0x93	; 147
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	90 81       	ld	r25, Z
     e86:	82 2f       	mov	r24, r18
     e88:	69 2f       	mov	r22, r25
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
u8 s_seg_init(void){
	
	GPIO_WritePin_Dir(segment1_enable[0].port,segment1_enable[0].pin,PIN_OUTPUT );
	GPIO_WritePin(segment1_enable[0].port,segment1_enable[0].pin,LOW );
	
	for (u8 i =0 ;i<4 ; i++)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	60 f2       	brcs	.-104    	; 0xe34 <s_seg_init+0x2e>
	{
		GPIO_WritePin_Dir(segment1_connection[i].port,segment1_connection[i].pin,PIN_OUTPUT) ;
		GPIO_WritePin(segment1_connection[i].port,segment1_connection[i].pin,LOW) ;
	}
	return No_Error;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
}
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <s_seg_write>:

u8 s_seg_write(u8 number){
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <s_seg_write+0x6>
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	8a 83       	std	Y+2, r24	; 0x02
	if (number>9)
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	8a 30       	cpi	r24, 0x0A	; 10
     eb8:	10 f0       	brcs	.+4      	; 0xebe <s_seg_write+0x18>
	return Error_Occurred;
     eba:	1b 82       	std	Y+3, r1	; 0x03
     ebc:	32 c0       	rjmp	.+100    	; 0xf22 <s_seg_write+0x7c>
	
	s_seg_enable();
     ebe:	0e 94 98 07 	call	0xf30	; 0xf30 <s_seg_enable>
	
	for (u8 i =0 ;i<4 ;i++)
     ec2:	19 82       	std	Y+1, r1	; 0x01
     ec4:	29 c0       	rjmp	.+82     	; 0xf18 <s_seg_write+0x72>
	{
		GPIO_WritePin(segment1_connection[i].port,segment1_connection[i].pin,(number>>i)&0x01) ;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	fc 01       	movw	r30, r24
     ed2:	e4 59       	subi	r30, 0x94	; 148
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	50 81       	ld	r21, Z
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	fc 01       	movw	r30, r24
     ee4:	e3 59       	subi	r30, 0x93	; 147
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	40 81       	ld	r20, Z
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	b9 01       	movw	r22, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <s_seg_write+0x58>
     efa:	75 95       	asr	r23
     efc:	67 95       	ror	r22
     efe:	8a 95       	dec	r24
     f00:	e2 f7       	brpl	.-8      	; 0xefa <s_seg_write+0x54>
     f02:	cb 01       	movw	r24, r22
     f04:	98 2f       	mov	r25, r24
     f06:	91 70       	andi	r25, 0x01	; 1
     f08:	85 2f       	mov	r24, r21
     f0a:	64 2f       	mov	r22, r20
     f0c:	49 2f       	mov	r20, r25
     f0e:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	if (number>9)
	return Error_Occurred;
	
	s_seg_enable();
	
	for (u8 i =0 ;i<4 ;i++)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	a0 f2       	brcs	.-88     	; 0xec6 <s_seg_write+0x20>
	{
		GPIO_WritePin(segment1_connection[i].port,segment1_connection[i].pin,(number>>i)&0x01) ;
	}
	
	return No_Error ;
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	7b 83       	std	Y+3, r23	; 0x03
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <s_seg_enable>:
/*----------------------------------------------------------------
--------------------- Private Functions Definitions --------------
----------------------------------------------------------------*/
u8 s_seg_enable(void){
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
	
	GPIO_WritePin(segment1_enable[0].port,segment1_enable[0].pin,HIGH );
     f38:	80 91 74 00 	lds	r24, 0x0074
     f3c:	90 91 75 00 	lds	r25, 0x0075
     f40:	69 2f       	mov	r22, r25
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	return No_Error ;
     f48:	81 e0       	ldi	r24, 0x01	; 1
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <Push_Button_Init>:
	{Port_D,1,Pull_UP_Disabled},
	{Port_D,0,Pull_UP_Disabled}
};


u8 Push_Button_Init(void){
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	
	for (u8 i=0 ; i<Number_of_PB ; i++)
     f5a:	19 82       	std	Y+1, r1	; 0x01
     f5c:	49 c0       	rjmp	.+146    	; 0xff0 <Push_Button_Init+0xa0>
	{
		GPIO_WritePin_Dir(Push_Buttons[i].Push_Button_Port,Push_Buttons[i].Push_Button_Pin, LOW) ;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	c9 01       	movw	r24, r18
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	fc 01       	movw	r30, r24
     f70:	ea 58       	subi	r30, 0x8A	; 138
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	40 81       	ld	r20, Z
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	c9 01       	movw	r24, r18
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	fc 01       	movw	r30, r24
     f88:	e9 58       	subi	r30, 0x89	; 137
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	90 81       	ld	r25, Z
     f8e:	84 2f       	mov	r24, r20
     f90:	69 2f       	mov	r22, r25
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_WritePin_Dir>
		GPIO_WritePin(Push_Buttons[i].Push_Button_Port,Push_Buttons[i].Push_Button_Pin,Push_Buttons[i].Pull_UP_state);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	c9 01       	movw	r24, r18
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	fc 01       	movw	r30, r24
     faa:	ea 58       	subi	r30, 0x8A	; 138
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	50 81       	ld	r21, Z
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	c9 01       	movw	r24, r18
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	fc 01       	movw	r30, r24
     fc2:	e9 58       	subi	r30, 0x89	; 137
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	40 81       	ld	r20, Z
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
     fd8:	fc 01       	movw	r30, r24
     fda:	e8 58       	subi	r30, 0x88	; 136
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	90 81       	ld	r25, Z
     fe0:	85 2f       	mov	r24, r21
     fe2:	64 2f       	mov	r22, r20
     fe4:	49 2f       	mov	r20, r25
     fe6:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
};


u8 Push_Button_Init(void){
	
	for (u8 i=0 ; i<Number_of_PB ; i++)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <Push_Button_Init+0xa8>
     ff6:	b3 cf       	rjmp	.-154    	; 0xf5e <Push_Button_Init+0xe>
	{
		GPIO_WritePin_Dir(Push_Buttons[i].Push_Button_Port,Push_Buttons[i].Push_Button_Pin, LOW) ;
		GPIO_WritePin(Push_Buttons[i].Push_Button_Port,Push_Buttons[i].Push_Button_Pin,Push_Buttons[i].Pull_UP_state);
	}
	return No_Error ;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <Get_Button_state>:

u8 Get_Button_state(u8 PB_name){
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <Get_Button_state+0x6>
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	89 83       	std	Y+1, r24	; 0x01

	if (GPIO_ReadPin(Push_Buttons[PB_name].Push_Button_Port,Push_Buttons[PB_name].Push_Button_Pin)==0)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	c9 01       	movw	r24, r18
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	82 0f       	add	r24, r18
    101c:	93 1f       	adc	r25, r19
    101e:	fc 01       	movw	r30, r24
    1020:	ea 58       	subi	r30, 0x8A	; 138
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	40 81       	ld	r20, Z
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	c9 01       	movw	r24, r18
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	fc 01       	movw	r30, r24
    1038:	e9 58       	subi	r30, 0x89	; 137
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	90 81       	ld	r25, Z
    103e:	84 2f       	mov	r24, r20
    1040:	69 2f       	mov	r22, r25
    1042:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <GPIO_ReadPin>
    1046:	88 23       	and	r24, r24
    1048:	11 f4       	brne	.+4      	; 0x104e <Get_Button_state+0x4c>
	{
		return PRESSED ;
    104a:	1a 82       	std	Y+2, r1	; 0x02
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <Get_Button_state+0x50>
	}
	else return RELEASED ;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	8a 83       	std	Y+2, r24	; 0x02
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <LED_MATRIX_INIT>:
};

/************************************************************************
 * Initialization Function 
*************************************************************************/
u8 LED_MATRIX_INIT(void){
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	
	GPIO_WritePort_DIR(PORT_HIGH,LedMatrixMuxPort) ;
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <GPIO_WritePort_DIR>
	GPIO_WritePort_DIR(PORT_HIGH,LedMatrixDataPort) ;
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	0e 94 e5 10 	call	0x21ca	; 0x21ca <GPIO_WritePort_DIR>
	return No_Error ;
    1076:	81 e0       	ldi	r24, 0x01	; 1
	
}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <LED_MATRIX_DISP>:
/************************************************************************
 * Display char 
*************************************************************************/
u8 LED_MATRIX_DISP(u8 Displayed_Char ){
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <LED_MATRIX_DISP+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	8a 83       	std	Y+2, r24	; 0x02
	u8 LED_MATRIX_MUX ;
	
	for (LED_MATRIX_MUX =0 ;LED_MATRIX_MUX<8 ;LED_MATRIX_MUX++ )
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	27 c0       	rjmp	.+78     	; 0x10dc <LED_MATRIX_DISP+0x5e>
	{
			GPIO_WritePort(~(LED_MATRIX_DATA[Displayed_Char][LED_MATRIX_MUX]),LedMatrixDataPort);
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	48 2f       	mov	r20, r24
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	ca 01       	movw	r24, r20
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	fc 01       	movw	r30, r24
    10ae:	e1 58       	subi	r30, 0x81	; 129
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	80 81       	ld	r24, Z
    10b4:	80 95       	com	r24
    10b6:	63 e0       	ldi	r22, 0x03	; 3
    10b8:	0e 94 cf 10 	call	0x219e	; 0x219e <GPIO_WritePort>
			GPIO_WritePort(1<<LED_MATRIX_MUX,LedMatrixMuxPort);
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <LED_MATRIX_DISP+0x4e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	2a 95       	dec	r18
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <LED_MATRIX_DISP+0x4a>
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	0e 94 cf 10 	call	0x219e	; 0x219e <GPIO_WritePort>
 * Display char 
*************************************************************************/
u8 LED_MATRIX_DISP(u8 Displayed_Char ){
	u8 LED_MATRIX_MUX ;
	
	for (LED_MATRIX_MUX =0 ;LED_MATRIX_MUX<8 ;LED_MATRIX_MUX++ )
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	b0 f2       	brcs	.-84     	; 0x108e <LED_MATRIX_DISP+0x10>
			
//replaced by timer functions 			
//			_delay_ms(200);
	}

return No_Error ;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
	
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <LCD_init>:


/*----------------------------------------------------------------
--------------------- Public Function Definitions ----------------
----------------------------------------------------------------*/
void LCD_init(LCD_Connections_t LCD_object){
    10ee:	0f 93       	push	r16
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	a4 97       	sbiw	r28, 0x24	; 36
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	2d 8f       	std	Y+29, r18	; 0x1d
    1106:	3e 8f       	std	Y+30, r19	; 0x1e
    1108:	4f 8f       	std	Y+31, r20	; 0x1f
    110a:	58 a3       	std	Y+32, r21	; 0x20
    110c:	69 a3       	std	Y+33, r22	; 0x21
    110e:	7a a3       	std	Y+34, r23	; 0x22
    1110:	8b a3       	std	Y+35, r24	; 0x23
    1112:	9c a3       	std	Y+36, r25	; 0x24
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 ea       	ldi	r26, 0xA0	; 160
    111a:	b1 e4       	ldi	r27, 0x41	; 65
    111c:	89 8f       	std	Y+25, r24	; 0x19
    111e:	9a 8f       	std	Y+26, r25	; 0x1a
    1120:	ab 8f       	std	Y+27, r26	; 0x1b
    1122:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	69 8d       	ldd	r22, Y+25	; 0x19
    1126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a e7       	ldi	r20, 0x7A	; 122
    1132:	53 e4       	ldi	r21, 0x43	; 67
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8d 8b       	std	Y+21, r24	; 0x15
    113e:	9e 8b       	std	Y+22, r25	; 0x16
    1140:	af 8b       	std	Y+23, r26	; 0x17
    1142:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1144:	6d 89       	ldd	r22, Y+21	; 0x15
    1146:	7e 89       	ldd	r23, Y+22	; 0x16
    1148:	8f 89       	ldd	r24, Y+23	; 0x17
    114a:	98 8d       	ldd	r25, Y+24	; 0x18
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <LCD_init+0x78>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9c 8b       	std	Y+20, r25	; 0x14
    1162:	8b 8b       	std	Y+19, r24	; 0x13
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <LCD_init+0xf6>
	else if (__tmp > 65535)
    1166:	6d 89       	ldd	r22, Y+21	; 0x15
    1168:	7e 89       	ldd	r23, Y+22	; 0x16
    116a:	8f 89       	ldd	r24, Y+23	; 0x17
    116c:	98 8d       	ldd	r25, Y+24	; 0x18
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	4c f5       	brge	.+82     	; 0x11d0 <LCD_init+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117e:	69 8d       	ldd	r22, Y+25	; 0x19
    1180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9c 8b       	std	Y+20, r25	; 0x14
    11a4:	8b 8b       	std	Y+19, r24	; 0x13
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <LCD_init+0xd8>
    11a8:	89 e1       	ldi	r24, 0x19	; 25
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9a 8b       	std	Y+18, r25	; 0x12
    11ae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b0:	89 89       	ldd	r24, Y+17	; 0x11
    11b2:	9a 89       	ldd	r25, Y+18	; 0x12
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <LCD_init+0xc6>
    11b8:	9a 8b       	std	Y+18, r25	; 0x12
    11ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	8b 89       	ldd	r24, Y+19	; 0x13
    11be:	9c 89       	ldd	r25, Y+20	; 0x14
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9c 8b       	std	Y+20, r25	; 0x14
    11c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	8b 89       	ldd	r24, Y+19	; 0x13
    11c8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <LCD_init+0xba>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <LCD_init+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d0:	6d 89       	ldd	r22, Y+21	; 0x15
    11d2:	7e 89       	ldd	r23, Y+22	; 0x16
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9c 8b       	std	Y+20, r25	; 0x14
    11e2:	8b 8b       	std	Y+19, r24	; 0x13
    11e4:	8b 89       	ldd	r24, Y+19	; 0x13
    11e6:	9c 89       	ldd	r25, Y+20	; 0x14
    11e8:	98 8b       	std	Y+16, r25	; 0x10
    11ea:	8f 87       	std	Y+15, r24	; 0x0f
    11ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ee:	98 89       	ldd	r25, Y+16	; 0x10
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <LCD_init+0x102>
    11f4:	98 8b       	std	Y+16, r25	; 0x10
    11f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20) ;
	

	GPIO_WritePin_Dir(LCD_object.lcd_Enable.port ,LCD_object.lcd_Enable.pin,PIN_OUTPUT) ;
    11f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11fa:	98 a1       	ldd	r25, Y+32	; 0x20
    11fc:	69 2f       	mov	r22, r25
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_WritePin_Dir>
	GPIO_WritePin(LCD_object.lcd_Enable.port ,LCD_object.lcd_Enable.pin,LOW);
    1204:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1206:	98 a1       	ldd	r25, Y+32	; 0x20
    1208:	69 2f       	mov	r22, r25
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	
	GPIO_WritePin_Dir(LCD_object.lcd_RS.port ,LCD_object.lcd_RS.pin,PIN_OUTPUT) ;
    1210:	8b a1       	ldd	r24, Y+35	; 0x23
    1212:	9c a1       	ldd	r25, Y+36	; 0x24
    1214:	69 2f       	mov	r22, r25
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_WritePin_Dir>
	GPIO_WritePin(LCD_object.lcd_RS.port ,LCD_object.lcd_RS.pin,LOW) ;
    121c:	8b a1       	ldd	r24, Y+35	; 0x23
    121e:	9c a1       	ldd	r25, Y+36	; 0x24
    1220:	69 2f       	mov	r22, r25
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>

	GPIO_WritePin_Dir(LCD_object.lcd_RW.port ,LCD_object.lcd_RW.pin,PIN_OUTPUT) ;
    1228:	89 a1       	ldd	r24, Y+33	; 0x21
    122a:	9a a1       	ldd	r25, Y+34	; 0x22
    122c:	69 2f       	mov	r22, r25
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_WritePin_Dir>
	GPIO_WritePin(LCD_object.lcd_RW.port ,LCD_object.lcd_RW.pin,LOW) ;
    1234:	89 a1       	ldd	r24, Y+33	; 0x21
    1236:	9a a1       	ldd	r25, Y+34	; 0x22
    1238:	69 2f       	mov	r22, r25
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	_delay_ms(15);
	LCD_send_command(LCD_object,LCD_MODE_8BIT_2LINES) ;
	#endif

	#ifdef LCD_4BIT_MODE_EN
	(*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+DIR_OFFSET))|=(0x0F<<HALF_PORT_SHIFT) ;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    1246:	28 2f       	mov	r18, r24
    1248:	82 2f       	mov	r24, r18
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	dc 01       	movw	r26, r24
    1250:	82 2f       	mov	r24, r18
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	fc 01       	movw	r30, r24
    1258:	80 81       	ld	r24, Z
    125a:	80 6f       	ori	r24, 0xF0	; 240
    125c:	8c 93       	st	X, r24
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a0 e7       	ldi	r26, 0x70	; 112
    1264:	b1 e4       	ldi	r27, 0x41	; 65
    1266:	8b 87       	std	Y+11, r24	; 0x0b
    1268:	9c 87       	std	Y+12, r25	; 0x0c
    126a:	ad 87       	std	Y+13, r26	; 0x0d
    126c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1270:	7c 85       	ldd	r23, Y+12	; 0x0c
    1272:	8d 85       	ldd	r24, Y+13	; 0x0d
    1274:	9e 85       	ldd	r25, Y+14	; 0x0e
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a e7       	ldi	r20, 0x7A	; 122
    127c:	53 e4       	ldi	r21, 0x43	; 67
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	8f 83       	std	Y+7, r24	; 0x07
    1288:	98 87       	std	Y+8, r25	; 0x08
    128a:	a9 87       	std	Y+9, r26	; 0x09
    128c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128e:	6f 81       	ldd	r22, Y+7	; 0x07
    1290:	78 85       	ldd	r23, Y+8	; 0x08
    1292:	89 85       	ldd	r24, Y+9	; 0x09
    1294:	9a 85       	ldd	r25, Y+10	; 0x0a
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <LCD_init+0x1c2>
		__ticks = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <LCD_init+0x240>
	else if (__tmp > 65535)
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	4c f5       	brge	.+82     	; 0x131a <LCD_init+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    12cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <LCD_init+0x222>
    12f2:	89 e1       	ldi	r24, 0x19	; 25
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <LCD_init+0x210>
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	69 f7       	brne	.-38     	; 0x12f2 <LCD_init+0x204>
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <LCD_init+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <LCD_init+0x24c>
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);
	LCD_send_command(LCD_object,LCD_RETURN_HOME);
    1342:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1344:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1346:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1348:	58 a1       	ldd	r21, Y+32	; 0x20
    134a:	69 a1       	ldd	r22, Y+33	; 0x21
    134c:	7a a1       	ldd	r23, Y+34	; 0x22
    134e:	8b a1       	ldd	r24, Y+35	; 0x23
    1350:	9c a1       	ldd	r25, Y+36	; 0x24
    1352:	02 e0       	ldi	r16, 0x02	; 2
    1354:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
	LCD_send_command(LCD_object,LCD_MODE_4BIT_2LINES) ;
    1358:	2d 8d       	ldd	r18, Y+29	; 0x1d
    135a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    135c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    135e:	58 a1       	ldd	r21, Y+32	; 0x20
    1360:	69 a1       	ldd	r22, Y+33	; 0x21
    1362:	7a a1       	ldd	r23, Y+34	; 0x22
    1364:	8b a1       	ldd	r24, Y+35	; 0x23
    1366:	9c a1       	ldd	r25, Y+36	; 0x24
    1368:	08 e2       	ldi	r16, 0x28	; 40
    136a:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
	
	#endif
	LCD_send_command(LCD_object,LCD_DISP_ON_CURSOR_BLINK) ;
    136e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1370:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1372:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1374:	58 a1       	ldd	r21, Y+32	; 0x20
    1376:	69 a1       	ldd	r22, Y+33	; 0x21
    1378:	7a a1       	ldd	r23, Y+34	; 0x22
    137a:	8b a1       	ldd	r24, Y+35	; 0x23
    137c:	9c a1       	ldd	r25, Y+36	; 0x24
    137e:	0f e0       	ldi	r16, 0x0F	; 15
    1380:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
	LCD_send_command(LCD_object,LCD_ENTERY_INC);
    1384:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1386:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1388:	4f 8d       	ldd	r20, Y+31	; 0x1f
    138a:	58 a1       	ldd	r21, Y+32	; 0x20
    138c:	69 a1       	ldd	r22, Y+33	; 0x21
    138e:	7a a1       	ldd	r23, Y+34	; 0x22
    1390:	8b a1       	ldd	r24, Y+35	; 0x23
    1392:	9c a1       	ldd	r25, Y+36	; 0x24
    1394:	06 e0       	ldi	r16, 0x06	; 6
    1396:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
	LCD_send_command(LCD_object,LCD_FIRST_LINE);
    139a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    139c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    139e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    13a0:	58 a1       	ldd	r21, Y+32	; 0x20
    13a2:	69 a1       	ldd	r22, Y+33	; 0x21
    13a4:	7a a1       	ldd	r23, Y+34	; 0x22
    13a6:	8b a1       	ldd	r24, Y+35	; 0x23
    13a8:	9c a1       	ldd	r25, Y+36	; 0x24
    13aa:	00 e8       	ldi	r16, 0x80	; 128
    13ac:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
	LCD_send_command(LCD_object , LCD_CLR_SCREEN) ;
    13b0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    13b2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    13b4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    13b6:	58 a1       	ldd	r21, Y+32	; 0x20
    13b8:	69 a1       	ldd	r22, Y+33	; 0x21
    13ba:	7a a1       	ldd	r23, Y+34	; 0x22
    13bc:	8b a1       	ldd	r24, Y+35	; 0x23
    13be:	9c a1       	ldd	r25, Y+36	; 0x24
    13c0:	01 e0       	ldi	r16, 0x01	; 1
    13c2:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
}
    13c6:	a4 96       	adiw	r28, 0x24	; 36
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	0f 91       	pop	r16
    13d8:	08 95       	ret

000013da <LCD_send_command>:


void LCD_send_command(LCD_Connections_t LCD_object , u8 command )
{
    13da:	0f 93       	push	r16
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	29 97       	sbiw	r28, 0x09	; 9
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	29 83       	std	Y+1, r18	; 0x01
    13f2:	3a 83       	std	Y+2, r19	; 0x02
    13f4:	4b 83       	std	Y+3, r20	; 0x03
    13f6:	5c 83       	std	Y+4, r21	; 0x04
    13f8:	6d 83       	std	Y+5, r22	; 0x05
    13fa:	7e 83       	std	Y+6, r23	; 0x06
    13fc:	8f 83       	std	Y+7, r24	; 0x07
    13fe:	98 87       	std	Y+8, r25	; 0x08
    1400:	09 87       	std	Y+9, r16	; 0x09
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
	GPIO_WritePin(LCD_object.lcd_RS.port,LCD_object.lcd_RS.pin,LOW) ;
	LCD_kick(LCD_object) ;
	#endif
	#ifdef LCD_4BIT_MODE_EN
	LCD_is_Busy(LCD_object);
    1402:	29 81       	ldd	r18, Y+1	; 0x01
    1404:	3a 81       	ldd	r19, Y+2	; 0x02
    1406:	4b 81       	ldd	r20, Y+3	; 0x03
    1408:	5c 81       	ldd	r21, Y+4	; 0x04
    140a:	6d 81       	ldd	r22, Y+5	; 0x05
    140c:	7e 81       	ldd	r23, Y+6	; 0x06
    140e:	8f 81       	ldd	r24, Y+7	; 0x07
    1410:	98 85       	ldd	r25, Y+8	; 0x08
    1412:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_is_Busy>
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)&=~(0x0F<<HALF_PORT_SHIFT) ;
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    141c:	28 2f       	mov	r18, r24
    141e:	82 2f       	mov	r24, r18
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 96       	adiw	r24, 0x02	; 2
    1424:	dc 01       	movw	r26, r24
    1426:	82 2f       	mov	r24, r18
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 96       	adiw	r24, 0x02	; 2
    142c:	fc 01       	movw	r30, r24
    142e:	80 81       	ld	r24, Z
    1430:	8f 70       	andi	r24, 0x0F	; 15
    1432:	8c 93       	st	X, r24
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)|=(((command&0xF0)>>4)<<HALF_PORT_SHIFT) ;
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    143a:	28 2f       	mov	r18, r24
    143c:	82 2f       	mov	r24, r18
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 96       	adiw	r24, 0x02	; 2
    1442:	dc 01       	movw	r26, r24
    1444:	82 2f       	mov	r24, r18
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 96       	adiw	r24, 0x02	; 2
    144a:	fc 01       	movw	r30, r24
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	82 95       	swap	r24
    1454:	8f 70       	andi	r24, 0x0F	; 15
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	90 70       	andi	r25, 0x00	; 0
    145c:	82 95       	swap	r24
    145e:	92 95       	swap	r25
    1460:	90 7f       	andi	r25, 0xF0	; 240
    1462:	98 27       	eor	r25, r24
    1464:	80 7f       	andi	r24, 0xF0	; 240
    1466:	98 27       	eor	r25, r24
    1468:	82 2b       	or	r24, r18
    146a:	8c 93       	st	X, r24
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	69 2f       	mov	r22, r25
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	GPIO_WritePin(LCD_object.lcd_RS.port,LCD_object.lcd_RS.pin,LOW) ;
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	69 2f       	mov	r22, r25
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	LCD_kick(LCD_object) ;
    1484:	29 81       	ldd	r18, Y+1	; 0x01
    1486:	3a 81       	ldd	r19, Y+2	; 0x02
    1488:	4b 81       	ldd	r20, Y+3	; 0x03
    148a:	5c 81       	ldd	r21, Y+4	; 0x04
    148c:	6d 81       	ldd	r22, Y+5	; 0x05
    148e:	7e 81       	ldd	r23, Y+6	; 0x06
    1490:	8f 81       	ldd	r24, Y+7	; 0x07
    1492:	98 85       	ldd	r25, Y+8	; 0x08
    1494:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_kick>
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)&=~(0x0f<<HALF_PORT_SHIFT) ;
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    149e:	28 2f       	mov	r18, r24
    14a0:	82 2f       	mov	r24, r18
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 96       	adiw	r24, 0x02	; 2
    14a6:	dc 01       	movw	r26, r24
    14a8:	82 2f       	mov	r24, r18
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 96       	adiw	r24, 0x02	; 2
    14ae:	fc 01       	movw	r30, r24
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 70       	andi	r24, 0x0F	; 15
    14b4:	8c 93       	st	X, r24
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)|=((command&0x0F)<<HALF_PORT_SHIFT) ;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    14bc:	28 2f       	mov	r18, r24
    14be:	82 2f       	mov	r24, r18
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 96       	adiw	r24, 0x02	; 2
    14c4:	dc 01       	movw	r26, r24
    14c6:	82 2f       	mov	r24, r18
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 96       	adiw	r24, 0x02	; 2
    14cc:	fc 01       	movw	r30, r24
    14ce:	80 81       	ld	r24, Z
    14d0:	28 2f       	mov	r18, r24
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	82 95       	swap	r24
    14da:	92 95       	swap	r25
    14dc:	90 7f       	andi	r25, 0xF0	; 240
    14de:	98 27       	eor	r25, r24
    14e0:	80 7f       	andi	r24, 0xF0	; 240
    14e2:	98 27       	eor	r25, r24
    14e4:	82 2b       	or	r24, r18
    14e6:	8c 93       	st	X, r24
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	69 2f       	mov	r22, r25
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	GPIO_WritePin(LCD_object.lcd_RS.port,LCD_object.lcd_RS.pin,LOW) ;
    14f4:	8f 81       	ldd	r24, Y+7	; 0x07
    14f6:	98 85       	ldd	r25, Y+8	; 0x08
    14f8:	69 2f       	mov	r22, r25
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	LCD_kick(LCD_object) ;
    1500:	29 81       	ldd	r18, Y+1	; 0x01
    1502:	3a 81       	ldd	r19, Y+2	; 0x02
    1504:	4b 81       	ldd	r20, Y+3	; 0x03
    1506:	5c 81       	ldd	r21, Y+4	; 0x04
    1508:	6d 81       	ldd	r22, Y+5	; 0x05
    150a:	7e 81       	ldd	r23, Y+6	; 0x06
    150c:	8f 81       	ldd	r24, Y+7	; 0x07
    150e:	98 85       	ldd	r25, Y+8	; 0x08
    1510:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_kick>
	#endif
}
    1514:	29 96       	adiw	r28, 0x09	; 9
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	0f 91       	pop	r16
    1526:	08 95       	ret

00001528 <LCD_send_char>:

void LCD_send_char(LCD_Connections_t LCD_object , u8 data )
{static int count =0 ;
    1528:	ef 92       	push	r14
    152a:	0f 93       	push	r16
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	29 97       	sbiw	r28, 0x09	; 9
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	29 83       	std	Y+1, r18	; 0x01
    1542:	3a 83       	std	Y+2, r19	; 0x02
    1544:	4b 83       	std	Y+3, r20	; 0x03
    1546:	5c 83       	std	Y+4, r21	; 0x04
    1548:	6d 83       	std	Y+5, r22	; 0x05
    154a:	7e 83       	std	Y+6, r23	; 0x06
    154c:	8f 83       	std	Y+7, r24	; 0x07
    154e:	98 87       	std	Y+8, r25	; 0x08
    1550:	09 87       	std	Y+9, r16	; 0x09
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
	GPIO_WritePin(LCD_object.lcd_RS.port,LCD_object.lcd_RS.pin,HIGH) ;
	LCD_kick(LCD_object) ;
	#endif
	#ifdef LCD_4BIT_MODE_EN
	LCD_is_Busy(LCD_object);
    1552:	29 81       	ldd	r18, Y+1	; 0x01
    1554:	3a 81       	ldd	r19, Y+2	; 0x02
    1556:	4b 81       	ldd	r20, Y+3	; 0x03
    1558:	5c 81       	ldd	r21, Y+4	; 0x04
    155a:	6d 81       	ldd	r22, Y+5	; 0x05
    155c:	7e 81       	ldd	r23, Y+6	; 0x06
    155e:	8f 81       	ldd	r24, Y+7	; 0x07
    1560:	98 85       	ldd	r25, Y+8	; 0x08
    1562:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_is_Busy>
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)&=~(0x0F<<HALF_PORT_SHIFT) ;
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    156c:	28 2f       	mov	r18, r24
    156e:	82 2f       	mov	r24, r18
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 96       	adiw	r24, 0x02	; 2
    1574:	dc 01       	movw	r26, r24
    1576:	82 2f       	mov	r24, r18
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 96       	adiw	r24, 0x02	; 2
    157c:	fc 01       	movw	r30, r24
    157e:	80 81       	ld	r24, Z
    1580:	8f 70       	andi	r24, 0x0F	; 15
    1582:	8c 93       	st	X, r24
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)|=(((data&0xF0)>>4)<<HALF_PORT_SHIFT) ;
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    158a:	28 2f       	mov	r18, r24
    158c:	82 2f       	mov	r24, r18
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 96       	adiw	r24, 0x02	; 2
    1592:	dc 01       	movw	r26, r24
    1594:	82 2f       	mov	r24, r18
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 96       	adiw	r24, 0x02	; 2
    159a:	fc 01       	movw	r30, r24
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	82 95       	swap	r24
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	82 95       	swap	r24
    15ae:	92 95       	swap	r25
    15b0:	90 7f       	andi	r25, 0xF0	; 240
    15b2:	98 27       	eor	r25, r24
    15b4:	80 7f       	andi	r24, 0xF0	; 240
    15b6:	98 27       	eor	r25, r24
    15b8:	82 2b       	or	r24, r18
    15ba:	8c 93       	st	X, r24
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	69 2f       	mov	r22, r25
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	GPIO_WritePin(LCD_object.lcd_RS.port,LCD_object.lcd_RS.pin,HIGH) ;
    15c8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ca:	98 85       	ldd	r25, Y+8	; 0x08
    15cc:	69 2f       	mov	r22, r25
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	LCD_kick(LCD_object) ;
    15d4:	29 81       	ldd	r18, Y+1	; 0x01
    15d6:	3a 81       	ldd	r19, Y+2	; 0x02
    15d8:	4b 81       	ldd	r20, Y+3	; 0x03
    15da:	5c 81       	ldd	r21, Y+4	; 0x04
    15dc:	6d 81       	ldd	r22, Y+5	; 0x05
    15de:	7e 81       	ldd	r23, Y+6	; 0x06
    15e0:	8f 81       	ldd	r24, Y+7	; 0x07
    15e2:	98 85       	ldd	r25, Y+8	; 0x08
    15e4:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_kick>
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)&=~(0x0F<<HALF_PORT_SHIFT) ;
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    15ee:	28 2f       	mov	r18, r24
    15f0:	82 2f       	mov	r24, r18
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 96       	adiw	r24, 0x02	; 2
    15f6:	dc 01       	movw	r26, r24
    15f8:	82 2f       	mov	r24, r18
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 96       	adiw	r24, 0x02	; 2
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	8f 70       	andi	r24, 0x0F	; 15
    1604:	8c 93       	st	X, r24
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+PORT_OFFSET)|=((data&0x0F)<<HALF_PORT_SHIFT) ;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    160c:	28 2f       	mov	r18, r24
    160e:	82 2f       	mov	r24, r18
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 96       	adiw	r24, 0x02	; 2
    1614:	dc 01       	movw	r26, r24
    1616:	82 2f       	mov	r24, r18
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 96       	adiw	r24, 0x02	; 2
    161c:	fc 01       	movw	r30, r24
    161e:	80 81       	ld	r24, Z
    1620:	28 2f       	mov	r18, r24
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	82 95       	swap	r24
    162a:	92 95       	swap	r25
    162c:	90 7f       	andi	r25, 0xF0	; 240
    162e:	98 27       	eor	r25, r24
    1630:	80 7f       	andi	r24, 0xF0	; 240
    1632:	98 27       	eor	r25, r24
    1634:	82 2b       	or	r24, r18
    1636:	8c 93       	st	X, r24
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	69 2f       	mov	r22, r25
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	GPIO_WritePin(LCD_object.lcd_RS.port,LCD_object.lcd_RS.pin,HIGH) ;
    1644:	8f 81       	ldd	r24, Y+7	; 0x07
    1646:	98 85       	ldd	r25, Y+8	; 0x08
    1648:	69 2f       	mov	r22, r25
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	LCD_kick(LCD_object) ;
    1650:	29 81       	ldd	r18, Y+1	; 0x01
    1652:	3a 81       	ldd	r19, Y+2	; 0x02
    1654:	4b 81       	ldd	r20, Y+3	; 0x03
    1656:	5c 81       	ldd	r21, Y+4	; 0x04
    1658:	6d 81       	ldd	r22, Y+5	; 0x05
    165a:	7e 81       	ldd	r23, Y+6	; 0x06
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	98 85       	ldd	r25, Y+8	; 0x08
    1660:	0e 94 c6 0c 	call	0x198c	; 0x198c <LCD_kick>

	#endif
	count ++ ;
    1664:	80 91 b2 00 	lds	r24, 0x00B2
    1668:	90 91 b3 00 	lds	r25, 0x00B3
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	90 93 b3 00 	sts	0x00B3, r25
    1672:	80 93 b2 00 	sts	0x00B2, r24
	if (count==16){
    1676:	80 91 b2 00 	lds	r24, 0x00B2
    167a:	90 91 b3 00 	lds	r25, 0x00B3
    167e:	80 31       	cpi	r24, 0x10	; 16
    1680:	91 05       	cpc	r25, r1
    1682:	69 f4       	brne	.+26     	; 0x169e <LCD_send_char+0x176>
	LCD_goto(LCD_object,1,0);
    1684:	29 81       	ldd	r18, Y+1	; 0x01
    1686:	3a 81       	ldd	r19, Y+2	; 0x02
    1688:	4b 81       	ldd	r20, Y+3	; 0x03
    168a:	5c 81       	ldd	r21, Y+4	; 0x04
    168c:	6d 81       	ldd	r22, Y+5	; 0x05
    168e:	7e 81       	ldd	r23, Y+6	; 0x06
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	01 e0       	ldi	r16, 0x01	; 1
    1696:	ee 24       	eor	r14, r14
    1698:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_goto>
    169c:	21 c0       	rjmp	.+66     	; 0x16e0 <LCD_send_char+0x1b8>
	}else if (count==32){
    169e:	80 91 b2 00 	lds	r24, 0x00B2
    16a2:	90 91 b3 00 	lds	r25, 0x00B3
    16a6:	80 32       	cpi	r24, 0x20	; 32
    16a8:	91 05       	cpc	r25, r1
    16aa:	d1 f4       	brne	.+52     	; 0x16e0 <LCD_send_char+0x1b8>
		LCD_clear_screen(LCD_object);
    16ac:	29 81       	ldd	r18, Y+1	; 0x01
    16ae:	3a 81       	ldd	r19, Y+2	; 0x02
    16b0:	4b 81       	ldd	r20, Y+3	; 0x03
    16b2:	5c 81       	ldd	r21, Y+4	; 0x04
    16b4:	6d 81       	ldd	r22, Y+5	; 0x05
    16b6:	7e 81       	ldd	r23, Y+6	; 0x06
    16b8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ba:	98 85       	ldd	r25, Y+8	; 0x08
    16bc:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <LCD_clear_screen>
		LCD_goto(LCD_object,0,0) ;
    16c0:	29 81       	ldd	r18, Y+1	; 0x01
    16c2:	3a 81       	ldd	r19, Y+2	; 0x02
    16c4:	4b 81       	ldd	r20, Y+3	; 0x03
    16c6:	5c 81       	ldd	r21, Y+4	; 0x04
    16c8:	6d 81       	ldd	r22, Y+5	; 0x05
    16ca:	7e 81       	ldd	r23, Y+6	; 0x06
    16cc:	8f 81       	ldd	r24, Y+7	; 0x07
    16ce:	98 85       	ldd	r25, Y+8	; 0x08
    16d0:	00 e0       	ldi	r16, 0x00	; 0
    16d2:	ee 24       	eor	r14, r14
    16d4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_goto>
		count = 0; 
    16d8:	10 92 b3 00 	sts	0x00B3, r1
    16dc:	10 92 b2 00 	sts	0x00B2, r1
	}
	
}
    16e0:	29 96       	adiw	r28, 0x09	; 9
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	0f 91       	pop	r16
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <LCD_send_string>:

void LCD_send_string(LCD_Connections_t LCD_object , u8* string )
{
    16f6:	ef 92       	push	r14
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	2b 97       	sbiw	r28, 0x0b	; 11
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	2a 83       	std	Y+2, r18	; 0x02
    1712:	3b 83       	std	Y+3, r19	; 0x03
    1714:	4c 83       	std	Y+4, r20	; 0x04
    1716:	5d 83       	std	Y+5, r21	; 0x05
    1718:	6e 83       	std	Y+6, r22	; 0x06
    171a:	7f 83       	std	Y+7, r23	; 0x07
    171c:	88 87       	std	Y+8, r24	; 0x08
    171e:	99 87       	std	Y+9, r25	; 0x09
    1720:	1b 87       	std	Y+11, r17	; 0x0b
    1722:	0a 87       	std	Y+10, r16	; 0x0a
	u8 count =0 ;
    1724:	19 82       	std	Y+1, r1	; 0x01
	LCD_is_Busy(LCD_object);
    1726:	2a 81       	ldd	r18, Y+2	; 0x02
    1728:	3b 81       	ldd	r19, Y+3	; 0x03
    172a:	4c 81       	ldd	r20, Y+4	; 0x04
    172c:	5d 81       	ldd	r21, Y+5	; 0x05
    172e:	6e 81       	ldd	r22, Y+6	; 0x06
    1730:	7f 81       	ldd	r23, Y+7	; 0x07
    1732:	88 85       	ldd	r24, Y+8	; 0x08
    1734:	99 85       	ldd	r25, Y+9	; 0x09
    1736:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_is_Busy>
    173a:	36 c0       	rjmp	.+108    	; 0x17a8 <LCD_send_string+0xb2>
	while(*string)
	{
		LCD_send_char(LCD_object ,*string++) ;
    173c:	ea 85       	ldd	r30, Y+10	; 0x0a
    173e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1740:	e0 81       	ld	r30, Z
    1742:	8a 85       	ldd	r24, Y+10	; 0x0a
    1744:	9b 85       	ldd	r25, Y+11	; 0x0b
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	9b 87       	std	Y+11, r25	; 0x0b
    174a:	8a 87       	std	Y+10, r24	; 0x0a
    174c:	2a 81       	ldd	r18, Y+2	; 0x02
    174e:	3b 81       	ldd	r19, Y+3	; 0x03
    1750:	4c 81       	ldd	r20, Y+4	; 0x04
    1752:	5d 81       	ldd	r21, Y+5	; 0x05
    1754:	6e 81       	ldd	r22, Y+6	; 0x06
    1756:	7f 81       	ldd	r23, Y+7	; 0x07
    1758:	88 85       	ldd	r24, Y+8	; 0x08
    175a:	99 85       	ldd	r25, Y+9	; 0x09
    175c:	0e 2f       	mov	r16, r30
    175e:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_send_char>
		count ++ ;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	89 83       	std	Y+1, r24	; 0x01
		if(count==16)
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	80 31       	cpi	r24, 0x10	; 16
    176c:	69 f4       	brne	.+26     	; 0x1788 <LCD_send_string+0x92>
		{
			LCD_goto(LCD_object,1,0) ;
    176e:	2a 81       	ldd	r18, Y+2	; 0x02
    1770:	3b 81       	ldd	r19, Y+3	; 0x03
    1772:	4c 81       	ldd	r20, Y+4	; 0x04
    1774:	5d 81       	ldd	r21, Y+5	; 0x05
    1776:	6e 81       	ldd	r22, Y+6	; 0x06
    1778:	7f 81       	ldd	r23, Y+7	; 0x07
    177a:	88 85       	ldd	r24, Y+8	; 0x08
    177c:	99 85       	ldd	r25, Y+9	; 0x09
    177e:	01 e0       	ldi	r16, 0x01	; 1
    1780:	ee 24       	eor	r14, r14
    1782:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_goto>
    1786:	10 c0       	rjmp	.+32     	; 0x17a8 <LCD_send_string+0xb2>
		}else if (count ==32)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	80 32       	cpi	r24, 0x20	; 32
    178c:	69 f4       	brne	.+26     	; 0x17a8 <LCD_send_string+0xb2>
		{
			count = 0 ;
    178e:	19 82       	std	Y+1, r1	; 0x01
			LCD_goto(LCD_object,0,0);
    1790:	2a 81       	ldd	r18, Y+2	; 0x02
    1792:	3b 81       	ldd	r19, Y+3	; 0x03
    1794:	4c 81       	ldd	r20, Y+4	; 0x04
    1796:	5d 81       	ldd	r21, Y+5	; 0x05
    1798:	6e 81       	ldd	r22, Y+6	; 0x06
    179a:	7f 81       	ldd	r23, Y+7	; 0x07
    179c:	88 85       	ldd	r24, Y+8	; 0x08
    179e:	99 85       	ldd	r25, Y+9	; 0x09
    17a0:	00 e0       	ldi	r16, 0x00	; 0
    17a2:	ee 24       	eor	r14, r14
    17a4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <LCD_goto>

void LCD_send_string(LCD_Connections_t LCD_object , u8* string )
{
	u8 count =0 ;
	LCD_is_Busy(LCD_object);
	while(*string)
    17a8:	ea 85       	ldd	r30, Y+10	; 0x0a
    17aa:	fb 85       	ldd	r31, Y+11	; 0x0b
    17ac:	80 81       	ld	r24, Z
    17ae:	88 23       	and	r24, r24
    17b0:	29 f6       	brne	.-118    	; 0x173c <LCD_send_string+0x46>
		{
			count = 0 ;
			LCD_goto(LCD_object,0,0);
		}
	}
}
    17b2:	2b 96       	adiw	r28, 0x0b	; 11
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ef 90       	pop	r14
    17c8:	08 95       	ret

000017ca <LCD_goto>:


void LCD_goto(LCD_Connections_t LCD_object,u8 line ,u8 position)
{
    17ca:	ef 92       	push	r14
    17cc:	0f 93       	push	r16
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	2c 97       	sbiw	r28, 0x0c	; 12
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	2a 83       	std	Y+2, r18	; 0x02
    17e4:	3b 83       	std	Y+3, r19	; 0x03
    17e6:	4c 83       	std	Y+4, r20	; 0x04
    17e8:	5d 83       	std	Y+5, r21	; 0x05
    17ea:	6e 83       	std	Y+6, r22	; 0x06
    17ec:	7f 83       	std	Y+7, r23	; 0x07
    17ee:	88 87       	std	Y+8, r24	; 0x08
    17f0:	99 87       	std	Y+9, r25	; 0x09
    17f2:	0a 87       	std	Y+10, r16	; 0x0a
    17f4:	eb 86       	std	Y+11, r14	; 0x0b
	if((line==1||line==0)&&(position>=0&&position<16))
    17f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	19 f0       	breq	.+6      	; 0x1802 <LCD_goto+0x38>
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	88 23       	and	r24, r24
    1800:	e1 f4       	brne	.+56     	; 0x183a <LCD_goto+0x70>
    1802:	8b 85       	ldd	r24, Y+11	; 0x0b
    1804:	80 31       	cpi	r24, 0x10	; 16
    1806:	c8 f4       	brcc	.+50     	; 0x183a <LCD_goto+0x70>
	{
		u8 cmd = line==1?(LCD_SECOND_LINE + position ):(LCD_FIRST_LINE + position) ;
    1808:	8a 85       	ldd	r24, Y+10	; 0x0a
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	29 f4       	brne	.+10     	; 0x1818 <LCD_goto+0x4e>
    180e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1810:	98 2f       	mov	r25, r24
    1812:	90 54       	subi	r25, 0x40	; 64
    1814:	9c 87       	std	Y+12, r25	; 0x0c
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <LCD_goto+0x56>
    1818:	8b 85       	ldd	r24, Y+11	; 0x0b
    181a:	98 2f       	mov	r25, r24
    181c:	90 58       	subi	r25, 0x80	; 128
    181e:	9c 87       	std	Y+12, r25	; 0x0c
    1820:	8c 85       	ldd	r24, Y+12	; 0x0c
    1822:	89 83       	std	Y+1, r24	; 0x01
		LCD_send_command(LCD_object ,cmd) ;
    1824:	2a 81       	ldd	r18, Y+2	; 0x02
    1826:	3b 81       	ldd	r19, Y+3	; 0x03
    1828:	4c 81       	ldd	r20, Y+4	; 0x04
    182a:	5d 81       	ldd	r21, Y+5	; 0x05
    182c:	6e 81       	ldd	r22, Y+6	; 0x06
    182e:	7f 81       	ldd	r23, Y+7	; 0x07
    1830:	88 85       	ldd	r24, Y+8	; 0x08
    1832:	99 85       	ldd	r25, Y+9	; 0x09
    1834:	09 81       	ldd	r16, Y+1	; 0x01
    1836:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
	}
	
}
    183a:	2c 96       	adiw	r28, 0x0c	; 12
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	0f 91       	pop	r16
    184c:	ef 90       	pop	r14
    184e:	08 95       	ret

00001850 <LCD_send_number>:
void LCD_send_number(LCD_Connections_t LCD_object ,int num)
{
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	64 97       	sbiw	r28, 0x14	; 20
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	2b 87       	std	Y+11, r18	; 0x0b
    186a:	3c 87       	std	Y+12, r19	; 0x0c
    186c:	4d 87       	std	Y+13, r20	; 0x0d
    186e:	5e 87       	std	Y+14, r21	; 0x0e
    1870:	6f 87       	std	Y+15, r22	; 0x0f
    1872:	78 8b       	std	Y+16, r23	; 0x10
    1874:	89 8b       	std	Y+17, r24	; 0x11
    1876:	9a 8b       	std	Y+18, r25	; 0x12
    1878:	1c 8b       	std	Y+20, r17	; 0x14
    187a:	0b 8b       	std	Y+19, r16	; 0x13
	char volatile temp[10] ;
	sprintf(temp,"%d",num);
    187c:	00 d0       	rcall	.+0      	; 0x187e <LCD_send_number+0x2e>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <LCD_send_number+0x30>
    1880:	00 d0       	rcall	.+0      	; 0x1882 <LCD_send_number+0x32>
    1882:	ed b7       	in	r30, 0x3d	; 61
    1884:	fe b7       	in	r31, 0x3e	; 62
    1886:	31 96       	adiw	r30, 0x01	; 1
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	80 e6       	ldi	r24, 0x60	; 96
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	93 83       	std	Z+3, r25	; 0x03
    1896:	82 83       	std	Z+2, r24	; 0x02
    1898:	8b 89       	ldd	r24, Y+19	; 0x13
    189a:	9c 89       	ldd	r25, Y+20	; 0x14
    189c:	95 83       	std	Z+5, r25	; 0x05
    189e:	84 83       	std	Z+4, r24	; 0x04
    18a0:	0e 94 8a 12 	call	0x2514	; 0x2514 <sprintf>
    18a4:	8d b7       	in	r24, 0x3d	; 61
    18a6:	9e b7       	in	r25, 0x3e	; 62
    18a8:	06 96       	adiw	r24, 0x06	; 6
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	9e bf       	out	0x3e, r25	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	8d bf       	out	0x3d, r24	; 61
	LCD_send_string(LCD_object ,temp) ;
    18b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    18b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    18b8:	4d 85       	ldd	r20, Y+13	; 0x0d
    18ba:	5e 85       	ldd	r21, Y+14	; 0x0e
    18bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    18be:	78 89       	ldd	r23, Y+16	; 0x10
    18c0:	89 89       	ldd	r24, Y+17	; 0x11
    18c2:	9a 89       	ldd	r25, Y+18	; 0x12
    18c4:	fe 01       	movw	r30, r28
    18c6:	31 96       	adiw	r30, 0x01	; 1
    18c8:	8f 01       	movw	r16, r30
    18ca:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCD_send_string>
}
    18ce:	64 96       	adiw	r28, 0x14	; 20
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <LCD_is_Busy>:
/*----------------------------------------------------------------
--------------------- Private Functions Definitions --------------
----------------------------------------------------------------*/
void LCD_is_Busy(LCD_Connections_t LCD_object){
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	28 97       	sbiw	r28, 0x08	; 8
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	29 83       	std	Y+1, r18	; 0x01
    18fa:	3a 83       	std	Y+2, r19	; 0x02
    18fc:	4b 83       	std	Y+3, r20	; 0x03
    18fe:	5c 83       	std	Y+4, r21	; 0x04
    1900:	6d 83       	std	Y+5, r22	; 0x05
    1902:	7e 83       	std	Y+6, r23	; 0x06
    1904:	8f 83       	std	Y+7, r24	; 0x07
    1906:	98 87       	std	Y+8, r25	; 0x08
	GPIO_WritePort_DIR(LCD_object.DataPort ,PORT_OUTPUT) ;
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
	#endif

	#ifdef LCD_4BIT_MODE_EN
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+DIR_OFFSET)&=~(0x0F<<HALF_PORT_SHIFT) ;
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    190e:	28 2f       	mov	r18, r24
    1910:	82 2f       	mov	r24, r18
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	dc 01       	movw	r26, r24
    1918:	82 2f       	mov	r24, r18
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	fc 01       	movw	r30, r24
    1920:	80 81       	ld	r24, Z
    1922:	8f 70       	andi	r24, 0x0F	; 15
    1924:	8c 93       	st	X, r24
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,HIGH) ;
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	69 2f       	mov	r22, r25
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
	GPIO_WritePin(LCD_object.lcd_RS.port,LCD_object.lcd_RS.pin,LOW) ;
    1932:	8f 81       	ldd	r24, Y+7	; 0x07
    1934:	98 85       	ldd	r25, Y+8	; 0x08
    1936:	69 2f       	mov	r22, r25
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <LCD_is_Busy+0x5e>
	while(GPIO_ReadPin(LCD_object.DataPort,7)==0){asm volatile("NOP");} ;
    1940:	00 00       	nop
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	67 e0       	ldi	r22, 0x07	; 7
    1948:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <GPIO_ReadPin>
    194c:	88 23       	and	r24, r24
    194e:	c1 f3       	breq	.-16     	; 0x1940 <LCD_is_Busy+0x5c>
	*(volatile u8 *)(Get_Port_Addr(LCD1_PORT)+DIR_OFFSET)|=(0x0f<<HALF_PORT_SHIFT) ;
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    1956:	28 2f       	mov	r18, r24
    1958:	82 2f       	mov	r24, r18
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	dc 01       	movw	r26, r24
    1960:	82 2f       	mov	r24, r18
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	fc 01       	movw	r30, r24
    1968:	80 81       	ld	r24, Z
    196a:	80 6f       	ori	r24, 0xF0	; 240
    196c:	8c 93       	st	X, r24
	GPIO_WritePin(LCD_object.lcd_RW.port,LCD_object.lcd_RW.pin,LOW) ;
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	69 2f       	mov	r22, r25
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>

	#endif
}
    197a:	28 96       	adiw	r28, 0x08	; 8
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <LCD_kick>:

void LCD_kick(LCD_Connections_t LCD_object){
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	66 97       	sbiw	r28, 0x16	; 22
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	2f 87       	std	Y+15, r18	; 0x0f
    19a2:	38 8b       	std	Y+16, r19	; 0x10
    19a4:	49 8b       	std	Y+17, r20	; 0x11
    19a6:	5a 8b       	std	Y+18, r21	; 0x12
    19a8:	6b 8b       	std	Y+19, r22	; 0x13
    19aa:	7c 8b       	std	Y+20, r23	; 0x14
    19ac:	8d 8b       	std	Y+21, r24	; 0x15
    19ae:	9e 8b       	std	Y+22, r25	; 0x16
	GPIO_WritePin(LCD_object.lcd_Enable.port ,LCD_object.lcd_Enable.pin,HIGH) ;
    19b0:	89 89       	ldd	r24, Y+17	; 0x11
    19b2:	9a 89       	ldd	r25, Y+18	; 0x12
    19b4:	69 2f       	mov	r22, r25
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a8 e4       	ldi	r26, 0x48	; 72
    19c2:	b2 e4       	ldi	r27, 0x42	; 66
    19c4:	8b 87       	std	Y+11, r24	; 0x0b
    19c6:	9c 87       	std	Y+12, r25	; 0x0c
    19c8:	ad 87       	std	Y+13, r26	; 0x0d
    19ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4a e7       	ldi	r20, 0x7A	; 122
    19da:	53 e4       	ldi	r21, 0x43	; 67
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	8f 83       	std	Y+7, r24	; 0x07
    19e6:	98 87       	std	Y+8, r25	; 0x08
    19e8:	a9 87       	std	Y+9, r26	; 0x09
    19ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <LCD_kick+0x82>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	3f c0       	rjmp	.+126    	; 0x1a8c <LCD_kick+0x100>
	else if (__tmp > 65535)
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	4c f5       	brge	.+82     	; 0x1a78 <LCD_kick+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e2       	ldi	r20, 0x20	; 32
    1a34:	51 e4       	ldi	r21, 0x41	; 65
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <LCD_kick+0xe2>
    1a50:	89 e1       	ldi	r24, 0x19	; 25
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_kick+0xd0>
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <LCD_kick+0xc4>
    1a76:	14 c0       	rjmp	.+40     	; 0x1aa0 <LCD_kick+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_kick+0x10c>
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	GPIO_WritePin(LCD_object.lcd_Enable.port ,LCD_object.lcd_Enable.pin,LOW) ;
    1aa0:	89 89       	ldd	r24, Y+17	; 0x11
    1aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa4:	69 2f       	mov	r22, r25
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>

}
    1aac:	66 96       	adiw	r28, 0x16	; 22
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <LCD_clear_screen>:

void LCD_clear_screen(LCD_Connections_t LCD_object){
    1abe:	0f 93       	push	r16
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	28 97       	sbiw	r28, 0x08	; 8
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	29 83       	std	Y+1, r18	; 0x01
    1ad6:	3a 83       	std	Y+2, r19	; 0x02
    1ad8:	4b 83       	std	Y+3, r20	; 0x03
    1ada:	5c 83       	std	Y+4, r21	; 0x04
    1adc:	6d 83       	std	Y+5, r22	; 0x05
    1ade:	7e 83       	std	Y+6, r23	; 0x06
    1ae0:	8f 83       	std	Y+7, r24	; 0x07
    1ae2:	98 87       	std	Y+8, r25	; 0x08
	LCD_send_command(LCD_object,LCD_CLR_SCREEN) ;
    1ae4:	29 81       	ldd	r18, Y+1	; 0x01
    1ae6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ae8:	4b 81       	ldd	r20, Y+3	; 0x03
    1aea:	5c 81       	ldd	r21, Y+4	; 0x04
    1aec:	6d 81       	ldd	r22, Y+5	; 0x05
    1aee:	7e 81       	ldd	r23, Y+6	; 0x06
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	98 85       	ldd	r25, Y+8	; 0x08
    1af4:	01 e0       	ldi	r16, 0x01	; 1
    1af6:	0e 94 ed 09 	call	0x13da	; 0x13da <LCD_send_command>
}
    1afa:	28 96       	adiw	r28, 0x08	; 8
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	0f 91       	pop	r16
    1b0c:	08 95       	ret

00001b0e <KeyPad_Init>:




void KeyPad_Init()
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePort_DIR(KEYPAD_PORT,KEYPAD_PORT_DIR) ;
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	60 ef       	ldi	r22, 0xF0	; 240
    1b1a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <GPIO_WritePort_DIR>
	GPIO_WritePort(KEYPAD_PORT ,0xFF) ; //make the output pint HIGH , and make the inputs pulled up .
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	0e 94 cf 10 	call	0x219e	; 0x219e <GPIO_WritePort>
	
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <KeyPad_GetChar>:


u8 KeyPad_GetChar(void)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	61 97       	sbiw	r28, 0x11	; 17
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
	u8 i , j;
	
	for (i =0 ; i<4 ;i++)
    1b40:	18 8a       	std	Y+16, r1	; 0x10
    1b42:	ba c0       	rjmp	.+372    	; 0x1cb8 <KeyPad_GetChar+0x18c>
	{
		GPIO_WritePort(KEYPAD_PORT ,0xFF);
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	6f ef       	ldi	r22, 0xFF	; 255
    1b48:	0e 94 cf 10 	call	0x219e	; 0x219e <GPIO_WritePort>
		GPIO_WritePin(KEYPAD_PORT,KeyPad_C[i],LOW) ;
    1b4c:	88 89       	ldd	r24, Y+16	; 0x10
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	fc 01       	movw	r30, r24
    1b58:	e9 55       	subi	r30, 0x59	; 89
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	98 2f       	mov	r25, r24
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	69 2f       	mov	r22, r25
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 3c 11 	call	0x2278	; 0x2278 <GPIO_WritePin>
		
		for (j=0 ;j< 4 ;j++)
    1b6c:	1f 86       	std	Y+15, r1	; 0x0f
    1b6e:	9d c0       	rjmp	.+314    	; 0x1caa <KeyPad_GetChar+0x17e>
		{	
			if (GPIO_ReadPin(KEYPAD_PORT,KeyPad_R[j])==0)
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	e1 56       	subi	r30, 0x61	; 97
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	98 2f       	mov	r25, r24
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	69 2f       	mov	r22, r25
    1b8a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <GPIO_ReadPin>
    1b8e:	88 23       	and	r24, r24
    1b90:	b9 f4       	brne	.+46     	; 0x1bc0 <KeyPad_GetChar+0x94>
			{	
				while(GPIO_ReadPin(KEYPAD_PORT,KeyPad_R[j])==0);		
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	e1 56       	subi	r30, 0x61	; 97
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	69 2f       	mov	r22, r25
    1bac:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <GPIO_ReadPin>
    1bb0:	88 23       	and	r24, r24
    1bb2:	79 f3       	breq	.-34     	; 0x1b92 <KeyPad_GetChar+0x66>
				return ConvToChar(i,j);			
    1bb4:	88 89       	ldd	r24, Y+16	; 0x10
    1bb6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bb8:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <ConvToChar>
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
    1bbe:	82 c0       	rjmp	.+260    	; 0x1cc4 <KeyPad_GetChar+0x198>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e2       	ldi	r26, 0x20	; 32
    1bc6:	b1 e4       	ldi	r27, 0x41	; 65
    1bc8:	8b 87       	std	Y+11, r24	; 0x0b
    1bca:	9c 87       	std	Y+12, r25	; 0x0c
    1bcc:	ad 87       	std	Y+13, r26	; 0x0d
    1bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a e7       	ldi	r20, 0x7A	; 122
    1bde:	53 e4       	ldi	r21, 0x43	; 67
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8f 83       	std	Y+7, r24	; 0x07
    1bea:	98 87       	std	Y+8, r25	; 0x08
    1bec:	a9 87       	std	Y+9, r26	; 0x09
    1bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <KeyPad_GetChar+0xe6>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <KeyPad_GetChar+0x164>
	else if (__tmp > 65535)
    1c12:	6f 81       	ldd	r22, Y+7	; 0x07
    1c14:	78 85       	ldd	r23, Y+8	; 0x08
    1c16:	89 85       	ldd	r24, Y+9	; 0x09
    1c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <KeyPad_GetChar+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <KeyPad_GetChar+0x146>
    1c54:	89 e1       	ldi	r24, 0x19	; 25
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <KeyPad_GetChar+0x134>
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <KeyPad_GetChar+0x128>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <KeyPad_GetChar+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <KeyPad_GetChar+0x170>
    1ca0:	9a 83       	std	Y+2, r25	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	for (i =0 ; i<4 ;i++)
	{
		GPIO_WritePort(KEYPAD_PORT ,0xFF);
		GPIO_WritePin(KEYPAD_PORT,KeyPad_C[i],LOW) ;
		
		for (j=0 ;j< 4 ;j++)
    1ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca6:	8f 5f       	subi	r24, 0xFF	; 255
    1ca8:	8f 87       	std	Y+15, r24	; 0x0f
    1caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	08 f4       	brcc	.+2      	; 0x1cb2 <KeyPad_GetChar+0x186>
    1cb0:	5f cf       	rjmp	.-322    	; 0x1b70 <KeyPad_GetChar+0x44>

u8 KeyPad_GetChar(void)
{
	u8 i , j;
	
	for (i =0 ; i<4 ;i++)
    1cb2:	88 89       	ldd	r24, Y+16	; 0x10
    1cb4:	8f 5f       	subi	r24, 0xFF	; 255
    1cb6:	88 8b       	std	Y+16, r24	; 0x10
    1cb8:	88 89       	ldd	r24, Y+16	; 0x10
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	08 f4       	brcc	.+2      	; 0x1cc0 <KeyPad_GetChar+0x194>
    1cbe:	42 cf       	rjmp	.-380    	; 0x1b44 <KeyPad_GetChar+0x18>
				return ConvToChar(i,j);			
			}
			_delay_ms(10);
		}
	}
return 'N'	;
    1cc0:	8e e4       	ldi	r24, 0x4E	; 78
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
    1cc4:	89 89       	ldd	r24, Y+17	; 0x11
}
    1cc6:	61 96       	adiw	r28, 0x11	; 17
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <ConvToChar>:

u8 ConvToChar(u8 i  ,u8 j){
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	2b 97       	sbiw	r28, 0x0b	; 11
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	6a 83       	std	Y+2, r22	; 0x02
	
	if(i==0)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 23       	and	r24, r24
    1cf4:	59 f5       	brne	.+86     	; 0x1d4c <ConvToChar+0x74>
	{
		switch(j){
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	3b 87       	std	Y+11, r19	; 0x0b
    1cfe:	2a 87       	std	Y+10, r18	; 0x0a
    1d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	c1 f0       	breq	.+48     	; 0x1d3a <ConvToChar+0x62>
    1d0a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d0c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <ConvToChar+0x46>
    1d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	61 f0       	breq	.+24     	; 0x1d34 <ConvToChar+0x5c>
    1d1c:	a1 c0       	rjmp	.+322    	; 0x1e60 <ConvToChar+0x188>
    1d1e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d20:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	31 05       	cpc	r19, r1
    1d26:	61 f0       	breq	.+24     	; 0x1d40 <ConvToChar+0x68>
    1d28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	51 f0       	breq	.+20     	; 0x1d46 <ConvToChar+0x6e>
    1d32:	96 c0       	rjmp	.+300    	; 0x1e60 <ConvToChar+0x188>
		case 0 : return '7' ;
    1d34:	97 e3       	ldi	r25, 0x37	; 55
    1d36:	99 87       	std	Y+9, r25	; 0x09
    1d38:	95 c0       	rjmp	.+298    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 1: return '4' ;
    1d3a:	24 e3       	ldi	r18, 0x34	; 52
    1d3c:	29 87       	std	Y+9, r18	; 0x09
    1d3e:	92 c0       	rjmp	.+292    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 2 : return '1' ;
    1d40:	31 e3       	ldi	r19, 0x31	; 49
    1d42:	39 87       	std	Y+9, r19	; 0x09
    1d44:	8f c0       	rjmp	.+286    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 3: return 'O' ;
    1d46:	8f e4       	ldi	r24, 0x4F	; 79
    1d48:	89 87       	std	Y+9, r24	; 0x09
    1d4a:	8c c0       	rjmp	.+280    	; 0x1e64 <ConvToChar+0x18c>
		break ;
	}
	}else if (i==1)
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	59 f5       	brne	.+86     	; 0x1da8 <ConvToChar+0xd0>
	{
		switch(j){
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	38 87       	std	Y+8, r19	; 0x08
    1d5a:	2f 83       	std	Y+7, r18	; 0x07
    1d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5e:	98 85       	ldd	r25, Y+8	; 0x08
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	91 05       	cpc	r25, r1
    1d64:	c1 f0       	breq	.+48     	; 0x1d96 <ConvToChar+0xbe>
    1d66:	2f 81       	ldd	r18, Y+7	; 0x07
    1d68:	38 85       	ldd	r19, Y+8	; 0x08
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <ConvToChar+0xa2>
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	98 85       	ldd	r25, Y+8	; 0x08
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <ConvToChar+0xb8>
    1d78:	73 c0       	rjmp	.+230    	; 0x1e60 <ConvToChar+0x188>
    1d7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d7c:	38 85       	ldd	r19, Y+8	; 0x08
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <ConvToChar+0xc4>
    1d84:	8f 81       	ldd	r24, Y+7	; 0x07
    1d86:	98 85       	ldd	r25, Y+8	; 0x08
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	51 f0       	breq	.+20     	; 0x1da2 <ConvToChar+0xca>
    1d8e:	68 c0       	rjmp	.+208    	; 0x1e60 <ConvToChar+0x188>
		case 0 : return '8' ;
    1d90:	98 e3       	ldi	r25, 0x38	; 56
    1d92:	99 87       	std	Y+9, r25	; 0x09
    1d94:	67 c0       	rjmp	.+206    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 1: return '5' ;
    1d96:	25 e3       	ldi	r18, 0x35	; 53
    1d98:	29 87       	std	Y+9, r18	; 0x09
    1d9a:	64 c0       	rjmp	.+200    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 2 : return '2' ;
    1d9c:	32 e3       	ldi	r19, 0x32	; 50
    1d9e:	39 87       	std	Y+9, r19	; 0x09
    1da0:	61 c0       	rjmp	.+194    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 3: return '0' ;
    1da2:	80 e3       	ldi	r24, 0x30	; 48
    1da4:	89 87       	std	Y+9, r24	; 0x09
    1da6:	5e c0       	rjmp	.+188    	; 0x1e64 <ConvToChar+0x18c>
		break ;
	}
	}else if (i==2)
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	82 30       	cpi	r24, 0x02	; 2
    1dac:	59 f5       	brne	.+86     	; 0x1e04 <ConvToChar+0x12c>
	{
		switch(j){
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	3e 83       	std	Y+6, r19	; 0x06
    1db6:	2d 83       	std	Y+5, r18	; 0x05
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	c1 f0       	breq	.+48     	; 0x1df2 <ConvToChar+0x11a>
    1dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	2c f4       	brge	.+10     	; 0x1dd6 <ConvToChar+0xfe>
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	61 f0       	breq	.+24     	; 0x1dec <ConvToChar+0x114>
    1dd4:	45 c0       	rjmp	.+138    	; 0x1e60 <ConvToChar+0x188>
    1dd6:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dda:	22 30       	cpi	r18, 0x02	; 2
    1ddc:	31 05       	cpc	r19, r1
    1dde:	61 f0       	breq	.+24     	; 0x1df8 <ConvToChar+0x120>
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	83 30       	cpi	r24, 0x03	; 3
    1de6:	91 05       	cpc	r25, r1
    1de8:	51 f0       	breq	.+20     	; 0x1dfe <ConvToChar+0x126>
    1dea:	3a c0       	rjmp	.+116    	; 0x1e60 <ConvToChar+0x188>
		case 0 : return '9' ;
    1dec:	99 e3       	ldi	r25, 0x39	; 57
    1dee:	99 87       	std	Y+9, r25	; 0x09
    1df0:	39 c0       	rjmp	.+114    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 1: return '6' ;
    1df2:	26 e3       	ldi	r18, 0x36	; 54
    1df4:	29 87       	std	Y+9, r18	; 0x09
    1df6:	36 c0       	rjmp	.+108    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 2 : return '3' ;
    1df8:	33 e3       	ldi	r19, 0x33	; 51
    1dfa:	39 87       	std	Y+9, r19	; 0x09
    1dfc:	33 c0       	rjmp	.+102    	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 3: return '=' ;
    1dfe:	8d e3       	ldi	r24, 0x3D	; 61
    1e00:	89 87       	std	Y+9, r24	; 0x09
    1e02:	30 c0       	rjmp	.+96     	; 0x1e64 <ConvToChar+0x18c>
		break ;
	}
	}else if (i==3)
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	59 f5       	brne	.+86     	; 0x1e60 <ConvToChar+0x188>
	{
		switch(j){
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3c 83       	std	Y+4, r19	; 0x04
    1e12:	2b 83       	std	Y+3, r18	; 0x03
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	c1 f0       	breq	.+48     	; 0x1e4e <ConvToChar+0x176>
    1e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e20:	3c 81       	ldd	r19, Y+4	; 0x04
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <ConvToChar+0x15a>
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	61 f0       	breq	.+24     	; 0x1e48 <ConvToChar+0x170>
    1e30:	17 c0       	rjmp	.+46     	; 0x1e60 <ConvToChar+0x188>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	61 f0       	breq	.+24     	; 0x1e54 <ConvToChar+0x17c>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	83 30       	cpi	r24, 0x03	; 3
    1e42:	91 05       	cpc	r25, r1
    1e44:	51 f0       	breq	.+20     	; 0x1e5a <ConvToChar+0x182>
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <ConvToChar+0x188>
		case 0 : return '/' ;
    1e48:	9f e2       	ldi	r25, 0x2F	; 47
    1e4a:	99 87       	std	Y+9, r25	; 0x09
    1e4c:	0b c0       	rjmp	.+22     	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 1: return '*' ;
    1e4e:	2a e2       	ldi	r18, 0x2A	; 42
    1e50:	29 87       	std	Y+9, r18	; 0x09
    1e52:	08 c0       	rjmp	.+16     	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 2 : return '-' ;
    1e54:	3d e2       	ldi	r19, 0x2D	; 45
    1e56:	39 87       	std	Y+9, r19	; 0x09
    1e58:	05 c0       	rjmp	.+10     	; 0x1e64 <ConvToChar+0x18c>
		break ;
		case 3: return '+' ;
    1e5a:	8b e2       	ldi	r24, 0x2B	; 43
    1e5c:	89 87       	std	Y+9, r24	; 0x09
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <ConvToChar+0x18c>
		break ;
		}
	}
	
	return 'N' ;
    1e60:	9e e4       	ldi	r25, 0x4E	; 78
    1e62:	99 87       	std	Y+9, r25	; 0x09
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
}
    1e66:	2b 96       	adiw	r28, 0x0b	; 11
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <MCAL_I2C_Init>:
#define TWEA    6
#define TWINT   7



void MCAL_I2C_Init( I2C_config_t* I2C_config ) {
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <MCAL_I2C_Init+0xa>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <MCAL_I2C_Init+0xc>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	
	myTWBR = (u8)(((I2C_config->fcpu/I2C_config->SCL_Clock)-16)/2*I2C_config->prescaller) ;
    1e8c:	00 e2       	ldi	r16, 0x20	; 32
    1e8e:	10 e0       	ldi	r17, 0x00	; 0
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	85 81       	ldd	r24, Z+5	; 0x05
    1e96:	96 81       	ldd	r25, Z+6	; 0x06
    1e98:	a7 81       	ldd	r26, Z+7	; 0x07
    1e9a:	b0 85       	ldd	r27, Z+8	; 0x08
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	21 81       	ldd	r18, Z+1	; 0x01
    1ea2:	32 81       	ldd	r19, Z+2	; 0x02
    1ea4:	43 81       	ldd	r20, Z+3	; 0x03
    1ea6:	54 81       	ldd	r21, Z+4	; 0x04
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
    1eb0:	da 01       	movw	r26, r20
    1eb2:	c9 01       	movw	r24, r18
    1eb4:	40 97       	sbiw	r24, 0x10	; 16
    1eb6:	a1 09       	sbc	r26, r1
    1eb8:	b1 09       	sbc	r27, r1
    1eba:	b6 95       	lsr	r27
    1ebc:	a7 95       	ror	r26
    1ebe:	97 95       	ror	r25
    1ec0:	87 95       	ror	r24
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	20 81       	ld	r18, Z
    1ec8:	22 2f       	mov	r18, r18
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	50 e0       	ldi	r21, 0x00	; 0
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 12 12 	call	0x2424	; 0x2424 <__mulsi3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 83       	st	Z, r24
	
	myTWSR &=~(0b11) ;
    1ee0:	a1 e2       	ldi	r26, 0x21	; 33
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e1 e2       	ldi	r30, 0x21	; 33
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8c 7f       	andi	r24, 0xFC	; 252
    1eec:	8c 93       	st	X, r24
	switch (I2C_config->prescaller) {
    1eee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	3c 83       	std	Y+4, r19	; 0x04
    1efa:	2b 83       	std	Y+3, r18	; 0x03
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	84 30       	cpi	r24, 0x04	; 4
    1f02:	91 05       	cpc	r25, r1
    1f04:	e9 f0       	breq	.+58     	; 0x1f40 <MCAL_I2C_Init+0xc8>
    1f06:	eb 81       	ldd	r30, Y+3	; 0x03
    1f08:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0a:	e5 30       	cpi	r30, 0x05	; 5
    1f0c:	f1 05       	cpc	r31, r1
    1f0e:	34 f4       	brge	.+12     	; 0x1f1c <MCAL_I2C_Init+0xa4>
    1f10:	2b 81       	ldd	r18, Y+3	; 0x03
    1f12:	3c 81       	ldd	r19, Y+4	; 0x04
    1f14:	21 30       	cpi	r18, 0x01	; 1
    1f16:	31 05       	cpc	r19, r1
    1f18:	61 f0       	breq	.+24     	; 0x1f32 <MCAL_I2C_Init+0xba>
    1f1a:	29 c0       	rjmp	.+82     	; 0x1f6e <MCAL_I2C_Init+0xf6>
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	80 31       	cpi	r24, 0x10	; 16
    1f22:	91 05       	cpc	r25, r1
    1f24:	a9 f0       	breq	.+42     	; 0x1f50 <MCAL_I2C_Init+0xd8>
    1f26:	eb 81       	ldd	r30, Y+3	; 0x03
    1f28:	fc 81       	ldd	r31, Y+4	; 0x04
    1f2a:	e0 34       	cpi	r30, 0x40	; 64
    1f2c:	f1 05       	cpc	r31, r1
    1f2e:	c1 f0       	breq	.+48     	; 0x1f60 <MCAL_I2C_Init+0xe8>
    1f30:	1e c0       	rjmp	.+60     	; 0x1f6e <MCAL_I2C_Init+0xf6>
		case 1 : 
		myTWSR |= 0 ;
    1f32:	e1 e2       	ldi	r30, 0x21	; 33
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	a1 e2       	ldi	r26, 0x21	; 33
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	8c 91       	ld	r24, X
    1f3c:	80 83       	st	Z, r24
    1f3e:	17 c0       	rjmp	.+46     	; 0x1f6e <MCAL_I2C_Init+0xf6>
		break;
		case 4 : 
		myTWSR |= 1 ;
    1f40:	a1 e2       	ldi	r26, 0x21	; 33
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e1 e2       	ldi	r30, 0x21	; 33
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	81 60       	ori	r24, 0x01	; 1
    1f4c:	8c 93       	st	X, r24
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <MCAL_I2C_Init+0xf6>
		break;
		case 16 : 
		myTWSR|= 2 ;
    1f50:	a1 e2       	ldi	r26, 0x21	; 33
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e1 e2       	ldi	r30, 0x21	; 33
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	8c 93       	st	X, r24
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <MCAL_I2C_Init+0xf6>
		break ;
		case 64 : 
		myTWSR |= 3 ;
    1f60:	a1 e2       	ldi	r26, 0x21	; 33
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e1 e2       	ldi	r30, 0x21	; 33
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	83 60       	ori	r24, 0x03	; 3
    1f6c:	8c 93       	st	X, r24
		break;
	}
	
	
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	08 95       	ret

00001f80 <MCAL_I2C_Start>:
void MCAL_I2C_Start(void) {
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	myTWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) ;
    1f88:	e6 e5       	ldi	r30, 0x56	; 86
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	84 ea       	ldi	r24, 0xA4	; 164
    1f8e:	80 83       	st	Z, r24
	while (!(myTWCR & (1<<TWINT)));
    1f90:	e6 e5       	ldi	r30, 0x56	; 86
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 23       	and	r24, r24
    1f98:	dc f7       	brge	.-10     	; 0x1f90 <MCAL_I2C_Start+0x10>
	while((myTWSR&(~0b11))!=0x08) ;
    1f9a:	e1 e2       	ldi	r30, 0x21	; 33
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	8c 7f       	andi	r24, 0xFC	; 252
    1fa6:	88 30       	cpi	r24, 0x08	; 8
    1fa8:	91 05       	cpc	r25, r1
    1faa:	b9 f7       	brne	.-18     	; 0x1f9a <MCAL_I2C_Start+0x1a>
	
}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <MCAL_I2C_Send>:
void MCAL_I2C_Send(u8 Data) {
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	0f 92       	push	r0
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	
	myTWDR = Data ;
    1fbe:	e3 e2       	ldi	r30, 0x23	; 35
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	80 83       	st	Z, r24
	myTWCR = (1<<TWINT)|(1<<TWEN) ;
    1fc6:	e6 e5       	ldi	r30, 0x56	; 86
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	84 e8       	ldi	r24, 0x84	; 132
    1fcc:	80 83       	st	Z, r24
	while (!(myTWCR & (1<<TWINT)));
    1fce:	e6 e5       	ldi	r30, 0x56	; 86
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 23       	and	r24, r24
    1fd6:	dc f7       	brge	.-10     	; 0x1fce <MCAL_I2C_Send+0x1c>


}
    1fd8:	0f 90       	pop	r0
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <MCAL_I2C_Stop>:
void MCAL_I2C_Stop (void) {
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
		myTWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN) ;
    1fe8:	e6 e5       	ldi	r30, 0x56	; 86
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	84 e9       	ldi	r24, 0x94	; 148
    1fee:	80 83       	st	Z, r24

}
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <MCAL_I2C_Wait>:

void MCAL_I2C_Wait(u8 State_code){
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
	
	while((myTWSR&(~0b11))!=State_code) ;
    2002:	e1 e2       	ldi	r30, 0x21	; 33
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c 01       	movw	r18, r24
    200e:	2c 7f       	andi	r18, 0xFC	; 252
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	28 17       	cp	r18, r24
    2018:	39 07       	cpc	r19, r25
    201a:	99 f7       	brne	.-26     	; 0x2002 <MCAL_I2C_Wait+0xc>
	
}
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <MCAL_I2C_SetAdd>:

void MCAL_I2C_SetAdd(u8 address) {
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	0f 92       	push	r0
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01

	myTWAR = address ;
    2030:	e2 e2       	ldi	r30, 0x22	; 34
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	80 83       	st	Z, r24
}
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <MCAL_I2C_Read>:
void MCAL_I2C_Read(u8* Buff ) {
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <MCAL_I2C_Read+0x6>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
	myTWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN) ;
    204e:	e6 e5       	ldi	r30, 0x56	; 86
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	84 ec       	ldi	r24, 0xC4	; 196
    2054:	80 83       	st	Z, r24
	while ((myTWCR&(1<<TWINT))==0) ;
    2056:	e6 e5       	ldi	r30, 0x56	; 86
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 23       	and	r24, r24
    205e:	dc f7       	brge	.-10     	; 0x2056 <MCAL_I2C_Read+0x16>
	while ((myTWSR&(~0b11))!=0x60) ;
    2060:	e1 e2       	ldi	r30, 0x21	; 33
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	88 2f       	mov	r24, r24
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	8c 7f       	andi	r24, 0xFC	; 252
    206c:	80 36       	cpi	r24, 0x60	; 96
    206e:	91 05       	cpc	r25, r1
    2070:	b9 f7       	brne	.-18     	; 0x2060 <MCAL_I2C_Read+0x20>
	myTWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN) ;
    2072:	e6 e5       	ldi	r30, 0x56	; 86
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	84 ec       	ldi	r24, 0xC4	; 196
    2078:	80 83       	st	Z, r24
	while ((myTWCR&(1<<TWINT))==0) ;
    207a:	e6 e5       	ldi	r30, 0x56	; 86
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	88 23       	and	r24, r24
    2082:	dc f7       	brge	.-10     	; 0x207a <MCAL_I2C_Read+0x3a>
	while ((myTWSR&(~0b11))!=0x80) ;
    2084:	e1 e2       	ldi	r30, 0x21	; 33
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	8c 7f       	andi	r24, 0xFC	; 252
    2090:	80 38       	cpi	r24, 0x80	; 128
    2092:	91 05       	cpc	r25, r1
    2094:	b9 f7       	brne	.-18     	; 0x2084 <MCAL_I2C_Read+0x44>
	*Buff = myTWDR ;
    2096:	e3 e2       	ldi	r30, 0x23	; 35
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	e9 81       	ldd	r30, Y+1	; 0x01
    209e:	fa 81       	ldd	r31, Y+2	; 0x02
    20a0:	80 83       	st	Z, r24

}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <Get_Port_Addr>:

#include"GPIO.h"



u8 Get_Port_Addr(u8 port){
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <Get_Port_Addr+0x6>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <Get_Port_Addr+0x8>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 base_address =0 ;
    20ba:	19 82       	std	Y+1, r1	; 0x01
	switch (port){
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	3c 83       	std	Y+4, r19	; 0x04
    20c4:	2b 83       	std	Y+3, r18	; 0x03
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	81 30       	cpi	r24, 0x01	; 1
    20cc:	91 05       	cpc	r25, r1
    20ce:	c1 f0       	breq	.+48     	; 0x2100 <Get_Port_Addr+0x54>
    20d0:	2b 81       	ldd	r18, Y+3	; 0x03
    20d2:	3c 81       	ldd	r19, Y+4	; 0x04
    20d4:	22 30       	cpi	r18, 0x02	; 2
    20d6:	31 05       	cpc	r19, r1
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <Get_Port_Addr+0x38>
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	61 f0       	breq	.+24     	; 0x20fa <Get_Port_Addr+0x4e>
    20e2:	16 c0       	rjmp	.+44     	; 0x2110 <Get_Port_Addr+0x64>
    20e4:	2b 81       	ldd	r18, Y+3	; 0x03
    20e6:	3c 81       	ldd	r19, Y+4	; 0x04
    20e8:	22 30       	cpi	r18, 0x02	; 2
    20ea:	31 05       	cpc	r19, r1
    20ec:	61 f0       	breq	.+24     	; 0x2106 <Get_Port_Addr+0x5a>
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	83 30       	cpi	r24, 0x03	; 3
    20f4:	91 05       	cpc	r25, r1
    20f6:	51 f0       	breq	.+20     	; 0x210c <Get_Port_Addr+0x60>
    20f8:	0b c0       	rjmp	.+22     	; 0x2110 <Get_Port_Addr+0x64>
		
		case Port_A :
		base_address= BASE_PORTA ;
    20fa:	89 e3       	ldi	r24, 0x39	; 57
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	08 c0       	rjmp	.+16     	; 0x2110 <Get_Port_Addr+0x64>
		break ;
		
		case Port_B :
		base_address= BASE_PORTB ;
    2100:	86 e3       	ldi	r24, 0x36	; 54
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	05 c0       	rjmp	.+10     	; 0x2110 <Get_Port_Addr+0x64>
		break;
		
		case Port_C :
		base_address= BASE_PORTC ;
    2106:	83 e3       	ldi	r24, 0x33	; 51
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <Get_Port_Addr+0x64>
		break;
		
		case Port_D :
		base_address= BASE_PORTD ;
    210c:	80 e3       	ldi	r24, 0x30	; 48
    210e:	89 83       	std	Y+1, r24	; 0x01
		break ;
		

	}
	
	return base_address ;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <GPIO_init>:
/************************************************************************/
/* Initialization of ports                                              */                       
/************************************************************************/
void GPIO_init(void){
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <GPIO_init+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
for (int i = 0 ;i<Number_of_Ports ;i++)
    212a:	1a 82       	std	Y+2, r1	; 0x02
    212c:	19 82       	std	Y+1, r1	; 0x01
    212e:	0a c0       	rjmp	.+20     	; 0x2144 <GPIO_init+0x24>
{
	GPIO_WritePort_DIR(GPIO_PORT_DIR_input,i) ;
    2130:	99 81       	ldd	r25, Y+1	; 0x01
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	69 2f       	mov	r22, r25
    2136:	0e 94 e5 10 	call	0x21ca	; 0x21ca <GPIO_WritePort_DIR>
}
/************************************************************************/
/* Initialization of ports                                              */                       
/************************************************************************/
void GPIO_init(void){
for (int i = 0 ;i<Number_of_Ports ;i++)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	91 05       	cpc	r25, r1
    214c:	8c f3       	brlt	.-30     	; 0x2130 <GPIO_init+0x10>
{
	GPIO_WritePort_DIR(GPIO_PORT_DIR_input,i) ;

}

}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <GPIO_ReadPort_DIR>:
/************************************************************************/
/* Port Operations                                                      */             
/************************************************************************/
// read port direction which is DDRx
u8 GPIO_ReadPort_DIR (u8 PortName){
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	89 83       	std	Y+1, r24	; 0x01
	return *(volatile u8*)(Get_Port_Addr(PortName)+ DIR_OFFSET);
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    216a:	88 2f       	mov	r24, r24
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	fc 01       	movw	r30, r24
    2172:	80 81       	ld	r24, Z
}
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <GPIO_ReadPort>:

//read port value in input case from PINx
u8 GPIO_ReadPort(u8 PortName){
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	89 83       	std	Y+1, r24	; 0x01
	return *(volatile u8*)(Get_Port_Addr(PortName)+PIN_OFFSET) ;
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	fc 01       	movw	r30, r24
    2194:	80 81       	ld	r24, Z
}
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <GPIO_WritePort>:

//set port value in register PORTx
u8 GPIO_WritePort(u8 PortVal , u8 PortName){
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <GPIO_WritePort+0x6>
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)=PortVal ;
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 96       	adiw	r24, 0x02	; 2
    21b8:	fc 01       	movw	r30, r24
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	80 83       	st	Z, r24
	return No_Error ;
    21be:	81 e0       	ldi	r24, 0x01	; 1
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <GPIO_WritePort_DIR>:

// set port direction in register DDRx
u8 GPIO_WritePort_DIR(u8 PortVal , u8 PortName){
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <GPIO_WritePort_DIR+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*)(Get_Port_Addr(PortName)+ DIR_OFFSET)=PortVal ;
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	fc 01       	movw	r30, r24
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	80 83       	st	Z, r24
	return No_Error ;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <GPIO_ReadPin>:
/************************************************************************/
/* PINS operation                                                        */            
/************************************************************************/

//read pin from PINx.y
u8 GPIO_ReadPin(u8 PortName,u8 PinIndex){
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <GPIO_ReadPin+0x6>
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	6a 83       	std	Y+2, r22	; 0x02
	return ((*(volatile u8*)(Get_Port_Addr(PortName)+PIN_OFFSET))>>PinIndex)&0x01;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	fc 01       	movw	r30, r24
    2210:	80 81       	ld	r24, Z
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a9 01       	movw	r20, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <GPIO_ReadPin+0x2e>
    2220:	55 95       	asr	r21
    2222:	47 95       	ror	r20
    2224:	8a 95       	dec	r24
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <GPIO_ReadPin+0x2a>
    2228:	ca 01       	movw	r24, r20
    222a:	81 70       	andi	r24, 0x01	; 1
}
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <GPIO_ReadPin_DIR>:

//read pin direction from DDRx.y
u8 GPIO_ReadPin_DIR(u8 PortName,u8 PinIndex){
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <GPIO_ReadPin_DIR+0x6>
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	6a 83       	std	Y+2, r22	; 0x02
return	((*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET))>>PinIndex)&0x01;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    224a:	88 2f       	mov	r24, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	fc 01       	movw	r30, r24
    2252:	80 81       	ld	r24, Z
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a9 01       	movw	r20, r18
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <GPIO_ReadPin_DIR+0x30>
    2262:	55 95       	asr	r21
    2264:	47 95       	ror	r20
    2266:	8a 95       	dec	r24
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <GPIO_ReadPin_DIR+0x2c>
    226a:	ca 01       	movw	r24, r20
    226c:	81 70       	andi	r24, 0x01	; 1
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <GPIO_WritePin>:

//set pin value when output mode high or low 
u8 GPIO_WritePin(u8 PortName,u8 PinIndex,u8 PinVal){
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <GPIO_WritePin+0x6>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <GPIO_WritePin+0x8>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <GPIO_WritePin+0xa>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	8a 83       	std	Y+2, r24	; 0x02
    2288:	6b 83       	std	Y+3, r22	; 0x03
    228a:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_State ;
	
	//(PinVal>8)?API_State=Error_Occurred:API_State=No_Error ;
	
	switch(PinVal){
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3e 83       	std	Y+6, r19	; 0x06
    2294:	2d 83       	std	Y+5, r18	; 0x05
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	19 f1       	breq	.+70     	; 0x22e4 <GPIO_WritePin+0x6c>
    229e:	2d 81       	ldd	r18, Y+5	; 0x05
    22a0:	3e 81       	ldd	r19, Y+6	; 0x06
    22a2:	21 30       	cpi	r18, 0x01	; 1
    22a4:	31 05       	cpc	r19, r1
    22a6:	e9 f5       	brne	.+122    	; 0x2322 <GPIO_WritePin+0xaa>
		case 1 :
			*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)|=(1<<PinIndex);
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    22ae:	28 2f       	mov	r18, r24
    22b0:	82 2f       	mov	r24, r18
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 96       	adiw	r24, 0x02	; 2
    22b6:	dc 01       	movw	r26, r24
    22b8:	82 2f       	mov	r24, r18
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	02 96       	adiw	r24, 0x02	; 2
    22be:	fc 01       	movw	r30, r24
    22c0:	80 81       	ld	r24, Z
    22c2:	48 2f       	mov	r20, r24
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	02 2e       	mov	r0, r18
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <GPIO_WritePin+0x5e>
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	0a 94       	dec	r0
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <GPIO_WritePin+0x5a>
    22da:	84 2b       	or	r24, r20
    22dc:	8c 93       	st	X, r24
			API_State=No_Error;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	20 c0       	rjmp	.+64     	; 0x2324 <GPIO_WritePin+0xac>
		break;
		case 0 : 
			*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)&=~(1<<PinIndex);
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    22ea:	28 2f       	mov	r18, r24
    22ec:	82 2f       	mov	r24, r18
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 96       	adiw	r24, 0x02	; 2
    22f2:	dc 01       	movw	r26, r24
    22f4:	82 2f       	mov	r24, r18
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	02 96       	adiw	r24, 0x02	; 2
    22fa:	fc 01       	movw	r30, r24
    22fc:	80 81       	ld	r24, Z
    22fe:	48 2f       	mov	r20, r24
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 2e       	mov	r0, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <GPIO_WritePin+0x9a>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	0a 94       	dec	r0
    2314:	e2 f7       	brpl	.-8      	; 0x230e <GPIO_WritePin+0x96>
    2316:	80 95       	com	r24
    2318:	84 23       	and	r24, r20
    231a:	8c 93       	st	X, r24
			API_State =No_Error ;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	01 c0       	rjmp	.+2      	; 0x2324 <GPIO_WritePin+0xac>
		break;
		default:
		API_State=Error_Occurred;
    2322:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_State ;
    2324:	89 81       	ldd	r24, Y+1	; 0x01
}
    2326:	26 96       	adiw	r28, 0x06	; 6
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <GPIO_WritePin_Dir>:

//set pin direction input or output 
u8 GPIO_WritePin_Dir(u8 PortName,u8 PinIndex,u8 PinVal){
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <GPIO_WritePin_Dir+0x6>
    233e:	00 d0       	rcall	.+0      	; 0x2340 <GPIO_WritePin_Dir+0x8>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <GPIO_WritePin_Dir+0xa>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	6b 83       	std	Y+3, r22	; 0x03
    234a:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_State ;
	
	//(PinVal>8)?API_State=Error_Occurred:API_State=No_Error ;
	
	switch(PinVal){
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	3e 83       	std	Y+6, r19	; 0x06
    2354:	2d 83       	std	Y+5, r18	; 0x05
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	19 f1       	breq	.+70     	; 0x23a4 <GPIO_WritePin_Dir+0x6c>
    235e:	2d 81       	ldd	r18, Y+5	; 0x05
    2360:	3e 81       	ldd	r19, Y+6	; 0x06
    2362:	21 30       	cpi	r18, 0x01	; 1
    2364:	31 05       	cpc	r19, r1
    2366:	e9 f5       	brne	.+122    	; 0x23e2 <GPIO_WritePin_Dir+0xaa>
		case 1 :
		*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET)|=(1<<PinIndex);
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    236e:	28 2f       	mov	r18, r24
    2370:	82 2f       	mov	r24, r18
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	dc 01       	movw	r26, r24
    2378:	82 2f       	mov	r24, r18
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	fc 01       	movw	r30, r24
    2380:	80 81       	ld	r24, Z
    2382:	48 2f       	mov	r20, r24
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	02 2e       	mov	r0, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <GPIO_WritePin_Dir+0x5e>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <GPIO_WritePin_Dir+0x5a>
    239a:	84 2b       	or	r24, r20
    239c:	8c 93       	st	X, r24
		API_State=No_Error;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	20 c0       	rjmp	.+64     	; 0x23e4 <GPIO_WritePin_Dir+0xac>
		break;
		case 0 :
		*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET)&=~(1<<PinIndex);
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	0e 94 56 10 	call	0x20ac	; 0x20ac <Get_Port_Addr>
    23aa:	28 2f       	mov	r18, r24
    23ac:	82 2f       	mov	r24, r18
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	dc 01       	movw	r26, r24
    23b4:	82 2f       	mov	r24, r18
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	fc 01       	movw	r30, r24
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <GPIO_WritePin_Dir+0x9a>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <GPIO_WritePin_Dir+0x96>
    23d6:	80 95       	com	r24
    23d8:	84 23       	and	r24, r20
    23da:	8c 93       	st	X, r24
		API_State =No_Error ;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <GPIO_WritePin_Dir+0xac>
		break;
		default:
		API_State=Error_Occurred;
    23e2:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_State ;
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	26 96       	adiw	r28, 0x06	; 6
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <main>:
#include "Lib/I2C/I2C.h"
#include <util/delay.h>


int main(void)
{
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	0f 92       	push	r0
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
	u8 ch_data = 0 ;
    2402:	19 82       	std	Y+1, r1	; 0x01
	MCAL_I2C_Init(&conf) ;
#endif


#ifdef I2C_Slave_Mode
	myDDRA = 0xFF ;
    2404:	ea e3       	ldi	r30, 0x3A	; 58
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	8f ef       	ldi	r24, 0xFF	; 255
    240a:	80 83       	st	Z, r24
	MCAL_I2C_SetAdd(0b11010000) ;
    240c:	80 ed       	ldi	r24, 0xD0	; 208
    240e:	0e 94 12 10 	call	0x2024	; 0x2024 <MCAL_I2C_SetAdd>
		MCAL_I2C_Wait(0x28) ;
		MCAL_I2C_Stop() ;
#endif

#ifdef I2C_Slave_Mode
		MCAL_I2C_Read(&ch_data) ;
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	0e 94 20 10 	call	0x2040	; 0x2040 <MCAL_I2C_Read>
		myPORTA = ch_data ;
    241a:	eb e3       	ldi	r30, 0x3B	; 59
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	f7 cf       	rjmp	.-18     	; 0x2412 <main+0x1a>

00002424 <__mulsi3>:
    2424:	62 9f       	mul	r22, r18
    2426:	d0 01       	movw	r26, r0
    2428:	73 9f       	mul	r23, r19
    242a:	f0 01       	movw	r30, r0
    242c:	82 9f       	mul	r24, r18
    242e:	e0 0d       	add	r30, r0
    2430:	f1 1d       	adc	r31, r1
    2432:	64 9f       	mul	r22, r20
    2434:	e0 0d       	add	r30, r0
    2436:	f1 1d       	adc	r31, r1
    2438:	92 9f       	mul	r25, r18
    243a:	f0 0d       	add	r31, r0
    243c:	83 9f       	mul	r24, r19
    243e:	f0 0d       	add	r31, r0
    2440:	74 9f       	mul	r23, r20
    2442:	f0 0d       	add	r31, r0
    2444:	65 9f       	mul	r22, r21
    2446:	f0 0d       	add	r31, r0
    2448:	99 27       	eor	r25, r25
    244a:	72 9f       	mul	r23, r18
    244c:	b0 0d       	add	r27, r0
    244e:	e1 1d       	adc	r30, r1
    2450:	f9 1f       	adc	r31, r25
    2452:	63 9f       	mul	r22, r19
    2454:	b0 0d       	add	r27, r0
    2456:	e1 1d       	adc	r30, r1
    2458:	f9 1f       	adc	r31, r25
    245a:	bd 01       	movw	r22, r26
    245c:	cf 01       	movw	r24, r30
    245e:	11 24       	eor	r1, r1
    2460:	08 95       	ret

00002462 <__udivmodsi4>:
    2462:	a1 e2       	ldi	r26, 0x21	; 33
    2464:	1a 2e       	mov	r1, r26
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	fd 01       	movw	r30, r26
    246c:	0d c0       	rjmp	.+26     	; 0x2488 <__udivmodsi4_ep>

0000246e <__udivmodsi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	ee 1f       	adc	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	a2 17       	cp	r26, r18
    2478:	b3 07       	cpc	r27, r19
    247a:	e4 07       	cpc	r30, r20
    247c:	f5 07       	cpc	r31, r21
    247e:	20 f0       	brcs	.+8      	; 0x2488 <__udivmodsi4_ep>
    2480:	a2 1b       	sub	r26, r18
    2482:	b3 0b       	sbc	r27, r19
    2484:	e4 0b       	sbc	r30, r20
    2486:	f5 0b       	sbc	r31, r21

00002488 <__udivmodsi4_ep>:
    2488:	66 1f       	adc	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	1a 94       	dec	r1
    2492:	69 f7       	brne	.-38     	; 0x246e <__udivmodsi4_loop>
    2494:	60 95       	com	r22
    2496:	70 95       	com	r23
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	bd 01       	movw	r22, r26
    24a2:	cf 01       	movw	r24, r30
    24a4:	08 95       	ret

000024a6 <__prologue_saves__>:
    24a6:	2f 92       	push	r2
    24a8:	3f 92       	push	r3
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	cf 92       	push	r12
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	ca 1b       	sub	r28, r26
    24d0:	db 0b       	sbc	r29, r27
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	09 94       	ijmp

000024de <__epilogue_restores__>:
    24de:	2a 88       	ldd	r2, Y+18	; 0x12
    24e0:	39 88       	ldd	r3, Y+17	; 0x11
    24e2:	48 88       	ldd	r4, Y+16	; 0x10
    24e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    24f0:	b9 84       	ldd	r11, Y+9	; 0x09
    24f2:	c8 84       	ldd	r12, Y+8	; 0x08
    24f4:	df 80       	ldd	r13, Y+7	; 0x07
    24f6:	ee 80       	ldd	r14, Y+6	; 0x06
    24f8:	fd 80       	ldd	r15, Y+5	; 0x05
    24fa:	0c 81       	ldd	r16, Y+4	; 0x04
    24fc:	1b 81       	ldd	r17, Y+3	; 0x03
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	b9 81       	ldd	r27, Y+1	; 0x01
    2502:	ce 0f       	add	r28, r30
    2504:	d1 1d       	adc	r29, r1
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	ed 01       	movw	r28, r26
    2512:	08 95       	ret

00002514 <sprintf>:
    2514:	ae e0       	ldi	r26, 0x0E	; 14
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e0 e9       	ldi	r30, 0x90	; 144
    251a:	f2 e1       	ldi	r31, 0x12	; 18
    251c:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__+0x1c>
    2520:	0d 89       	ldd	r16, Y+21	; 0x15
    2522:	1e 89       	ldd	r17, Y+22	; 0x16
    2524:	86 e0       	ldi	r24, 0x06	; 6
    2526:	8c 83       	std	Y+4, r24	; 0x04
    2528:	1a 83       	std	Y+2, r17	; 0x02
    252a:	09 83       	std	Y+1, r16	; 0x01
    252c:	8f ef       	ldi	r24, 0xFF	; 255
    252e:	9f e7       	ldi	r25, 0x7F	; 127
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	9e 01       	movw	r18, r28
    2536:	27 5e       	subi	r18, 0xE7	; 231
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	6f 89       	ldd	r22, Y+23	; 0x17
    2540:	78 8d       	ldd	r23, Y+24	; 0x18
    2542:	a9 01       	movw	r20, r18
    2544:	0e 94 ae 12 	call	0x255c	; 0x255c <vfprintf>
    2548:	2f 81       	ldd	r18, Y+7	; 0x07
    254a:	38 85       	ldd	r19, Y+8	; 0x08
    254c:	02 0f       	add	r16, r18
    254e:	13 1f       	adc	r17, r19
    2550:	f8 01       	movw	r30, r16
    2552:	10 82       	st	Z, r1
    2554:	2e 96       	adiw	r28, 0x0e	; 14
    2556:	e4 e0       	ldi	r30, 0x04	; 4
    2558:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__+0x1c>

0000255c <vfprintf>:
    255c:	ab e0       	ldi	r26, 0x0B	; 11
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e4 eb       	ldi	r30, 0xB4	; 180
    2562:	f2 e1       	ldi	r31, 0x12	; 18
    2564:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
    2568:	3c 01       	movw	r6, r24
    256a:	2b 01       	movw	r4, r22
    256c:	5a 01       	movw	r10, r20
    256e:	fc 01       	movw	r30, r24
    2570:	17 82       	std	Z+7, r1	; 0x07
    2572:	16 82       	std	Z+6, r1	; 0x06
    2574:	83 81       	ldd	r24, Z+3	; 0x03
    2576:	81 fd       	sbrc	r24, 1
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <vfprintf+0x24>
    257a:	6f ef       	ldi	r22, 0xFF	; 255
    257c:	7f ef       	ldi	r23, 0xFF	; 255
    257e:	c6 c1       	rjmp	.+908    	; 0x290c <vfprintf+0x3b0>
    2580:	9a e0       	ldi	r25, 0x0A	; 10
    2582:	89 2e       	mov	r8, r25
    2584:	1e 01       	movw	r2, r28
    2586:	08 94       	sec
    2588:	21 1c       	adc	r2, r1
    258a:	31 1c       	adc	r3, r1
    258c:	f3 01       	movw	r30, r6
    258e:	23 81       	ldd	r18, Z+3	; 0x03
    2590:	f2 01       	movw	r30, r4
    2592:	23 fd       	sbrc	r18, 3
    2594:	85 91       	lpm	r24, Z+
    2596:	23 ff       	sbrs	r18, 3
    2598:	81 91       	ld	r24, Z+
    259a:	2f 01       	movw	r4, r30
    259c:	88 23       	and	r24, r24
    259e:	09 f4       	brne	.+2      	; 0x25a2 <vfprintf+0x46>
    25a0:	b2 c1       	rjmp	.+868    	; 0x2906 <vfprintf+0x3aa>
    25a2:	85 32       	cpi	r24, 0x25	; 37
    25a4:	39 f4       	brne	.+14     	; 0x25b4 <vfprintf+0x58>
    25a6:	23 fd       	sbrc	r18, 3
    25a8:	85 91       	lpm	r24, Z+
    25aa:	23 ff       	sbrs	r18, 3
    25ac:	81 91       	ld	r24, Z+
    25ae:	2f 01       	movw	r4, r30
    25b0:	85 32       	cpi	r24, 0x25	; 37
    25b2:	29 f4       	brne	.+10     	; 0x25be <vfprintf+0x62>
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	b3 01       	movw	r22, r6
    25b8:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    25bc:	e7 cf       	rjmp	.-50     	; 0x258c <vfprintf+0x30>
    25be:	98 2f       	mov	r25, r24
    25c0:	ff 24       	eor	r15, r15
    25c2:	ee 24       	eor	r14, r14
    25c4:	99 24       	eor	r9, r9
    25c6:	ff e1       	ldi	r31, 0x1F	; 31
    25c8:	ff 15       	cp	r31, r15
    25ca:	d0 f0       	brcs	.+52     	; 0x2600 <vfprintf+0xa4>
    25cc:	9b 32       	cpi	r25, 0x2B	; 43
    25ce:	69 f0       	breq	.+26     	; 0x25ea <vfprintf+0x8e>
    25d0:	9c 32       	cpi	r25, 0x2C	; 44
    25d2:	28 f4       	brcc	.+10     	; 0x25de <vfprintf+0x82>
    25d4:	90 32       	cpi	r25, 0x20	; 32
    25d6:	59 f0       	breq	.+22     	; 0x25ee <vfprintf+0x92>
    25d8:	93 32       	cpi	r25, 0x23	; 35
    25da:	91 f4       	brne	.+36     	; 0x2600 <vfprintf+0xa4>
    25dc:	0e c0       	rjmp	.+28     	; 0x25fa <vfprintf+0x9e>
    25de:	9d 32       	cpi	r25, 0x2D	; 45
    25e0:	49 f0       	breq	.+18     	; 0x25f4 <vfprintf+0x98>
    25e2:	90 33       	cpi	r25, 0x30	; 48
    25e4:	69 f4       	brne	.+26     	; 0x2600 <vfprintf+0xa4>
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	24 c0       	rjmp	.+72     	; 0x2632 <vfprintf+0xd6>
    25ea:	52 e0       	ldi	r21, 0x02	; 2
    25ec:	f5 2a       	or	r15, r21
    25ee:	84 e0       	ldi	r24, 0x04	; 4
    25f0:	f8 2a       	or	r15, r24
    25f2:	28 c0       	rjmp	.+80     	; 0x2644 <vfprintf+0xe8>
    25f4:	98 e0       	ldi	r25, 0x08	; 8
    25f6:	f9 2a       	or	r15, r25
    25f8:	25 c0       	rjmp	.+74     	; 0x2644 <vfprintf+0xe8>
    25fa:	e0 e1       	ldi	r30, 0x10	; 16
    25fc:	fe 2a       	or	r15, r30
    25fe:	22 c0       	rjmp	.+68     	; 0x2644 <vfprintf+0xe8>
    2600:	f7 fc       	sbrc	r15, 7
    2602:	29 c0       	rjmp	.+82     	; 0x2656 <vfprintf+0xfa>
    2604:	89 2f       	mov	r24, r25
    2606:	80 53       	subi	r24, 0x30	; 48
    2608:	8a 30       	cpi	r24, 0x0A	; 10
    260a:	70 f4       	brcc	.+28     	; 0x2628 <vfprintf+0xcc>
    260c:	f6 fe       	sbrs	r15, 6
    260e:	05 c0       	rjmp	.+10     	; 0x261a <vfprintf+0xbe>
    2610:	98 9c       	mul	r9, r8
    2612:	90 2c       	mov	r9, r0
    2614:	11 24       	eor	r1, r1
    2616:	98 0e       	add	r9, r24
    2618:	15 c0       	rjmp	.+42     	; 0x2644 <vfprintf+0xe8>
    261a:	e8 9c       	mul	r14, r8
    261c:	e0 2c       	mov	r14, r0
    261e:	11 24       	eor	r1, r1
    2620:	e8 0e       	add	r14, r24
    2622:	f0 e2       	ldi	r31, 0x20	; 32
    2624:	ff 2a       	or	r15, r31
    2626:	0e c0       	rjmp	.+28     	; 0x2644 <vfprintf+0xe8>
    2628:	9e 32       	cpi	r25, 0x2E	; 46
    262a:	29 f4       	brne	.+10     	; 0x2636 <vfprintf+0xda>
    262c:	f6 fc       	sbrc	r15, 6
    262e:	6b c1       	rjmp	.+726    	; 0x2906 <vfprintf+0x3aa>
    2630:	40 e4       	ldi	r20, 0x40	; 64
    2632:	f4 2a       	or	r15, r20
    2634:	07 c0       	rjmp	.+14     	; 0x2644 <vfprintf+0xe8>
    2636:	9c 36       	cpi	r25, 0x6C	; 108
    2638:	19 f4       	brne	.+6      	; 0x2640 <vfprintf+0xe4>
    263a:	50 e8       	ldi	r21, 0x80	; 128
    263c:	f5 2a       	or	r15, r21
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <vfprintf+0xe8>
    2640:	98 36       	cpi	r25, 0x68	; 104
    2642:	49 f4       	brne	.+18     	; 0x2656 <vfprintf+0xfa>
    2644:	f2 01       	movw	r30, r4
    2646:	23 fd       	sbrc	r18, 3
    2648:	95 91       	lpm	r25, Z+
    264a:	23 ff       	sbrs	r18, 3
    264c:	91 91       	ld	r25, Z+
    264e:	2f 01       	movw	r4, r30
    2650:	99 23       	and	r25, r25
    2652:	09 f0       	breq	.+2      	; 0x2656 <vfprintf+0xfa>
    2654:	b8 cf       	rjmp	.-144    	; 0x25c6 <vfprintf+0x6a>
    2656:	89 2f       	mov	r24, r25
    2658:	85 54       	subi	r24, 0x45	; 69
    265a:	83 30       	cpi	r24, 0x03	; 3
    265c:	18 f0       	brcs	.+6      	; 0x2664 <vfprintf+0x108>
    265e:	80 52       	subi	r24, 0x20	; 32
    2660:	83 30       	cpi	r24, 0x03	; 3
    2662:	38 f4       	brcc	.+14     	; 0x2672 <vfprintf+0x116>
    2664:	44 e0       	ldi	r20, 0x04	; 4
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	a4 0e       	add	r10, r20
    266a:	b5 1e       	adc	r11, r21
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	59 83       	std	Y+1, r21	; 0x01
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <vfprintf+0x134>
    2672:	93 36       	cpi	r25, 0x63	; 99
    2674:	31 f0       	breq	.+12     	; 0x2682 <vfprintf+0x126>
    2676:	93 37       	cpi	r25, 0x73	; 115
    2678:	79 f0       	breq	.+30     	; 0x2698 <vfprintf+0x13c>
    267a:	93 35       	cpi	r25, 0x53	; 83
    267c:	09 f0       	breq	.+2      	; 0x2680 <vfprintf+0x124>
    267e:	56 c0       	rjmp	.+172    	; 0x272c <vfprintf+0x1d0>
    2680:	20 c0       	rjmp	.+64     	; 0x26c2 <vfprintf+0x166>
    2682:	f5 01       	movw	r30, r10
    2684:	80 81       	ld	r24, Z
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	42 e0       	ldi	r20, 0x02	; 2
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	a4 0e       	add	r10, r20
    268e:	b5 1e       	adc	r11, r21
    2690:	61 01       	movw	r12, r2
    2692:	01 e0       	ldi	r16, 0x01	; 1
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	12 c0       	rjmp	.+36     	; 0x26bc <vfprintf+0x160>
    2698:	f5 01       	movw	r30, r10
    269a:	c0 80       	ld	r12, Z
    269c:	d1 80       	ldd	r13, Z+1	; 0x01
    269e:	f6 fc       	sbrc	r15, 6
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <vfprintf+0x14c>
    26a2:	6f ef       	ldi	r22, 0xFF	; 255
    26a4:	7f ef       	ldi	r23, 0xFF	; 255
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <vfprintf+0x150>
    26a8:	69 2d       	mov	r22, r9
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	42 e0       	ldi	r20, 0x02	; 2
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	a4 0e       	add	r10, r20
    26b2:	b5 1e       	adc	r11, r21
    26b4:	c6 01       	movw	r24, r12
    26b6:	0e 94 96 14 	call	0x292c	; 0x292c <strnlen>
    26ba:	8c 01       	movw	r16, r24
    26bc:	5f e7       	ldi	r21, 0x7F	; 127
    26be:	f5 22       	and	r15, r21
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <vfprintf+0x18e>
    26c2:	f5 01       	movw	r30, r10
    26c4:	c0 80       	ld	r12, Z
    26c6:	d1 80       	ldd	r13, Z+1	; 0x01
    26c8:	f6 fc       	sbrc	r15, 6
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <vfprintf+0x176>
    26cc:	6f ef       	ldi	r22, 0xFF	; 255
    26ce:	7f ef       	ldi	r23, 0xFF	; 255
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <vfprintf+0x17a>
    26d2:	69 2d       	mov	r22, r9
    26d4:	70 e0       	ldi	r23, 0x00	; 0
    26d6:	42 e0       	ldi	r20, 0x02	; 2
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	a4 0e       	add	r10, r20
    26dc:	b5 1e       	adc	r11, r21
    26de:	c6 01       	movw	r24, r12
    26e0:	0e 94 8b 14 	call	0x2916	; 0x2916 <strnlen_P>
    26e4:	8c 01       	movw	r16, r24
    26e6:	50 e8       	ldi	r21, 0x80	; 128
    26e8:	f5 2a       	or	r15, r21
    26ea:	f3 fe       	sbrs	r15, 3
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <vfprintf+0x1a0>
    26ee:	1a c0       	rjmp	.+52     	; 0x2724 <vfprintf+0x1c8>
    26f0:	80 e2       	ldi	r24, 0x20	; 32
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	b3 01       	movw	r22, r6
    26f6:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    26fa:	ea 94       	dec	r14
    26fc:	8e 2d       	mov	r24, r14
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	08 17       	cp	r16, r24
    2702:	19 07       	cpc	r17, r25
    2704:	a8 f3       	brcs	.-22     	; 0x26f0 <vfprintf+0x194>
    2706:	0e c0       	rjmp	.+28     	; 0x2724 <vfprintf+0x1c8>
    2708:	f6 01       	movw	r30, r12
    270a:	f7 fc       	sbrc	r15, 7
    270c:	85 91       	lpm	r24, Z+
    270e:	f7 fe       	sbrs	r15, 7
    2710:	81 91       	ld	r24, Z+
    2712:	6f 01       	movw	r12, r30
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	b3 01       	movw	r22, r6
    2718:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    271c:	e1 10       	cpse	r14, r1
    271e:	ea 94       	dec	r14
    2720:	01 50       	subi	r16, 0x01	; 1
    2722:	10 40       	sbci	r17, 0x00	; 0
    2724:	01 15       	cp	r16, r1
    2726:	11 05       	cpc	r17, r1
    2728:	79 f7       	brne	.-34     	; 0x2708 <vfprintf+0x1ac>
    272a:	ea c0       	rjmp	.+468    	; 0x2900 <vfprintf+0x3a4>
    272c:	94 36       	cpi	r25, 0x64	; 100
    272e:	11 f0       	breq	.+4      	; 0x2734 <vfprintf+0x1d8>
    2730:	99 36       	cpi	r25, 0x69	; 105
    2732:	69 f5       	brne	.+90     	; 0x278e <vfprintf+0x232>
    2734:	f7 fe       	sbrs	r15, 7
    2736:	08 c0       	rjmp	.+16     	; 0x2748 <vfprintf+0x1ec>
    2738:	f5 01       	movw	r30, r10
    273a:	20 81       	ld	r18, Z
    273c:	31 81       	ldd	r19, Z+1	; 0x01
    273e:	42 81       	ldd	r20, Z+2	; 0x02
    2740:	53 81       	ldd	r21, Z+3	; 0x03
    2742:	84 e0       	ldi	r24, 0x04	; 4
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0a c0       	rjmp	.+20     	; 0x275c <vfprintf+0x200>
    2748:	f5 01       	movw	r30, r10
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	9c 01       	movw	r18, r24
    2750:	44 27       	eor	r20, r20
    2752:	37 fd       	sbrc	r19, 7
    2754:	40 95       	com	r20
    2756:	54 2f       	mov	r21, r20
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	a8 0e       	add	r10, r24
    275e:	b9 1e       	adc	r11, r25
    2760:	9f e6       	ldi	r25, 0x6F	; 111
    2762:	f9 22       	and	r15, r25
    2764:	57 ff       	sbrs	r21, 7
    2766:	09 c0       	rjmp	.+18     	; 0x277a <vfprintf+0x21e>
    2768:	50 95       	com	r21
    276a:	40 95       	com	r20
    276c:	30 95       	com	r19
    276e:	21 95       	neg	r18
    2770:	3f 4f       	sbci	r19, 0xFF	; 255
    2772:	4f 4f       	sbci	r20, 0xFF	; 255
    2774:	5f 4f       	sbci	r21, 0xFF	; 255
    2776:	e0 e8       	ldi	r30, 0x80	; 128
    2778:	fe 2a       	or	r15, r30
    277a:	ca 01       	movw	r24, r20
    277c:	b9 01       	movw	r22, r18
    277e:	a1 01       	movw	r20, r2
    2780:	2a e0       	ldi	r18, 0x0A	; 10
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	0e 94 cd 14 	call	0x299a	; 0x299a <__ultoa_invert>
    2788:	d8 2e       	mov	r13, r24
    278a:	d2 18       	sub	r13, r2
    278c:	40 c0       	rjmp	.+128    	; 0x280e <vfprintf+0x2b2>
    278e:	95 37       	cpi	r25, 0x75	; 117
    2790:	29 f4       	brne	.+10     	; 0x279c <vfprintf+0x240>
    2792:	1f 2d       	mov	r17, r15
    2794:	1f 7e       	andi	r17, 0xEF	; 239
    2796:	2a e0       	ldi	r18, 0x0A	; 10
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	1d c0       	rjmp	.+58     	; 0x27d6 <vfprintf+0x27a>
    279c:	1f 2d       	mov	r17, r15
    279e:	19 7f       	andi	r17, 0xF9	; 249
    27a0:	9f 36       	cpi	r25, 0x6F	; 111
    27a2:	61 f0       	breq	.+24     	; 0x27bc <vfprintf+0x260>
    27a4:	90 37       	cpi	r25, 0x70	; 112
    27a6:	20 f4       	brcc	.+8      	; 0x27b0 <vfprintf+0x254>
    27a8:	98 35       	cpi	r25, 0x58	; 88
    27aa:	09 f0       	breq	.+2      	; 0x27ae <vfprintf+0x252>
    27ac:	ac c0       	rjmp	.+344    	; 0x2906 <vfprintf+0x3aa>
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <vfprintf+0x272>
    27b0:	90 37       	cpi	r25, 0x70	; 112
    27b2:	39 f0       	breq	.+14     	; 0x27c2 <vfprintf+0x266>
    27b4:	98 37       	cpi	r25, 0x78	; 120
    27b6:	09 f0       	breq	.+2      	; 0x27ba <vfprintf+0x25e>
    27b8:	a6 c0       	rjmp	.+332    	; 0x2906 <vfprintf+0x3aa>
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <vfprintf+0x268>
    27bc:	28 e0       	ldi	r18, 0x08	; 8
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	0a c0       	rjmp	.+20     	; 0x27d6 <vfprintf+0x27a>
    27c2:	10 61       	ori	r17, 0x10	; 16
    27c4:	14 fd       	sbrc	r17, 4
    27c6:	14 60       	ori	r17, 0x04	; 4
    27c8:	20 e1       	ldi	r18, 0x10	; 16
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	04 c0       	rjmp	.+8      	; 0x27d6 <vfprintf+0x27a>
    27ce:	14 fd       	sbrc	r17, 4
    27d0:	16 60       	ori	r17, 0x06	; 6
    27d2:	20 e1       	ldi	r18, 0x10	; 16
    27d4:	32 e0       	ldi	r19, 0x02	; 2
    27d6:	17 ff       	sbrs	r17, 7
    27d8:	08 c0       	rjmp	.+16     	; 0x27ea <vfprintf+0x28e>
    27da:	f5 01       	movw	r30, r10
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	44 e0       	ldi	r20, 0x04	; 4
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	08 c0       	rjmp	.+16     	; 0x27fa <vfprintf+0x29e>
    27ea:	f5 01       	movw	r30, r10
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	bc 01       	movw	r22, r24
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	42 e0       	ldi	r20, 0x02	; 2
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	a4 0e       	add	r10, r20
    27fc:	b5 1e       	adc	r11, r21
    27fe:	a1 01       	movw	r20, r2
    2800:	0e 94 cd 14 	call	0x299a	; 0x299a <__ultoa_invert>
    2804:	d8 2e       	mov	r13, r24
    2806:	d2 18       	sub	r13, r2
    2808:	8f e7       	ldi	r24, 0x7F	; 127
    280a:	f8 2e       	mov	r15, r24
    280c:	f1 22       	and	r15, r17
    280e:	f6 fe       	sbrs	r15, 6
    2810:	0b c0       	rjmp	.+22     	; 0x2828 <vfprintf+0x2cc>
    2812:	5e ef       	ldi	r21, 0xFE	; 254
    2814:	f5 22       	and	r15, r21
    2816:	d9 14       	cp	r13, r9
    2818:	38 f4       	brcc	.+14     	; 0x2828 <vfprintf+0x2cc>
    281a:	f4 fe       	sbrs	r15, 4
    281c:	07 c0       	rjmp	.+14     	; 0x282c <vfprintf+0x2d0>
    281e:	f2 fc       	sbrc	r15, 2
    2820:	05 c0       	rjmp	.+10     	; 0x282c <vfprintf+0x2d0>
    2822:	8f ee       	ldi	r24, 0xEF	; 239
    2824:	f8 22       	and	r15, r24
    2826:	02 c0       	rjmp	.+4      	; 0x282c <vfprintf+0x2d0>
    2828:	1d 2d       	mov	r17, r13
    282a:	01 c0       	rjmp	.+2      	; 0x282e <vfprintf+0x2d2>
    282c:	19 2d       	mov	r17, r9
    282e:	f4 fe       	sbrs	r15, 4
    2830:	0d c0       	rjmp	.+26     	; 0x284c <vfprintf+0x2f0>
    2832:	fe 01       	movw	r30, r28
    2834:	ed 0d       	add	r30, r13
    2836:	f1 1d       	adc	r31, r1
    2838:	80 81       	ld	r24, Z
    283a:	80 33       	cpi	r24, 0x30	; 48
    283c:	19 f4       	brne	.+6      	; 0x2844 <vfprintf+0x2e8>
    283e:	99 ee       	ldi	r25, 0xE9	; 233
    2840:	f9 22       	and	r15, r25
    2842:	08 c0       	rjmp	.+16     	; 0x2854 <vfprintf+0x2f8>
    2844:	1f 5f       	subi	r17, 0xFF	; 255
    2846:	f2 fe       	sbrs	r15, 2
    2848:	05 c0       	rjmp	.+10     	; 0x2854 <vfprintf+0x2f8>
    284a:	03 c0       	rjmp	.+6      	; 0x2852 <vfprintf+0x2f6>
    284c:	8f 2d       	mov	r24, r15
    284e:	86 78       	andi	r24, 0x86	; 134
    2850:	09 f0       	breq	.+2      	; 0x2854 <vfprintf+0x2f8>
    2852:	1f 5f       	subi	r17, 0xFF	; 255
    2854:	0f 2d       	mov	r16, r15
    2856:	f3 fc       	sbrc	r15, 3
    2858:	14 c0       	rjmp	.+40     	; 0x2882 <vfprintf+0x326>
    285a:	f0 fe       	sbrs	r15, 0
    285c:	0f c0       	rjmp	.+30     	; 0x287c <vfprintf+0x320>
    285e:	1e 15       	cp	r17, r14
    2860:	10 f0       	brcs	.+4      	; 0x2866 <vfprintf+0x30a>
    2862:	9d 2c       	mov	r9, r13
    2864:	0b c0       	rjmp	.+22     	; 0x287c <vfprintf+0x320>
    2866:	9d 2c       	mov	r9, r13
    2868:	9e 0c       	add	r9, r14
    286a:	91 1a       	sub	r9, r17
    286c:	1e 2d       	mov	r17, r14
    286e:	06 c0       	rjmp	.+12     	; 0x287c <vfprintf+0x320>
    2870:	80 e2       	ldi	r24, 0x20	; 32
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	b3 01       	movw	r22, r6
    2876:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    287a:	1f 5f       	subi	r17, 0xFF	; 255
    287c:	1e 15       	cp	r17, r14
    287e:	c0 f3       	brcs	.-16     	; 0x2870 <vfprintf+0x314>
    2880:	04 c0       	rjmp	.+8      	; 0x288a <vfprintf+0x32e>
    2882:	1e 15       	cp	r17, r14
    2884:	10 f4       	brcc	.+4      	; 0x288a <vfprintf+0x32e>
    2886:	e1 1a       	sub	r14, r17
    2888:	01 c0       	rjmp	.+2      	; 0x288c <vfprintf+0x330>
    288a:	ee 24       	eor	r14, r14
    288c:	04 ff       	sbrs	r16, 4
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <vfprintf+0x352>
    2890:	80 e3       	ldi	r24, 0x30	; 48
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	b3 01       	movw	r22, r6
    2896:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    289a:	02 ff       	sbrs	r16, 2
    289c:	1d c0       	rjmp	.+58     	; 0x28d8 <vfprintf+0x37c>
    289e:	01 fd       	sbrc	r16, 1
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <vfprintf+0x34c>
    28a2:	88 e7       	ldi	r24, 0x78	; 120
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e c0       	rjmp	.+28     	; 0x28c4 <vfprintf+0x368>
    28a8:	88 e5       	ldi	r24, 0x58	; 88
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0b c0       	rjmp	.+22     	; 0x28c4 <vfprintf+0x368>
    28ae:	80 2f       	mov	r24, r16
    28b0:	86 78       	andi	r24, 0x86	; 134
    28b2:	91 f0       	breq	.+36     	; 0x28d8 <vfprintf+0x37c>
    28b4:	01 ff       	sbrs	r16, 1
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <vfprintf+0x360>
    28b8:	8b e2       	ldi	r24, 0x2B	; 43
    28ba:	01 c0       	rjmp	.+2      	; 0x28be <vfprintf+0x362>
    28bc:	80 e2       	ldi	r24, 0x20	; 32
    28be:	f7 fc       	sbrc	r15, 7
    28c0:	8d e2       	ldi	r24, 0x2D	; 45
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	b3 01       	movw	r22, r6
    28c6:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28ca:	06 c0       	rjmp	.+12     	; 0x28d8 <vfprintf+0x37c>
    28cc:	80 e3       	ldi	r24, 0x30	; 48
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	b3 01       	movw	r22, r6
    28d2:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28d6:	9a 94       	dec	r9
    28d8:	d9 14       	cp	r13, r9
    28da:	c0 f3       	brcs	.-16     	; 0x28cc <vfprintf+0x370>
    28dc:	da 94       	dec	r13
    28de:	f1 01       	movw	r30, r2
    28e0:	ed 0d       	add	r30, r13
    28e2:	f1 1d       	adc	r31, r1
    28e4:	80 81       	ld	r24, Z
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	b3 01       	movw	r22, r6
    28ea:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28ee:	dd 20       	and	r13, r13
    28f0:	a9 f7       	brne	.-22     	; 0x28dc <vfprintf+0x380>
    28f2:	06 c0       	rjmp	.+12     	; 0x2900 <vfprintf+0x3a4>
    28f4:	80 e2       	ldi	r24, 0x20	; 32
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	b3 01       	movw	r22, r6
    28fa:	0e 94 a1 14 	call	0x2942	; 0x2942 <fputc>
    28fe:	ea 94       	dec	r14
    2900:	ee 20       	and	r14, r14
    2902:	c1 f7       	brne	.-16     	; 0x28f4 <vfprintf+0x398>
    2904:	43 ce       	rjmp	.-890    	; 0x258c <vfprintf+0x30>
    2906:	f3 01       	movw	r30, r6
    2908:	66 81       	ldd	r22, Z+6	; 0x06
    290a:	77 81       	ldd	r23, Z+7	; 0x07
    290c:	cb 01       	movw	r24, r22
    290e:	2b 96       	adiw	r28, 0x0b	; 11
    2910:	e2 e1       	ldi	r30, 0x12	; 18
    2912:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

00002916 <strnlen_P>:
    2916:	fc 01       	movw	r30, r24
    2918:	05 90       	lpm	r0, Z+
    291a:	61 50       	subi	r22, 0x01	; 1
    291c:	70 40       	sbci	r23, 0x00	; 0
    291e:	01 10       	cpse	r0, r1
    2920:	d8 f7       	brcc	.-10     	; 0x2918 <strnlen_P+0x2>
    2922:	80 95       	com	r24
    2924:	90 95       	com	r25
    2926:	8e 0f       	add	r24, r30
    2928:	9f 1f       	adc	r25, r31
    292a:	08 95       	ret

0000292c <strnlen>:
    292c:	fc 01       	movw	r30, r24
    292e:	61 50       	subi	r22, 0x01	; 1
    2930:	70 40       	sbci	r23, 0x00	; 0
    2932:	01 90       	ld	r0, Z+
    2934:	01 10       	cpse	r0, r1
    2936:	d8 f7       	brcc	.-10     	; 0x292e <strnlen+0x2>
    2938:	80 95       	com	r24
    293a:	90 95       	com	r25
    293c:	8e 0f       	add	r24, r30
    293e:	9f 1f       	adc	r25, r31
    2940:	08 95       	ret

00002942 <fputc>:
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	8c 01       	movw	r16, r24
    294c:	eb 01       	movw	r28, r22
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	81 ff       	sbrs	r24, 1
    2952:	1b c0       	rjmp	.+54     	; 0x298a <fputc+0x48>
    2954:	82 ff       	sbrs	r24, 2
    2956:	0d c0       	rjmp	.+26     	; 0x2972 <fputc+0x30>
    2958:	2e 81       	ldd	r18, Y+6	; 0x06
    295a:	3f 81       	ldd	r19, Y+7	; 0x07
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	9d 81       	ldd	r25, Y+5	; 0x05
    2960:	28 17       	cp	r18, r24
    2962:	39 07       	cpc	r19, r25
    2964:	64 f4       	brge	.+24     	; 0x297e <fputc+0x3c>
    2966:	e8 81       	ld	r30, Y
    2968:	f9 81       	ldd	r31, Y+1	; 0x01
    296a:	01 93       	st	Z+, r16
    296c:	f9 83       	std	Y+1, r31	; 0x01
    296e:	e8 83       	st	Y, r30
    2970:	06 c0       	rjmp	.+12     	; 0x297e <fputc+0x3c>
    2972:	e8 85       	ldd	r30, Y+8	; 0x08
    2974:	f9 85       	ldd	r31, Y+9	; 0x09
    2976:	80 2f       	mov	r24, r16
    2978:	09 95       	icall
    297a:	89 2b       	or	r24, r25
    297c:	31 f4       	brne	.+12     	; 0x298a <fputc+0x48>
    297e:	8e 81       	ldd	r24, Y+6	; 0x06
    2980:	9f 81       	ldd	r25, Y+7	; 0x07
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	9f 83       	std	Y+7, r25	; 0x07
    2986:	8e 83       	std	Y+6, r24	; 0x06
    2988:	02 c0       	rjmp	.+4      	; 0x298e <fputc+0x4c>
    298a:	0f ef       	ldi	r16, 0xFF	; 255
    298c:	1f ef       	ldi	r17, 0xFF	; 255
    298e:	c8 01       	movw	r24, r16
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <__ultoa_invert>:
    299a:	fa 01       	movw	r30, r20
    299c:	aa 27       	eor	r26, r26
    299e:	28 30       	cpi	r18, 0x08	; 8
    29a0:	51 f1       	breq	.+84     	; 0x29f6 <__ultoa_invert+0x5c>
    29a2:	20 31       	cpi	r18, 0x10	; 16
    29a4:	81 f1       	breq	.+96     	; 0x2a06 <__ultoa_invert+0x6c>
    29a6:	e8 94       	clt
    29a8:	6f 93       	push	r22
    29aa:	6e 7f       	andi	r22, 0xFE	; 254
    29ac:	6e 5f       	subi	r22, 0xFE	; 254
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	8f 4f       	sbci	r24, 0xFF	; 255
    29b2:	9f 4f       	sbci	r25, 0xFF	; 255
    29b4:	af 4f       	sbci	r26, 0xFF	; 255
    29b6:	b1 e0       	ldi	r27, 0x01	; 1
    29b8:	3e d0       	rcall	.+124    	; 0x2a36 <__ultoa_invert+0x9c>
    29ba:	b4 e0       	ldi	r27, 0x04	; 4
    29bc:	3c d0       	rcall	.+120    	; 0x2a36 <__ultoa_invert+0x9c>
    29be:	67 0f       	add	r22, r23
    29c0:	78 1f       	adc	r23, r24
    29c2:	89 1f       	adc	r24, r25
    29c4:	9a 1f       	adc	r25, r26
    29c6:	a1 1d       	adc	r26, r1
    29c8:	68 0f       	add	r22, r24
    29ca:	79 1f       	adc	r23, r25
    29cc:	8a 1f       	adc	r24, r26
    29ce:	91 1d       	adc	r25, r1
    29d0:	a1 1d       	adc	r26, r1
    29d2:	6a 0f       	add	r22, r26
    29d4:	71 1d       	adc	r23, r1
    29d6:	81 1d       	adc	r24, r1
    29d8:	91 1d       	adc	r25, r1
    29da:	a1 1d       	adc	r26, r1
    29dc:	20 d0       	rcall	.+64     	; 0x2a1e <__ultoa_invert+0x84>
    29de:	09 f4       	brne	.+2      	; 0x29e2 <__ultoa_invert+0x48>
    29e0:	68 94       	set
    29e2:	3f 91       	pop	r19
    29e4:	2a e0       	ldi	r18, 0x0A	; 10
    29e6:	26 9f       	mul	r18, r22
    29e8:	11 24       	eor	r1, r1
    29ea:	30 19       	sub	r19, r0
    29ec:	30 5d       	subi	r19, 0xD0	; 208
    29ee:	31 93       	st	Z+, r19
    29f0:	de f6       	brtc	.-74     	; 0x29a8 <__ultoa_invert+0xe>
    29f2:	cf 01       	movw	r24, r30
    29f4:	08 95       	ret
    29f6:	46 2f       	mov	r20, r22
    29f8:	47 70       	andi	r20, 0x07	; 7
    29fa:	40 5d       	subi	r20, 0xD0	; 208
    29fc:	41 93       	st	Z+, r20
    29fe:	b3 e0       	ldi	r27, 0x03	; 3
    2a00:	0f d0       	rcall	.+30     	; 0x2a20 <__ultoa_invert+0x86>
    2a02:	c9 f7       	brne	.-14     	; 0x29f6 <__ultoa_invert+0x5c>
    2a04:	f6 cf       	rjmp	.-20     	; 0x29f2 <__ultoa_invert+0x58>
    2a06:	46 2f       	mov	r20, r22
    2a08:	4f 70       	andi	r20, 0x0F	; 15
    2a0a:	40 5d       	subi	r20, 0xD0	; 208
    2a0c:	4a 33       	cpi	r20, 0x3A	; 58
    2a0e:	18 f0       	brcs	.+6      	; 0x2a16 <__ultoa_invert+0x7c>
    2a10:	49 5d       	subi	r20, 0xD9	; 217
    2a12:	31 fd       	sbrc	r19, 1
    2a14:	40 52       	subi	r20, 0x20	; 32
    2a16:	41 93       	st	Z+, r20
    2a18:	02 d0       	rcall	.+4      	; 0x2a1e <__ultoa_invert+0x84>
    2a1a:	a9 f7       	brne	.-22     	; 0x2a06 <__ultoa_invert+0x6c>
    2a1c:	ea cf       	rjmp	.-44     	; 0x29f2 <__ultoa_invert+0x58>
    2a1e:	b4 e0       	ldi	r27, 0x04	; 4
    2a20:	a6 95       	lsr	r26
    2a22:	97 95       	ror	r25
    2a24:	87 95       	ror	r24
    2a26:	77 95       	ror	r23
    2a28:	67 95       	ror	r22
    2a2a:	ba 95       	dec	r27
    2a2c:	c9 f7       	brne	.-14     	; 0x2a20 <__ultoa_invert+0x86>
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	61 05       	cpc	r22, r1
    2a32:	71 05       	cpc	r23, r1
    2a34:	08 95       	ret
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	0a 2e       	mov	r0, r26
    2a3c:	06 94       	lsr	r0
    2a3e:	57 95       	ror	r21
    2a40:	47 95       	ror	r20
    2a42:	37 95       	ror	r19
    2a44:	27 95       	ror	r18
    2a46:	ba 95       	dec	r27
    2a48:	c9 f7       	brne	.-14     	; 0x2a3c <__ultoa_invert+0xa2>
    2a4a:	62 0f       	add	r22, r18
    2a4c:	73 1f       	adc	r23, r19
    2a4e:	84 1f       	adc	r24, r20
    2a50:	95 1f       	adc	r25, r21
    2a52:	a0 1d       	adc	r26, r0
    2a54:	08 95       	ret

00002a56 <_exit>:
    2a56:	f8 94       	cli

00002a58 <__stop_program>:
    2a58:	ff cf       	rjmp	.-2      	; 0x2a58 <__stop_program>
