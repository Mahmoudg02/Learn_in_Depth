
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000678  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 000000d8  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000180  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000054f  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001f2  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000053a  00000000  00000000  00001065  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000150  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000029a  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000000c0  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <main>
  64:	0c 94 3a 03 	jmp	0x674	; 0x674 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MCAL_I2C_Init>:
#define TWEA    6
#define TWINT   7



void MCAL_I2C_Init( I2C_config_t* I2C_config ) {
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	00 d0       	rcall	.+0      	; 0x76 <MCAL_I2C_Init+0xa>
  76:	00 d0       	rcall	.+0      	; 0x78 <MCAL_I2C_Init+0xc>
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62
  7c:	9a 83       	std	Y+2, r25	; 0x02
  7e:	89 83       	std	Y+1, r24	; 0x01
	
	myTWBR = (u8)(((I2C_config->fcpu/I2C_config->SCL_Clock)-16)/2*I2C_config->prescaller) ;
  80:	00 e2       	ldi	r16, 0x20	; 32
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	e9 81       	ldd	r30, Y+1	; 0x01
  86:	fa 81       	ldd	r31, Y+2	; 0x02
  88:	85 81       	ldd	r24, Z+5	; 0x05
  8a:	96 81       	ldd	r25, Z+6	; 0x06
  8c:	a7 81       	ldd	r26, Z+7	; 0x07
  8e:	b0 85       	ldd	r27, Z+8	; 0x08
  90:	e9 81       	ldd	r30, Y+1	; 0x01
  92:	fa 81       	ldd	r31, Y+2	; 0x02
  94:	21 81       	ldd	r18, Z+1	; 0x01
  96:	32 81       	ldd	r19, Z+2	; 0x02
  98:	43 81       	ldd	r20, Z+3	; 0x03
  9a:	54 81       	ldd	r21, Z+4	; 0x04
  9c:	bc 01       	movw	r22, r24
  9e:	cd 01       	movw	r24, r26
  a0:	0e 94 18 03 	call	0x630	; 0x630 <__udivmodsi4>
  a4:	da 01       	movw	r26, r20
  a6:	c9 01       	movw	r24, r18
  a8:	40 97       	sbiw	r24, 0x10	; 16
  aa:	a1 09       	sbc	r26, r1
  ac:	b1 09       	sbc	r27, r1
  ae:	b6 95       	lsr	r27
  b0:	a7 95       	ror	r26
  b2:	97 95       	ror	r25
  b4:	87 95       	ror	r24
  b6:	e9 81       	ldd	r30, Y+1	; 0x01
  b8:	fa 81       	ldd	r31, Y+2	; 0x02
  ba:	20 81       	ld	r18, Z
  bc:	22 2f       	mov	r18, r18
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	bc 01       	movw	r22, r24
  c6:	cd 01       	movw	r24, r26
  c8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__mulsi3>
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	f8 01       	movw	r30, r16
  d2:	80 83       	st	Z, r24
	
	myTWSR &=~(0b11) ;
  d4:	a1 e2       	ldi	r26, 0x21	; 33
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e1 e2       	ldi	r30, 0x21	; 33
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8c 7f       	andi	r24, 0xFC	; 252
  e0:	8c 93       	st	X, r24
	switch (I2C_config->prescaller) {
  e2:	e9 81       	ldd	r30, Y+1	; 0x01
  e4:	fa 81       	ldd	r31, Y+2	; 0x02
  e6:	80 81       	ld	r24, Z
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	3c 83       	std	Y+4, r19	; 0x04
  ee:	2b 83       	std	Y+3, r18	; 0x03
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	9c 81       	ldd	r25, Y+4	; 0x04
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	e9 f0       	breq	.+58     	; 0x134 <MCAL_I2C_Init+0xc8>
  fa:	eb 81       	ldd	r30, Y+3	; 0x03
  fc:	fc 81       	ldd	r31, Y+4	; 0x04
  fe:	e5 30       	cpi	r30, 0x05	; 5
 100:	f1 05       	cpc	r31, r1
 102:	34 f4       	brge	.+12     	; 0x110 <MCAL_I2C_Init+0xa4>
 104:	2b 81       	ldd	r18, Y+3	; 0x03
 106:	3c 81       	ldd	r19, Y+4	; 0x04
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	61 f0       	breq	.+24     	; 0x126 <MCAL_I2C_Init+0xba>
 10e:	29 c0       	rjmp	.+82     	; 0x162 <MCAL_I2C_Init+0xf6>
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	9c 81       	ldd	r25, Y+4	; 0x04
 114:	80 31       	cpi	r24, 0x10	; 16
 116:	91 05       	cpc	r25, r1
 118:	a9 f0       	breq	.+42     	; 0x144 <MCAL_I2C_Init+0xd8>
 11a:	eb 81       	ldd	r30, Y+3	; 0x03
 11c:	fc 81       	ldd	r31, Y+4	; 0x04
 11e:	e0 34       	cpi	r30, 0x40	; 64
 120:	f1 05       	cpc	r31, r1
 122:	c1 f0       	breq	.+48     	; 0x154 <MCAL_I2C_Init+0xe8>
 124:	1e c0       	rjmp	.+60     	; 0x162 <MCAL_I2C_Init+0xf6>
		case 1 : 
		myTWSR |= 0 ;
 126:	e1 e2       	ldi	r30, 0x21	; 33
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	a1 e2       	ldi	r26, 0x21	; 33
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	8c 91       	ld	r24, X
 130:	80 83       	st	Z, r24
 132:	17 c0       	rjmp	.+46     	; 0x162 <MCAL_I2C_Init+0xf6>
		break;
		case 4 : 
		myTWSR |= 1 ;
 134:	a1 e2       	ldi	r26, 0x21	; 33
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e1 e2       	ldi	r30, 0x21	; 33
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	8c 93       	st	X, r24
 142:	0f c0       	rjmp	.+30     	; 0x162 <MCAL_I2C_Init+0xf6>
		break;
		case 16 : 
		myTWSR|= 2 ;
 144:	a1 e2       	ldi	r26, 0x21	; 33
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e1 e2       	ldi	r30, 0x21	; 33
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	8c 93       	st	X, r24
 152:	07 c0       	rjmp	.+14     	; 0x162 <MCAL_I2C_Init+0xf6>
		break ;
		case 64 : 
		myTWSR |= 3 ;
 154:	a1 e2       	ldi	r26, 0x21	; 33
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e1 e2       	ldi	r30, 0x21	; 33
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	8c 93       	st	X, r24
		break;
	}
	
	
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <MCAL_I2C_Start>:
void MCAL_I2C_Start(void) {
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
	myTWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) ;
 17c:	e6 e5       	ldi	r30, 0x56	; 86
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	84 ea       	ldi	r24, 0xA4	; 164
 182:	80 83       	st	Z, r24
	while (!(myTWCR & (1<<TWINT)));
 184:	e6 e5       	ldi	r30, 0x56	; 86
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	dc f7       	brge	.-10     	; 0x184 <MCAL_I2C_Start+0x10>
	while((myTWSR&(~0b11))!=0x08) ;
 18e:	e1 e2       	ldi	r30, 0x21	; 33
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8c 7f       	andi	r24, 0xFC	; 252
 19a:	88 30       	cpi	r24, 0x08	; 8
 19c:	91 05       	cpc	r25, r1
 19e:	b9 f7       	brne	.-18     	; 0x18e <MCAL_I2C_Start+0x1a>
	
}
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <MCAL_I2C_Send>:
void MCAL_I2C_Send(u8 Data) {
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	0f 92       	push	r0
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	89 83       	std	Y+1, r24	; 0x01
	
	myTWDR = Data ;
 1b2:	e3 e2       	ldi	r30, 0x23	; 35
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	80 83       	st	Z, r24
	myTWCR = (1<<TWINT)|(1<<TWEN) ;
 1ba:	e6 e5       	ldi	r30, 0x56	; 86
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	80 83       	st	Z, r24
	while (!(myTWCR & (1<<TWINT)));
 1c2:	e6 e5       	ldi	r30, 0x56	; 86
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	88 23       	and	r24, r24
 1ca:	dc f7       	brge	.-10     	; 0x1c2 <MCAL_I2C_Send+0x1c>
	//MCAL_I2C_Wait(0xC0);
}
 1cc:	0f 90       	pop	r0
 1ce:	cf 91       	pop	r28
 1d0:	df 91       	pop	r29
 1d2:	08 95       	ret

000001d4 <MCAL_I2C_Stop>:
void MCAL_I2C_Stop (void) {
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
		myTWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN) ;
 1dc:	e6 e5       	ldi	r30, 0x56	; 86
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	84 e9       	ldi	r24, 0x94	; 148
 1e2:	80 83       	st	Z, r24

}
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <MCAL_I2C_Wait>:

void MCAL_I2C_Wait(u8 State_code){
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <MCAL_I2C_Wait+0x6>
 1f0:	0f 92       	push	r0
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	8b 83       	std	Y+3, r24	; 0x03
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <MCAL_I2C_Wait+0x20>
	int x  ;
	while((myTWSR&(~0b11))!=State_code){
		x = (myTWSR&(~0b11)) ;
 1fa:	e1 e2       	ldi	r30, 0x21	; 33
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	8c 7f       	andi	r24, 0xFC	; 252
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	89 83       	std	Y+1, r24	; 0x01

}

void MCAL_I2C_Wait(u8 State_code){
	int x  ;
	while((myTWSR&(~0b11))!=State_code){
 20a:	e1 e2       	ldi	r30, 0x21	; 33
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 2f       	mov	r24, r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	9c 01       	movw	r18, r24
 216:	2c 7f       	andi	r18, 0xFC	; 252
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	88 2f       	mov	r24, r24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	28 17       	cp	r18, r24
 220:	39 07       	cpc	r19, r25
 222:	59 f7       	brne	.-42     	; 0x1fa <MCAL_I2C_Wait+0x10>
		x = (myTWSR&(~0b11)) ;
	}
	
}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	08 95       	ret

00000230 <MCAL_I2C_SetAdd>:

void MCAL_I2C_SetAdd(u8 address) {
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	0f 92       	push	r0
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	89 83       	std	Y+1, r24	; 0x01

	myTWAR = address ;
 23c:	e2 e2       	ldi	r30, 0x22	; 34
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 83       	st	Z, r24
}
 244:	0f 90       	pop	r0
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

0000024c <MCAL_I2C_Read>:

void MCAL_I2C_Read(u8* Buff ){
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	00 d0       	rcall	.+0      	; 0x252 <MCAL_I2C_Read+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	89 83       	std	Y+1, r24	; 0x01

#ifdef I2C_Slave_Mode
	myTWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN) ;
 25a:	e6 e5       	ldi	r30, 0x56	; 86
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	84 ec       	ldi	r24, 0xC4	; 196
 260:	80 83       	st	Z, r24
	while ((myTWCR&(1<<TWINT))==0) ;
 262:	e6 e5       	ldi	r30, 0x56	; 86
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	88 23       	and	r24, r24
 26a:	dc f7       	brge	.-10     	; 0x262 <MCAL_I2C_Read+0x16>
	MCAL_I2C_Wait(0xA8) ;
 26c:	88 ea       	ldi	r24, 0xA8	; 168
 26e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <MCAL_I2C_Wait>
#endif
//	myTWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN) ;
//	while ((myTWCR&(1<<TWINT))==0) ;
//	*Buff = myTWDR ;

}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <Get_Port_Addr>:

#include"GPIO.h"



u8 Get_Port_Addr(u8 port){
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <Get_Port_Addr+0x6>
 282:	00 d0       	rcall	.+0      	; 0x284 <Get_Port_Addr+0x8>
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	8a 83       	std	Y+2, r24	; 0x02
	u8 base_address =0 ;
 28a:	19 82       	std	Y+1, r1	; 0x01
	switch (port){
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	28 2f       	mov	r18, r24
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	3c 83       	std	Y+4, r19	; 0x04
 294:	2b 83       	std	Y+3, r18	; 0x03
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	9c 81       	ldd	r25, Y+4	; 0x04
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	91 05       	cpc	r25, r1
 29e:	c1 f0       	breq	.+48     	; 0x2d0 <Get_Port_Addr+0x54>
 2a0:	2b 81       	ldd	r18, Y+3	; 0x03
 2a2:	3c 81       	ldd	r19, Y+4	; 0x04
 2a4:	22 30       	cpi	r18, 0x02	; 2
 2a6:	31 05       	cpc	r19, r1
 2a8:	2c f4       	brge	.+10     	; 0x2b4 <Get_Port_Addr+0x38>
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	9c 81       	ldd	r25, Y+4	; 0x04
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	61 f0       	breq	.+24     	; 0x2ca <Get_Port_Addr+0x4e>
 2b2:	16 c0       	rjmp	.+44     	; 0x2e0 <Get_Port_Addr+0x64>
 2b4:	2b 81       	ldd	r18, Y+3	; 0x03
 2b6:	3c 81       	ldd	r19, Y+4	; 0x04
 2b8:	22 30       	cpi	r18, 0x02	; 2
 2ba:	31 05       	cpc	r19, r1
 2bc:	61 f0       	breq	.+24     	; 0x2d6 <Get_Port_Addr+0x5a>
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	9c 81       	ldd	r25, Y+4	; 0x04
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	91 05       	cpc	r25, r1
 2c6:	51 f0       	breq	.+20     	; 0x2dc <Get_Port_Addr+0x60>
 2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <Get_Port_Addr+0x64>
		
		case Port_A :
		base_address= BASE_PORTA ;
 2ca:	89 e3       	ldi	r24, 0x39	; 57
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <Get_Port_Addr+0x64>
		break ;
		
		case Port_B :
		base_address= BASE_PORTB ;
 2d0:	86 e3       	ldi	r24, 0x36	; 54
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <Get_Port_Addr+0x64>
		break;
		
		case Port_C :
		base_address= BASE_PORTC ;
 2d6:	83 e3       	ldi	r24, 0x33	; 51
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <Get_Port_Addr+0x64>
		break;
		
		case Port_D :
		base_address= BASE_PORTD ;
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	89 83       	std	Y+1, r24	; 0x01
		break ;
		

	}
	
	return base_address ;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	08 95       	ret

000002f0 <GPIO_init>:
/************************************************************************/
/* Initialization of ports                                              */                       
/************************************************************************/
void GPIO_init(void){
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <GPIO_init+0x6>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
for (int i = 0 ;i<Number_of_Ports ;i++)
 2fa:	1a 82       	std	Y+2, r1	; 0x02
 2fc:	19 82       	std	Y+1, r1	; 0x01
 2fe:	0a c0       	rjmp	.+20     	; 0x314 <GPIO_init+0x24>
{
	GPIO_WritePort_DIR(GPIO_PORT_DIR_input,i) ;
 300:	99 81       	ldd	r25, Y+1	; 0x01
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	69 2f       	mov	r22, r25
 306:	0e 94 cd 01 	call	0x39a	; 0x39a <GPIO_WritePort_DIR>
}
/************************************************************************/
/* Initialization of ports                                              */                       
/************************************************************************/
void GPIO_init(void){
for (int i = 0 ;i<Number_of_Ports ;i++)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	9a 83       	std	Y+2, r25	; 0x02
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	91 05       	cpc	r25, r1
 31c:	8c f3       	brlt	.-30     	; 0x300 <GPIO_init+0x10>
{
	GPIO_WritePort_DIR(GPIO_PORT_DIR_input,i) ;

}

}
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	08 95       	ret

00000328 <GPIO_ReadPort_DIR>:
/************************************************************************/
/* Port Operations                                                      */             
/************************************************************************/
// read port direction which is DDRx
u8 GPIO_ReadPort_DIR (u8 PortName){
 328:	df 93       	push	r29
 32a:	cf 93       	push	r28
 32c:	0f 92       	push	r0
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	89 83       	std	Y+1, r24	; 0x01
	return *(volatile u8*)(Get_Port_Addr(PortName)+ DIR_OFFSET);
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	fc 01       	movw	r30, r24
 342:	80 81       	ld	r24, Z
}
 344:	0f 90       	pop	r0
 346:	cf 91       	pop	r28
 348:	df 91       	pop	r29
 34a:	08 95       	ret

0000034c <GPIO_ReadPort>:

//read port value in input case from PINx
u8 GPIO_ReadPort(u8 PortName){
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	0f 92       	push	r0
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	89 83       	std	Y+1, r24	; 0x01
	return *(volatile u8*)(Get_Port_Addr(PortName)+PIN_OFFSET) ;
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	80 81       	ld	r24, Z
}
 366:	0f 90       	pop	r0
 368:	cf 91       	pop	r28
 36a:	df 91       	pop	r29
 36c:	08 95       	ret

0000036e <GPIO_WritePort>:

//set port value in register PORTx
u8 GPIO_WritePort(u8 PortVal , u8 PortName){
 36e:	df 93       	push	r29
 370:	cf 93       	push	r28
 372:	00 d0       	rcall	.+0      	; 0x374 <GPIO_WritePort+0x6>
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)=PortVal ;
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 382:	88 2f       	mov	r24, r24
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 96       	adiw	r24, 0x02	; 2
 388:	fc 01       	movw	r30, r24
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	80 83       	st	Z, r24
	return No_Error ;
 38e:	81 e0       	ldi	r24, 0x01	; 1
}
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	cf 91       	pop	r28
 396:	df 91       	pop	r29
 398:	08 95       	ret

0000039a <GPIO_WritePort_DIR>:

// set port direction in register DDRx
u8 GPIO_WritePort_DIR(u8 PortVal , u8 PortName){
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <GPIO_WritePort_DIR+0x6>
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*)(Get_Port_Addr(PortName)+ DIR_OFFSET)=PortVal ;
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	fc 01       	movw	r30, r24
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	80 83       	st	Z, r24
	return No_Error ;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
}
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	cf 91       	pop	r28
 3c2:	df 91       	pop	r29
 3c4:	08 95       	ret

000003c6 <GPIO_ReadPin>:
/************************************************************************/
/* PINS operation                                                        */            
/************************************************************************/

//read pin from PINx.y
u8 GPIO_ReadPin(u8 PortName,u8 PinIndex){
 3c6:	df 93       	push	r29
 3c8:	cf 93       	push	r28
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <GPIO_ReadPin+0x6>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	6a 83       	std	Y+2, r22	; 0x02
	return ((*(volatile u8*)(Get_Port_Addr(PortName)+PIN_OFFSET))>>PinIndex)&0x01;
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <GPIO_ReadPin+0x2e>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <GPIO_ReadPin+0x2a>
 3f8:	ca 01       	movw	r24, r20
 3fa:	81 70       	andi	r24, 0x01	; 1
}
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	cf 91       	pop	r28
 402:	df 91       	pop	r29
 404:	08 95       	ret

00000406 <GPIO_ReadPin_DIR>:

//read pin direction from DDRx.y
u8 GPIO_ReadPin_DIR(u8 PortName,u8 PinIndex){
 406:	df 93       	push	r29
 408:	cf 93       	push	r28
 40a:	00 d0       	rcall	.+0      	; 0x40c <GPIO_ReadPin_DIR+0x6>
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	89 83       	std	Y+1, r24	; 0x01
 412:	6a 83       	std	Y+2, r22	; 0x02
return	((*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET))>>PinIndex)&0x01;
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 41a:	88 2f       	mov	r24, r24
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	fc 01       	movw	r30, r24
 422:	80 81       	ld	r24, Z
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	a9 01       	movw	r20, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <GPIO_ReadPin_DIR+0x30>
 432:	55 95       	asr	r21
 434:	47 95       	ror	r20
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <GPIO_ReadPin_DIR+0x2c>
 43a:	ca 01       	movw	r24, r20
 43c:	81 70       	andi	r24, 0x01	; 1
}
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	cf 91       	pop	r28
 444:	df 91       	pop	r29
 446:	08 95       	ret

00000448 <GPIO_WritePin>:

//set pin value when output mode high or low 
u8 GPIO_WritePin(u8 PortName,u8 PinIndex,u8 PinVal){
 448:	df 93       	push	r29
 44a:	cf 93       	push	r28
 44c:	00 d0       	rcall	.+0      	; 0x44e <GPIO_WritePin+0x6>
 44e:	00 d0       	rcall	.+0      	; 0x450 <GPIO_WritePin+0x8>
 450:	00 d0       	rcall	.+0      	; 0x452 <GPIO_WritePin+0xa>
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	8a 83       	std	Y+2, r24	; 0x02
 458:	6b 83       	std	Y+3, r22	; 0x03
 45a:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_State ;
	
	//(PinVal>8)?API_State=Error_Occurred:API_State=No_Error ;
	
	switch(PinVal){
 45c:	8c 81       	ldd	r24, Y+4	; 0x04
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	3e 83       	std	Y+6, r19	; 0x06
 464:	2d 83       	std	Y+5, r18	; 0x05
 466:	8d 81       	ldd	r24, Y+5	; 0x05
 468:	9e 81       	ldd	r25, Y+6	; 0x06
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	19 f1       	breq	.+70     	; 0x4b4 <__stack+0x55>
 46e:	2d 81       	ldd	r18, Y+5	; 0x05
 470:	3e 81       	ldd	r19, Y+6	; 0x06
 472:	21 30       	cpi	r18, 0x01	; 1
 474:	31 05       	cpc	r19, r1
 476:	e9 f5       	brne	.+122    	; 0x4f2 <__stack+0x93>
		case 1 :
			*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)|=(1<<PinIndex);
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 47e:	28 2f       	mov	r18, r24
 480:	82 2f       	mov	r24, r18
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 96       	adiw	r24, 0x02	; 2
 486:	dc 01       	movw	r26, r24
 488:	82 2f       	mov	r24, r18
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 96       	adiw	r24, 0x02	; 2
 48e:	fc 01       	movw	r30, r24
 490:	80 81       	ld	r24, Z
 492:	48 2f       	mov	r20, r24
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 2e       	mov	r0, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__stack+0x47>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__stack+0x43>
 4aa:	84 2b       	or	r24, r20
 4ac:	8c 93       	st	X, r24
			API_State=No_Error;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	89 83       	std	Y+1, r24	; 0x01
 4b2:	20 c0       	rjmp	.+64     	; 0x4f4 <__stack+0x95>
		break;
		case 0 : 
			*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)&=~(1<<PinIndex);
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 4ba:	28 2f       	mov	r18, r24
 4bc:	82 2f       	mov	r24, r18
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 96       	adiw	r24, 0x02	; 2
 4c2:	dc 01       	movw	r26, r24
 4c4:	82 2f       	mov	r24, r18
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 96       	adiw	r24, 0x02	; 2
 4ca:	fc 01       	movw	r30, r24
 4cc:	80 81       	ld	r24, Z
 4ce:	48 2f       	mov	r20, r24
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	28 2f       	mov	r18, r24
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 2e       	mov	r0, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__stack+0x83>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <__stack+0x7f>
 4e6:	80 95       	com	r24
 4e8:	84 23       	and	r24, r20
 4ea:	8c 93       	st	X, r24
			API_State =No_Error ;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <__stack+0x95>
		break;
		default:
		API_State=Error_Occurred;
 4f2:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_State ;
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 4f6:	26 96       	adiw	r28, 0x06	; 6
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	f8 94       	cli
 4fc:	de bf       	out	0x3e, r29	; 62
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	cd bf       	out	0x3d, r28	; 61
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	08 95       	ret

00000508 <GPIO_WritePin_Dir>:

//set pin direction input or output 
u8 GPIO_WritePin_Dir(u8 PortName,u8 PinIndex,u8 PinVal){
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	00 d0       	rcall	.+0      	; 0x50e <GPIO_WritePin_Dir+0x6>
 50e:	00 d0       	rcall	.+0      	; 0x510 <GPIO_WritePin_Dir+0x8>
 510:	00 d0       	rcall	.+0      	; 0x512 <GPIO_WritePin_Dir+0xa>
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	8a 83       	std	Y+2, r24	; 0x02
 518:	6b 83       	std	Y+3, r22	; 0x03
 51a:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_State ;
	
	//(PinVal>8)?API_State=Error_Occurred:API_State=No_Error ;
	
	switch(PinVal){
 51c:	8c 81       	ldd	r24, Y+4	; 0x04
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	3e 83       	std	Y+6, r19	; 0x06
 524:	2d 83       	std	Y+5, r18	; 0x05
 526:	8d 81       	ldd	r24, Y+5	; 0x05
 528:	9e 81       	ldd	r25, Y+6	; 0x06
 52a:	00 97       	sbiw	r24, 0x00	; 0
 52c:	19 f1       	breq	.+70     	; 0x574 <GPIO_WritePin_Dir+0x6c>
 52e:	2d 81       	ldd	r18, Y+5	; 0x05
 530:	3e 81       	ldd	r19, Y+6	; 0x06
 532:	21 30       	cpi	r18, 0x01	; 1
 534:	31 05       	cpc	r19, r1
 536:	e9 f5       	brne	.+122    	; 0x5b2 <GPIO_WritePin_Dir+0xaa>
		case 1 :
		*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET)|=(1<<PinIndex);
 538:	8a 81       	ldd	r24, Y+2	; 0x02
 53a:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 53e:	28 2f       	mov	r18, r24
 540:	82 2f       	mov	r24, r18
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	dc 01       	movw	r26, r24
 548:	82 2f       	mov	r24, r18
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	01 96       	adiw	r24, 0x01	; 1
 54e:	fc 01       	movw	r30, r24
 550:	80 81       	ld	r24, Z
 552:	48 2f       	mov	r20, r24
 554:	8b 81       	ldd	r24, Y+3	; 0x03
 556:	28 2f       	mov	r18, r24
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 2e       	mov	r0, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <GPIO_WritePin_Dir+0x5e>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <GPIO_WritePin_Dir+0x5a>
 56a:	84 2b       	or	r24, r20
 56c:	8c 93       	st	X, r24
		API_State=No_Error;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	20 c0       	rjmp	.+64     	; 0x5b4 <GPIO_WritePin_Dir+0xac>
		break;
		case 0 :
		*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET)&=~(1<<PinIndex);
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	0e 94 3e 01 	call	0x27c	; 0x27c <Get_Port_Addr>
 57a:	28 2f       	mov	r18, r24
 57c:	82 2f       	mov	r24, r18
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	dc 01       	movw	r26, r24
 584:	82 2f       	mov	r24, r18
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	fc 01       	movw	r30, r24
 58c:	80 81       	ld	r24, Z
 58e:	48 2f       	mov	r20, r24
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	28 2f       	mov	r18, r24
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 2e       	mov	r0, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <GPIO_WritePin_Dir+0x9a>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <GPIO_WritePin_Dir+0x96>
 5a6:	80 95       	com	r24
 5a8:	84 23       	and	r24, r20
 5aa:	8c 93       	st	X, r24
		API_State =No_Error ;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	89 83       	std	Y+1, r24	; 0x01
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <GPIO_WritePin_Dir+0xac>
		break;
		default:
		API_State=Error_Occurred;
 5b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_State ;
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	26 96       	adiw	r28, 0x06	; 6
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	cf 91       	pop	r28
 5c4:	df 91       	pop	r29
 5c6:	08 95       	ret

000005c8 <main>:
#include "Lib/I2C/I2C.h"
#include <util/delay.h>


int main(void)
{
 5c8:	df 93       	push	r29
 5ca:	cf 93       	push	r28
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <main+0x6>
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
	u8 ch_data = 0 ;
 5d2:	19 82       	std	Y+1, r1	; 0x01

#endif


#ifdef I2C_Slave_Mode
	MCAL_I2C_SetAdd(0b11010000) ;
 5d4:	80 ed       	ldi	r24, 0xD0	; 208
 5d6:	0e 94 18 01 	call	0x230	; 0x230 <MCAL_I2C_SetAdd>
		MCAL_I2C_Stop() ;
		myPORTA =ch_data ;
#endif
volatile u8 temp ;
#ifdef I2C_Slave_Mode
		MCAL_I2C_Read(&temp) ;
 5da:	ce 01       	movw	r24, r28
 5dc:	02 96       	adiw	r24, 0x02	; 2
 5de:	0e 94 26 01 	call	0x24c	; 0x24c <MCAL_I2C_Read>
		MCAL_I2C_Send(ch_data++) ;
 5e2:	99 81       	ldd	r25, Y+1	; 0x01
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	8f 5f       	subi	r24, 0xFF	; 255
 5e8:	89 83       	std	Y+1, r24	; 0x01
 5ea:	89 2f       	mov	r24, r25
 5ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCAL_I2C_Send>
 5f0:	f4 cf       	rjmp	.-24     	; 0x5da <main+0x12>

000005f2 <__mulsi3>:
 5f2:	62 9f       	mul	r22, r18
 5f4:	d0 01       	movw	r26, r0
 5f6:	73 9f       	mul	r23, r19
 5f8:	f0 01       	movw	r30, r0
 5fa:	82 9f       	mul	r24, r18
 5fc:	e0 0d       	add	r30, r0
 5fe:	f1 1d       	adc	r31, r1
 600:	64 9f       	mul	r22, r20
 602:	e0 0d       	add	r30, r0
 604:	f1 1d       	adc	r31, r1
 606:	92 9f       	mul	r25, r18
 608:	f0 0d       	add	r31, r0
 60a:	83 9f       	mul	r24, r19
 60c:	f0 0d       	add	r31, r0
 60e:	74 9f       	mul	r23, r20
 610:	f0 0d       	add	r31, r0
 612:	65 9f       	mul	r22, r21
 614:	f0 0d       	add	r31, r0
 616:	99 27       	eor	r25, r25
 618:	72 9f       	mul	r23, r18
 61a:	b0 0d       	add	r27, r0
 61c:	e1 1d       	adc	r30, r1
 61e:	f9 1f       	adc	r31, r25
 620:	63 9f       	mul	r22, r19
 622:	b0 0d       	add	r27, r0
 624:	e1 1d       	adc	r30, r1
 626:	f9 1f       	adc	r31, r25
 628:	bd 01       	movw	r22, r26
 62a:	cf 01       	movw	r24, r30
 62c:	11 24       	eor	r1, r1
 62e:	08 95       	ret

00000630 <__udivmodsi4>:
 630:	a1 e2       	ldi	r26, 0x21	; 33
 632:	1a 2e       	mov	r1, r26
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	fd 01       	movw	r30, r26
 63a:	0d c0       	rjmp	.+26     	; 0x656 <__udivmodsi4_ep>

0000063c <__udivmodsi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	ee 1f       	adc	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	a2 17       	cp	r26, r18
 646:	b3 07       	cpc	r27, r19
 648:	e4 07       	cpc	r30, r20
 64a:	f5 07       	cpc	r31, r21
 64c:	20 f0       	brcs	.+8      	; 0x656 <__udivmodsi4_ep>
 64e:	a2 1b       	sub	r26, r18
 650:	b3 0b       	sbc	r27, r19
 652:	e4 0b       	sbc	r30, r20
 654:	f5 0b       	sbc	r31, r21

00000656 <__udivmodsi4_ep>:
 656:	66 1f       	adc	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	1a 94       	dec	r1
 660:	69 f7       	brne	.-38     	; 0x63c <__udivmodsi4_loop>
 662:	60 95       	com	r22
 664:	70 95       	com	r23
 666:	80 95       	com	r24
 668:	90 95       	com	r25
 66a:	9b 01       	movw	r18, r22
 66c:	ac 01       	movw	r20, r24
 66e:	bd 01       	movw	r22, r26
 670:	cf 01       	movw	r24, r30
 672:	08 95       	ret

00000674 <_exit>:
 674:	f8 94       	cli

00000676 <__stop_program>:
 676:	ff cf       	rjmp	.-2      	; 0x676 <__stop_program>
