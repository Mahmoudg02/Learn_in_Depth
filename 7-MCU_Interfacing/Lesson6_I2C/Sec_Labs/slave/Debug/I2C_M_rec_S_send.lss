
I2C_M_rec_S_send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 000000d8  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000180  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000543  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e3  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000052a  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000150  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000029a  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 000000c0  00000000  00000000  00001942  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
  64:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MCAL_I2C_Init>:
#define TWEA    6
#define TWINT   7



void MCAL_I2C_Init( I2C_config_t* I2C_config ) {
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	00 d0       	rcall	.+0      	; 0x76 <MCAL_I2C_Init+0xa>
  76:	00 d0       	rcall	.+0      	; 0x78 <MCAL_I2C_Init+0xc>
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62
  7c:	9a 83       	std	Y+2, r25	; 0x02
  7e:	89 83       	std	Y+1, r24	; 0x01
	
	myTWBR = (u8)(((I2C_config->fcpu/I2C_config->SCL_Clock)-16)/2*I2C_config->prescaller) ;
  80:	00 e2       	ldi	r16, 0x20	; 32
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	e9 81       	ldd	r30, Y+1	; 0x01
  86:	fa 81       	ldd	r31, Y+2	; 0x02
  88:	85 81       	ldd	r24, Z+5	; 0x05
  8a:	96 81       	ldd	r25, Z+6	; 0x06
  8c:	a7 81       	ldd	r26, Z+7	; 0x07
  8e:	b0 85       	ldd	r27, Z+8	; 0x08
  90:	e9 81       	ldd	r30, Y+1	; 0x01
  92:	fa 81       	ldd	r31, Y+2	; 0x02
  94:	21 81       	ldd	r18, Z+1	; 0x01
  96:	32 81       	ldd	r19, Z+2	; 0x02
  98:	43 81       	ldd	r20, Z+3	; 0x03
  9a:	54 81       	ldd	r21, Z+4	; 0x04
  9c:	bc 01       	movw	r22, r24
  9e:	cd 01       	movw	r24, r26
  a0:	0e 94 09 03 	call	0x612	; 0x612 <__udivmodsi4>
  a4:	da 01       	movw	r26, r20
  a6:	c9 01       	movw	r24, r18
  a8:	40 97       	sbiw	r24, 0x10	; 16
  aa:	a1 09       	sbc	r26, r1
  ac:	b1 09       	sbc	r27, r1
  ae:	b6 95       	lsr	r27
  b0:	a7 95       	ror	r26
  b2:	97 95       	ror	r25
  b4:	87 95       	ror	r24
  b6:	e9 81       	ldd	r30, Y+1	; 0x01
  b8:	fa 81       	ldd	r31, Y+2	; 0x02
  ba:	20 81       	ld	r18, Z
  bc:	22 2f       	mov	r18, r18
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	bc 01       	movw	r22, r24
  c6:	cd 01       	movw	r24, r26
  c8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__mulsi3>
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	f8 01       	movw	r30, r16
  d2:	80 83       	st	Z, r24
	
	myTWSR &=~(0b11) ;
  d4:	a1 e2       	ldi	r26, 0x21	; 33
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e1 e2       	ldi	r30, 0x21	; 33
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8c 7f       	andi	r24, 0xFC	; 252
  e0:	8c 93       	st	X, r24
	switch (I2C_config->prescaller) {
  e2:	e9 81       	ldd	r30, Y+1	; 0x01
  e4:	fa 81       	ldd	r31, Y+2	; 0x02
  e6:	80 81       	ld	r24, Z
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	3c 83       	std	Y+4, r19	; 0x04
  ee:	2b 83       	std	Y+3, r18	; 0x03
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	9c 81       	ldd	r25, Y+4	; 0x04
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	e9 f0       	breq	.+58     	; 0x134 <MCAL_I2C_Init+0xc8>
  fa:	eb 81       	ldd	r30, Y+3	; 0x03
  fc:	fc 81       	ldd	r31, Y+4	; 0x04
  fe:	e5 30       	cpi	r30, 0x05	; 5
 100:	f1 05       	cpc	r31, r1
 102:	34 f4       	brge	.+12     	; 0x110 <MCAL_I2C_Init+0xa4>
 104:	2b 81       	ldd	r18, Y+3	; 0x03
 106:	3c 81       	ldd	r19, Y+4	; 0x04
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	61 f0       	breq	.+24     	; 0x126 <MCAL_I2C_Init+0xba>
 10e:	29 c0       	rjmp	.+82     	; 0x162 <MCAL_I2C_Init+0xf6>
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	9c 81       	ldd	r25, Y+4	; 0x04
 114:	80 31       	cpi	r24, 0x10	; 16
 116:	91 05       	cpc	r25, r1
 118:	a9 f0       	breq	.+42     	; 0x144 <MCAL_I2C_Init+0xd8>
 11a:	eb 81       	ldd	r30, Y+3	; 0x03
 11c:	fc 81       	ldd	r31, Y+4	; 0x04
 11e:	e0 34       	cpi	r30, 0x40	; 64
 120:	f1 05       	cpc	r31, r1
 122:	c1 f0       	breq	.+48     	; 0x154 <MCAL_I2C_Init+0xe8>
 124:	1e c0       	rjmp	.+60     	; 0x162 <MCAL_I2C_Init+0xf6>
		case 1 : 
		myTWSR |= 0 ;
 126:	e1 e2       	ldi	r30, 0x21	; 33
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	a1 e2       	ldi	r26, 0x21	; 33
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	8c 91       	ld	r24, X
 130:	80 83       	st	Z, r24
 132:	17 c0       	rjmp	.+46     	; 0x162 <MCAL_I2C_Init+0xf6>
		break;
		case 4 : 
		myTWSR |= 1 ;
 134:	a1 e2       	ldi	r26, 0x21	; 33
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e1 e2       	ldi	r30, 0x21	; 33
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	8c 93       	st	X, r24
 142:	0f c0       	rjmp	.+30     	; 0x162 <MCAL_I2C_Init+0xf6>
		break;
		case 16 : 
		myTWSR|= 2 ;
 144:	a1 e2       	ldi	r26, 0x21	; 33
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e1 e2       	ldi	r30, 0x21	; 33
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	8c 93       	st	X, r24
 152:	07 c0       	rjmp	.+14     	; 0x162 <MCAL_I2C_Init+0xf6>
		break ;
		case 64 : 
		myTWSR |= 3 ;
 154:	a1 e2       	ldi	r26, 0x21	; 33
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e1 e2       	ldi	r30, 0x21	; 33
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	8c 93       	st	X, r24
		break;
	}
	
	
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <MCAL_I2C_Start>:
void MCAL_I2C_Start(void) {
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
	myTWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN) ;
 17c:	e6 e5       	ldi	r30, 0x56	; 86
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	84 ea       	ldi	r24, 0xA4	; 164
 182:	80 83       	st	Z, r24
	while (!(myTWCR & (1<<TWINT)));
 184:	e6 e5       	ldi	r30, 0x56	; 86
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	dc f7       	brge	.-10     	; 0x184 <MCAL_I2C_Start+0x10>
	while((myTWSR&(~0b11))!=0x08) ;
 18e:	e1 e2       	ldi	r30, 0x21	; 33
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8c 7f       	andi	r24, 0xFC	; 252
 19a:	88 30       	cpi	r24, 0x08	; 8
 19c:	91 05       	cpc	r25, r1
 19e:	b9 f7       	brne	.-18     	; 0x18e <MCAL_I2C_Start+0x1a>
	
}
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <MCAL_I2C_Send>:
void MCAL_I2C_Send(u8 Data) {
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	0f 92       	push	r0
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	89 83       	std	Y+1, r24	; 0x01
	
	myTWDR = Data ;
 1b2:	e3 e2       	ldi	r30, 0x23	; 35
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	80 83       	st	Z, r24
	myTWCR = (1<<TWINT)|(1<<TWEN) ;
 1ba:	e6 e5       	ldi	r30, 0x56	; 86
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	80 83       	st	Z, r24
	while (!(myTWCR & (1<<TWINT)));
 1c2:	e6 e5       	ldi	r30, 0x56	; 86
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	88 23       	and	r24, r24
 1ca:	dc f7       	brge	.-10     	; 0x1c2 <MCAL_I2C_Send+0x1c>
	//MCAL_I2C_Wait(0xC0);
}
 1cc:	0f 90       	pop	r0
 1ce:	cf 91       	pop	r28
 1d0:	df 91       	pop	r29
 1d2:	08 95       	ret

000001d4 <MCAL_I2C_Stop>:
void MCAL_I2C_Stop (void) {
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
		myTWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN) ;
 1dc:	e6 e5       	ldi	r30, 0x56	; 86
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	84 e9       	ldi	r24, 0x94	; 148
 1e2:	80 83       	st	Z, r24

}
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <MCAL_I2C_Wait>:

void MCAL_I2C_Wait(u8 State_code){
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	0f 92       	push	r0
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	89 83       	std	Y+1, r24	; 0x01
	
	while((myTWSR&(~0b11))!=State_code) ;
 1f6:	e1 e2       	ldi	r30, 0x21	; 33
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	9c 01       	movw	r18, r24
 202:	2c 7f       	andi	r18, 0xFC	; 252
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	99 f7       	brne	.-26     	; 0x1f6 <MCAL_I2C_Wait+0xc>
	
}
 210:	0f 90       	pop	r0
 212:	cf 91       	pop	r28
 214:	df 91       	pop	r29
 216:	08 95       	ret

00000218 <MCAL_I2C_SetAdd>:

void MCAL_I2C_SetAdd(u8 address) {
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	0f 92       	push	r0
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01

	myTWAR = address ;
 224:	e2 e2       	ldi	r30, 0x22	; 34
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	80 83       	st	Z, r24
}
 22c:	0f 90       	pop	r0
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <MCAL_I2C_Read>:

void MCAL_I2C_Read(u8* Buff ){
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <MCAL_I2C_Read+0x6>
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	9a 83       	std	Y+2, r25	; 0x02
 240:	89 83       	std	Y+1, r24	; 0x01

#ifdef I2C_Slave_Mode
	myTWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN) ;
 242:	e6 e5       	ldi	r30, 0x56	; 86
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	84 ec       	ldi	r24, 0xC4	; 196
 248:	80 83       	st	Z, r24
	while ((myTWCR&(1<<TWINT))==0) ;
 24a:	e6 e5       	ldi	r30, 0x56	; 86
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	dc f7       	brge	.-10     	; 0x24a <MCAL_I2C_Read+0x16>
#endif
//	myTWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN) ;
//	while ((myTWCR&(1<<TWINT))==0) ;
//	*Buff = myTWDR ;

}
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	cf 91       	pop	r28
 25a:	df 91       	pop	r29
 25c:	08 95       	ret

0000025e <Get_Port_Addr>:

#include"GPIO.h"



u8 Get_Port_Addr(u8 port){
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	00 d0       	rcall	.+0      	; 0x264 <Get_Port_Addr+0x6>
 264:	00 d0       	rcall	.+0      	; 0x266 <Get_Port_Addr+0x8>
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	8a 83       	std	Y+2, r24	; 0x02
	u8 base_address =0 ;
 26c:	19 82       	std	Y+1, r1	; 0x01
	switch (port){
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	3c 83       	std	Y+4, r19	; 0x04
 276:	2b 83       	std	Y+3, r18	; 0x03
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	9c 81       	ldd	r25, Y+4	; 0x04
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	91 05       	cpc	r25, r1
 280:	c1 f0       	breq	.+48     	; 0x2b2 <Get_Port_Addr+0x54>
 282:	2b 81       	ldd	r18, Y+3	; 0x03
 284:	3c 81       	ldd	r19, Y+4	; 0x04
 286:	22 30       	cpi	r18, 0x02	; 2
 288:	31 05       	cpc	r19, r1
 28a:	2c f4       	brge	.+10     	; 0x296 <Get_Port_Addr+0x38>
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	9c 81       	ldd	r25, Y+4	; 0x04
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	61 f0       	breq	.+24     	; 0x2ac <Get_Port_Addr+0x4e>
 294:	16 c0       	rjmp	.+44     	; 0x2c2 <Get_Port_Addr+0x64>
 296:	2b 81       	ldd	r18, Y+3	; 0x03
 298:	3c 81       	ldd	r19, Y+4	; 0x04
 29a:	22 30       	cpi	r18, 0x02	; 2
 29c:	31 05       	cpc	r19, r1
 29e:	61 f0       	breq	.+24     	; 0x2b8 <Get_Port_Addr+0x5a>
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	9c 81       	ldd	r25, Y+4	; 0x04
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	91 05       	cpc	r25, r1
 2a8:	51 f0       	breq	.+20     	; 0x2be <Get_Port_Addr+0x60>
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <Get_Port_Addr+0x64>
		
		case Port_A :
		base_address= BASE_PORTA ;
 2ac:	89 e3       	ldi	r24, 0x39	; 57
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <Get_Port_Addr+0x64>
		break ;
		
		case Port_B :
		base_address= BASE_PORTB ;
 2b2:	86 e3       	ldi	r24, 0x36	; 54
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <Get_Port_Addr+0x64>
		break;
		
		case Port_C :
		base_address= BASE_PORTC ;
 2b8:	83 e3       	ldi	r24, 0x33	; 51
 2ba:	89 83       	std	Y+1, r24	; 0x01
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Get_Port_Addr+0x64>
		break;
		
		case Port_D :
		base_address= BASE_PORTD ;
 2be:	80 e3       	ldi	r24, 0x30	; 48
 2c0:	89 83       	std	Y+1, r24	; 0x01
		break ;
		

	}
	
	return base_address ;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	08 95       	ret

000002d2 <GPIO_init>:
/************************************************************************/
/* Initialization of ports                                              */                       
/************************************************************************/
void GPIO_init(void){
 2d2:	df 93       	push	r29
 2d4:	cf 93       	push	r28
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <GPIO_init+0x6>
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
for (int i = 0 ;i<Number_of_Ports ;i++)
 2dc:	1a 82       	std	Y+2, r1	; 0x02
 2de:	19 82       	std	Y+1, r1	; 0x01
 2e0:	0a c0       	rjmp	.+20     	; 0x2f6 <GPIO_init+0x24>
{
	GPIO_WritePort_DIR(GPIO_PORT_DIR_input,i) ;
 2e2:	99 81       	ldd	r25, Y+1	; 0x01
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	69 2f       	mov	r22, r25
 2e8:	0e 94 be 01 	call	0x37c	; 0x37c <GPIO_WritePort_DIR>
}
/************************************************************************/
/* Initialization of ports                                              */                       
/************************************************************************/
void GPIO_init(void){
for (int i = 0 ;i<Number_of_Ports ;i++)
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	9a 81       	ldd	r25, Y+2	; 0x02
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	84 30       	cpi	r24, 0x04	; 4
 2fc:	91 05       	cpc	r25, r1
 2fe:	8c f3       	brlt	.-30     	; 0x2e2 <GPIO_init+0x10>
{
	GPIO_WritePort_DIR(GPIO_PORT_DIR_input,i) ;

}

}
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	cf 91       	pop	r28
 306:	df 91       	pop	r29
 308:	08 95       	ret

0000030a <GPIO_ReadPort_DIR>:
/************************************************************************/
/* Port Operations                                                      */             
/************************************************************************/
// read port direction which is DDRx
u8 GPIO_ReadPort_DIR (u8 PortName){
 30a:	df 93       	push	r29
 30c:	cf 93       	push	r28
 30e:	0f 92       	push	r0
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	89 83       	std	Y+1, r24	; 0x01
	return *(volatile u8*)(Get_Port_Addr(PortName)+ DIR_OFFSET);
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 31c:	88 2f       	mov	r24, r24
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	fc 01       	movw	r30, r24
 324:	80 81       	ld	r24, Z
}
 326:	0f 90       	pop	r0
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <GPIO_ReadPort>:

//read port value in input case from PINx
u8 GPIO_ReadPort(u8 PortName){
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	0f 92       	push	r0
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	89 83       	std	Y+1, r24	; 0x01
	return *(volatile u8*)(Get_Port_Addr(PortName)+PIN_OFFSET) ;
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 340:	88 2f       	mov	r24, r24
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
}
 348:	0f 90       	pop	r0
 34a:	cf 91       	pop	r28
 34c:	df 91       	pop	r29
 34e:	08 95       	ret

00000350 <GPIO_WritePort>:

//set port value in register PORTx
u8 GPIO_WritePort(u8 PortVal , u8 PortName){
 350:	df 93       	push	r29
 352:	cf 93       	push	r28
 354:	00 d0       	rcall	.+0      	; 0x356 <GPIO_WritePort+0x6>
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)=PortVal ;
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 96       	adiw	r24, 0x02	; 2
 36a:	fc 01       	movw	r30, r24
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	80 83       	st	Z, r24
	return No_Error ;
 370:	81 e0       	ldi	r24, 0x01	; 1
}
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	08 95       	ret

0000037c <GPIO_WritePort_DIR>:

// set port direction in register DDRx
u8 GPIO_WritePort_DIR(u8 PortVal , u8 PortName){
 37c:	df 93       	push	r29
 37e:	cf 93       	push	r28
 380:	00 d0       	rcall	.+0      	; 0x382 <GPIO_WritePort_DIR+0x6>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	6a 83       	std	Y+2, r22	; 0x02
	*(volatile u8*)(Get_Port_Addr(PortName)+ DIR_OFFSET)=PortVal ;
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 390:	88 2f       	mov	r24, r24
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	fc 01       	movw	r30, r24
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	80 83       	st	Z, r24
	return No_Error ;
 39c:	81 e0       	ldi	r24, 0x01	; 1
}
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <GPIO_ReadPin>:
/************************************************************************/
/* PINS operation                                                        */            
/************************************************************************/

//read pin from PINx.y
u8 GPIO_ReadPin(u8 PortName,u8 PinIndex){
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <GPIO_ReadPin+0x6>
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	6a 83       	std	Y+2, r22	; 0x02
	return ((*(volatile u8*)(Get_Port_Addr(PortName)+PIN_OFFSET))>>PinIndex)&0x01;
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	80 81       	ld	r24, Z
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	a9 01       	movw	r20, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <GPIO_ReadPin+0x2e>
 3d2:	55 95       	asr	r21
 3d4:	47 95       	ror	r20
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <GPIO_ReadPin+0x2a>
 3da:	ca 01       	movw	r24, r20
 3dc:	81 70       	andi	r24, 0x01	; 1
}
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	cf 91       	pop	r28
 3e4:	df 91       	pop	r29
 3e6:	08 95       	ret

000003e8 <GPIO_ReadPin_DIR>:

//read pin direction from DDRx.y
u8 GPIO_ReadPin_DIR(u8 PortName,u8 PinIndex){
 3e8:	df 93       	push	r29
 3ea:	cf 93       	push	r28
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <GPIO_ReadPin_DIR+0x6>
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	6a 83       	std	Y+2, r22	; 0x02
return	((*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET))>>PinIndex)&0x01;
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 3fc:	88 2f       	mov	r24, r24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	fc 01       	movw	r30, r24
 404:	80 81       	ld	r24, Z
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	a9 01       	movw	r20, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <GPIO_ReadPin_DIR+0x30>
 414:	55 95       	asr	r21
 416:	47 95       	ror	r20
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <GPIO_ReadPin_DIR+0x2c>
 41c:	ca 01       	movw	r24, r20
 41e:	81 70       	andi	r24, 0x01	; 1
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	cf 91       	pop	r28
 426:	df 91       	pop	r29
 428:	08 95       	ret

0000042a <GPIO_WritePin>:

//set pin value when output mode high or low 
u8 GPIO_WritePin(u8 PortName,u8 PinIndex,u8 PinVal){
 42a:	df 93       	push	r29
 42c:	cf 93       	push	r28
 42e:	00 d0       	rcall	.+0      	; 0x430 <GPIO_WritePin+0x6>
 430:	00 d0       	rcall	.+0      	; 0x432 <GPIO_WritePin+0x8>
 432:	00 d0       	rcall	.+0      	; 0x434 <GPIO_WritePin+0xa>
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	8a 83       	std	Y+2, r24	; 0x02
 43a:	6b 83       	std	Y+3, r22	; 0x03
 43c:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_State ;
	
	//(PinVal>8)?API_State=Error_Occurred:API_State=No_Error ;
	
	switch(PinVal){
 43e:	8c 81       	ldd	r24, Y+4	; 0x04
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	3e 83       	std	Y+6, r19	; 0x06
 446:	2d 83       	std	Y+5, r18	; 0x05
 448:	8d 81       	ldd	r24, Y+5	; 0x05
 44a:	9e 81       	ldd	r25, Y+6	; 0x06
 44c:	00 97       	sbiw	r24, 0x00	; 0
 44e:	19 f1       	breq	.+70     	; 0x496 <__stack+0x37>
 450:	2d 81       	ldd	r18, Y+5	; 0x05
 452:	3e 81       	ldd	r19, Y+6	; 0x06
 454:	21 30       	cpi	r18, 0x01	; 1
 456:	31 05       	cpc	r19, r1
 458:	e9 f5       	brne	.+122    	; 0x4d4 <__stack+0x75>
		case 1 :
			*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)|=(1<<PinIndex);
 45a:	8a 81       	ldd	r24, Y+2	; 0x02
 45c:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 460:	28 2f       	mov	r18, r24
 462:	82 2f       	mov	r24, r18
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 96       	adiw	r24, 0x02	; 2
 468:	dc 01       	movw	r26, r24
 46a:	82 2f       	mov	r24, r18
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 96       	adiw	r24, 0x02	; 2
 470:	fc 01       	movw	r30, r24
 472:	80 81       	ld	r24, Z
 474:	48 2f       	mov	r20, r24
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 2e       	mov	r0, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <__stack+0x29>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__stack+0x25>
 48c:	84 2b       	or	r24, r20
 48e:	8c 93       	st	X, r24
			API_State=No_Error;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	89 83       	std	Y+1, r24	; 0x01
 494:	20 c0       	rjmp	.+64     	; 0x4d6 <__stack+0x77>
		break;
		case 0 : 
			*(volatile u8*)(Get_Port_Addr(PortName)+PORT_OFFSET)&=~(1<<PinIndex);
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 49c:	28 2f       	mov	r18, r24
 49e:	82 2f       	mov	r24, r18
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 96       	adiw	r24, 0x02	; 2
 4a4:	dc 01       	movw	r26, r24
 4a6:	82 2f       	mov	r24, r18
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 96       	adiw	r24, 0x02	; 2
 4ac:	fc 01       	movw	r30, r24
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 2e       	mov	r0, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__stack+0x65>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__stack+0x61>
 4c8:	80 95       	com	r24
 4ca:	84 23       	and	r24, r20
 4cc:	8c 93       	st	X, r24
			API_State =No_Error ;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	89 83       	std	Y+1, r24	; 0x01
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <__stack+0x77>
		break;
		default:
		API_State=Error_Occurred;
 4d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_State ;
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 4d8:	26 96       	adiw	r28, 0x06	; 6
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	08 95       	ret

000004ea <GPIO_WritePin_Dir>:

//set pin direction input or output 
u8 GPIO_WritePin_Dir(u8 PortName,u8 PinIndex,u8 PinVal){
 4ea:	df 93       	push	r29
 4ec:	cf 93       	push	r28
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <GPIO_WritePin_Dir+0x6>
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <GPIO_WritePin_Dir+0x8>
 4f2:	00 d0       	rcall	.+0      	; 0x4f4 <GPIO_WritePin_Dir+0xa>
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	8a 83       	std	Y+2, r24	; 0x02
 4fa:	6b 83       	std	Y+3, r22	; 0x03
 4fc:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_State ;
	
	//(PinVal>8)?API_State=Error_Occurred:API_State=No_Error ;
	
	switch(PinVal){
 4fe:	8c 81       	ldd	r24, Y+4	; 0x04
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	3e 83       	std	Y+6, r19	; 0x06
 506:	2d 83       	std	Y+5, r18	; 0x05
 508:	8d 81       	ldd	r24, Y+5	; 0x05
 50a:	9e 81       	ldd	r25, Y+6	; 0x06
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	19 f1       	breq	.+70     	; 0x556 <GPIO_WritePin_Dir+0x6c>
 510:	2d 81       	ldd	r18, Y+5	; 0x05
 512:	3e 81       	ldd	r19, Y+6	; 0x06
 514:	21 30       	cpi	r18, 0x01	; 1
 516:	31 05       	cpc	r19, r1
 518:	e9 f5       	brne	.+122    	; 0x594 <GPIO_WritePin_Dir+0xaa>
		case 1 :
		*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET)|=(1<<PinIndex);
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 520:	28 2f       	mov	r18, r24
 522:	82 2f       	mov	r24, r18
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	dc 01       	movw	r26, r24
 52a:	82 2f       	mov	r24, r18
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	fc 01       	movw	r30, r24
 532:	80 81       	ld	r24, Z
 534:	48 2f       	mov	r20, r24
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 2e       	mov	r0, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <GPIO_WritePin_Dir+0x5e>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <GPIO_WritePin_Dir+0x5a>
 54c:	84 2b       	or	r24, r20
 54e:	8c 93       	st	X, r24
		API_State=No_Error;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	89 83       	std	Y+1, r24	; 0x01
 554:	20 c0       	rjmp	.+64     	; 0x596 <GPIO_WritePin_Dir+0xac>
		break;
		case 0 :
		*(volatile u8*)(Get_Port_Addr(PortName)+DIR_OFFSET)&=~(1<<PinIndex);
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	0e 94 2f 01 	call	0x25e	; 0x25e <Get_Port_Addr>
 55c:	28 2f       	mov	r18, r24
 55e:	82 2f       	mov	r24, r18
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	dc 01       	movw	r26, r24
 566:	82 2f       	mov	r24, r18
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	fc 01       	movw	r30, r24
 56e:	80 81       	ld	r24, Z
 570:	48 2f       	mov	r20, r24
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	28 2f       	mov	r18, r24
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 2e       	mov	r0, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_WritePin_Dir+0x9a>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	0a 94       	dec	r0
 586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_WritePin_Dir+0x96>
 588:	80 95       	com	r24
 58a:	84 23       	and	r24, r20
 58c:	8c 93       	st	X, r24
		API_State =No_Error ;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	01 c0       	rjmp	.+2      	; 0x596 <GPIO_WritePin_Dir+0xac>
		break;
		default:
		API_State=Error_Occurred;
 594:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_State ;
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	26 96       	adiw	r28, 0x06	; 6
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	cf 91       	pop	r28
 5a6:	df 91       	pop	r29
 5a8:	08 95       	ret

000005aa <main>:
#include "Lib/I2C/I2C.h"
#include <util/delay.h>


int main(void)
{
 5aa:	df 93       	push	r29
 5ac:	cf 93       	push	r28
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <main+0x6>
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
	u8 ch_data = 0 ;
 5b4:	19 82       	std	Y+1, r1	; 0x01

#endif


#ifdef I2C_Slave_Mode
	MCAL_I2C_SetAdd(0b11010000) ;
 5b6:	80 ed       	ldi	r24, 0xD0	; 208
 5b8:	0e 94 0c 01 	call	0x218	; 0x218 <MCAL_I2C_SetAdd>
		MCAL_I2C_Stop() ;
		myPORTA =ch_data ;
#endif
volatile u8 temp ;
#ifdef I2C_Slave_Mode
		MCAL_I2C_Read(&temp) ;
 5bc:	ce 01       	movw	r24, r28
 5be:	02 96       	adiw	r24, 0x02	; 2
 5c0:	0e 94 1a 01 	call	0x234	; 0x234 <MCAL_I2C_Read>
		MCAL_I2C_Send(ch_data++) ;
 5c4:	99 81       	ldd	r25, Y+1	; 0x01
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	89 83       	std	Y+1, r24	; 0x01
 5cc:	89 2f       	mov	r24, r25
 5ce:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCAL_I2C_Send>
 5d2:	f4 cf       	rjmp	.-24     	; 0x5bc <main+0x12>

000005d4 <__mulsi3>:
 5d4:	62 9f       	mul	r22, r18
 5d6:	d0 01       	movw	r26, r0
 5d8:	73 9f       	mul	r23, r19
 5da:	f0 01       	movw	r30, r0
 5dc:	82 9f       	mul	r24, r18
 5de:	e0 0d       	add	r30, r0
 5e0:	f1 1d       	adc	r31, r1
 5e2:	64 9f       	mul	r22, r20
 5e4:	e0 0d       	add	r30, r0
 5e6:	f1 1d       	adc	r31, r1
 5e8:	92 9f       	mul	r25, r18
 5ea:	f0 0d       	add	r31, r0
 5ec:	83 9f       	mul	r24, r19
 5ee:	f0 0d       	add	r31, r0
 5f0:	74 9f       	mul	r23, r20
 5f2:	f0 0d       	add	r31, r0
 5f4:	65 9f       	mul	r22, r21
 5f6:	f0 0d       	add	r31, r0
 5f8:	99 27       	eor	r25, r25
 5fa:	72 9f       	mul	r23, r18
 5fc:	b0 0d       	add	r27, r0
 5fe:	e1 1d       	adc	r30, r1
 600:	f9 1f       	adc	r31, r25
 602:	63 9f       	mul	r22, r19
 604:	b0 0d       	add	r27, r0
 606:	e1 1d       	adc	r30, r1
 608:	f9 1f       	adc	r31, r25
 60a:	bd 01       	movw	r22, r26
 60c:	cf 01       	movw	r24, r30
 60e:	11 24       	eor	r1, r1
 610:	08 95       	ret

00000612 <__udivmodsi4>:
 612:	a1 e2       	ldi	r26, 0x21	; 33
 614:	1a 2e       	mov	r1, r26
 616:	aa 1b       	sub	r26, r26
 618:	bb 1b       	sub	r27, r27
 61a:	fd 01       	movw	r30, r26
 61c:	0d c0       	rjmp	.+26     	; 0x638 <__udivmodsi4_ep>

0000061e <__udivmodsi4_loop>:
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	ee 1f       	adc	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	a2 17       	cp	r26, r18
 628:	b3 07       	cpc	r27, r19
 62a:	e4 07       	cpc	r30, r20
 62c:	f5 07       	cpc	r31, r21
 62e:	20 f0       	brcs	.+8      	; 0x638 <__udivmodsi4_ep>
 630:	a2 1b       	sub	r26, r18
 632:	b3 0b       	sbc	r27, r19
 634:	e4 0b       	sbc	r30, r20
 636:	f5 0b       	sbc	r31, r21

00000638 <__udivmodsi4_ep>:
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	1a 94       	dec	r1
 642:	69 f7       	brne	.-38     	; 0x61e <__udivmodsi4_loop>
 644:	60 95       	com	r22
 646:	70 95       	com	r23
 648:	80 95       	com	r24
 64a:	90 95       	com	r25
 64c:	9b 01       	movw	r18, r22
 64e:	ac 01       	movw	r20, r24
 650:	bd 01       	movw	r22, r26
 652:	cf 01       	movw	r24, r30
 654:	08 95       	ret

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
