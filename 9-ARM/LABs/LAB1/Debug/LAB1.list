
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080011f4  080011f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011fc  080011fc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080011fc  080011fc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011fc  080011fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011fc  080011fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000018  0800121c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  0800121c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025e2  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bc9  00000000  00000000  00022623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  000231f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  000234c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003843  00000000  00000000  00023718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004069  00000000  00000000  00026f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000cbb3  00000000  00000000  0002afc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00037b77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000095c  00000000  00000000  00037bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	080011dc 	.word	0x080011dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	080011dc 	.word	0x080011dc

08000170 <clk_init>:

//#define MCU_MASTER

//#define MCU_SLAVE

void clk_init(void ){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	// enable CLK for port A
	RCC_GPIOA_CLK_EN() ;
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <clk_init+0x3c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <clk_init+0x3c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//enable CLK for Port B
	RCC_GPIOB_CLK_EN() ;
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <clk_init+0x3c>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <clk_init+0x3c>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	//enable AFIO CLK
	RCC_AFIO_CLK_EN() ;
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <clk_init+0x3c>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <clk_init+0x3c>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
	//enable I2C CLK
	RCC_I2C1_CLK_EN() ;
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <clk_init+0x3c>)
 800019a:	69db      	ldr	r3, [r3, #28]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <clk_init+0x3c>)
 800019e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001a2:	61d3      	str	r3, [r2, #28]

}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000

080001b0 <main>:
//}

int volatile  flag= 0 ;

void EXTI9_CallBack(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af00      	add	r7, sp, #0
	flag=1 ;
}
int main(void)
 80001b6:	f7ff ffdb 	bl	8000170 <clk_init>
{


 80001ba:	f000 f89f 	bl	80002fc <HAL_EEPROM_Init>
	clk_init() ;

	EXTI_PinCfg_t  ex1config ;
	ex1config.EXTI_PIN = EXTI9PB9 ;
 80001be:	4a39      	ldr	r2, [pc, #228]	; (80002a4 <main+0xf4>)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001c8:	6018      	str	r0, [r3, #0]
 80001ca:	3304      	adds	r3, #4
 80001cc:	8019      	strh	r1, [r3, #0]
 80001ce:	3302      	adds	r3, #2
 80001d0:	0c0a      	lsrs	r2, r1, #16
 80001d2:	701a      	strb	r2, [r3, #0]
	ex1config.EXTI_Trigger = EXTI_Trigger_Rising ;
 80001d4:	2300      	movs	r3, #0
 80001d6:	613b      	str	r3, [r7, #16]
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2100      	movs	r1, #0
 80001de:	460a      	mov	r2, r1
 80001e0:	801a      	strh	r2, [r3, #0]
 80001e2:	460a      	mov	r2, r1
 80001e4:	709a      	strb	r2, [r3, #2]
	ex1config.P_IRQ_CallBack = EXTI9_CallBack ;
	ex1config.EXTI_IRQ_EN = EXTI_Enable ;
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2207      	movs	r2, #7
 80001ec:	4619      	mov	r1, r3
 80001ee:	20af      	movs	r0, #175	; 0xaf
 80001f0:	f000 f8a6 	bl	8000340 <HAL_EEPROM_Write_NBytes>

 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2207      	movs	r2, #7
 80001fa:	4619      	mov	r1, r3
 80001fc:	20af      	movs	r0, #175	; 0xaf
 80001fe:	f000 f90b 	bl	8000418 <HAL_EEPROM_Read_NBytes>
	MCAL_EXTI_GPIO_Init(&ex1config) ;



 8000202:	230a      	movs	r3, #10
 8000204:	763b      	strb	r3, [r7, #24]

 8000206:	230b      	movs	r3, #11
 8000208:	767b      	strb	r3, [r7, #25]
	while (1){
 800020a:	230c      	movs	r3, #12
 800020c:	76bb      	strb	r3, [r7, #26]

 800020e:	230d      	movs	r3, #13
 8000210:	76fb      	strb	r3, [r7, #27]
		flag = 0 ;

 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2204      	movs	r2, #4
 8000218:	4619      	mov	r1, r3
 800021a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800021e:	f000 f88f 	bl	8000340 <HAL_EEPROM_Write_NBytes>
	}
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	2204      	movs	r2, #4
 8000228:	4619      	mov	r1, r3
 800022a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800022e:	f000 f8f3 	bl	8000418 <HAL_EEPROM_Read_NBytes>
 8000232:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <main+0xf4>)
 8000234:	f107 0308 	add.w	r3, r7, #8
 8000238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800023c:	6018      	str	r0, [r3, #0]
 800023e:	3304      	adds	r3, #4
 8000240:	8019      	strh	r1, [r3, #0]
 8000242:	3302      	adds	r3, #2
 8000244:	0c0a      	lsrs	r2, r1, #16
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	2300      	movs	r3, #0
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2100      	movs	r1, #0
 8000250:	460a      	mov	r2, r1
 8000252:	801a      	strh	r2, [r3, #0]
 8000254:	460a      	mov	r2, r1
 8000256:	709a      	strb	r2, [r3, #2]
 8000258:	f107 0308 	add.w	r3, r7, #8
 800025c:	2207      	movs	r2, #7
 800025e:	4619      	mov	r1, r3
 8000260:	20af      	movs	r0, #175	; 0xaf
 8000262:	f000 f86d 	bl	8000340 <HAL_EEPROM_Write_NBytes>
 8000266:	463b      	mov	r3, r7
 8000268:	2207      	movs	r2, #7
 800026a:	4619      	mov	r1, r3
 800026c:	20af      	movs	r0, #175	; 0xaf
 800026e:	f000 f8d3 	bl	8000418 <HAL_EEPROM_Read_NBytes>
 8000272:	230a      	movs	r3, #10
 8000274:	723b      	strb	r3, [r7, #8]
 8000276:	230b      	movs	r3, #11
 8000278:	727b      	strb	r3, [r7, #9]
 800027a:	230c      	movs	r3, #12
 800027c:	72bb      	strb	r3, [r7, #10]
 800027e:	230d      	movs	r3, #13
 8000280:	72fb      	strb	r3, [r7, #11]
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	2204      	movs	r2, #4
 8000288:	4619      	mov	r1, r3
 800028a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800028e:	f000 f857 	bl	8000340 <HAL_EEPROM_Write_NBytes>
 8000292:	463b      	mov	r3, r7
 8000294:	2204      	movs	r2, #4
 8000296:	4619      	mov	r1, r3
 8000298:	f640 70ff 	movw	r0, #4095	; 0xfff
 800029c:	f000 f8bc 	bl	8000418 <HAL_EEPROM_Read_NBytes>
 80002a0:	e7c7      	b.n	8000232 <main+0x82>
 80002a2:	bf00      	nop
 80002a4:	080011f4 	.word	0x080011f4

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 ff5d 	bl	8001194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff69 	bl	80001b0 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80002ec:	08001204 	.word	0x08001204
  ldr r2, =_sbss
 80002f0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80002f4:	200000d0 	.word	0x200000d0

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <HAL_EEPROM_Init>:

/**********************************************************************************************************************
 *  GLOBAL API Definition
 *********************************************************************************************************************/

void HAL_EEPROM_Init(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08a      	sub	sp, #40	; 0x28
 8000300:	af00      	add	r7, sp, #0
	 */

	I2C_Config_t I2C_Config;

	/* I2C Controller as Master */
	I2C_Config.General_Call = I2C_GENERAL_CALL_ENABLE;
 8000302:	2340      	movs	r3, #64	; 0x40
 8000304:	60bb      	str	r3, [r7, #8]
	I2C_Config.Mode = I2C_MODE_I2C_MODE;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
	I2C_Config.Stretch_Mode = I2C_STRETCH_MODE_ENABLE;
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
	I2C_Config.Master_Mode = I2C_MASTER_MODE_SM;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
	I2C_Config.Clock_Speed = I2C_CLOCK_SPEED_100KHZ;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_EEPROM_Init+0x3c>)
 8000314:	603b      	str	r3, [r7, #0]
	I2C_Config.ACK_Control = I2C_ACK_CONTROL_ENABLE;
 8000316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031a:	617b      	str	r3, [r7, #20]
	I2C_Config.P_Slave_CallBack = NULL;
 800031c:	2300      	movs	r3, #0
 800031e:	627b      	str	r3, [r7, #36]	; 0x24

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <HAL_EEPROM_Init+0x40>)
 8000322:	f000 fc07 	bl	8000b34 <MCAL_I2C_GPIO_Set_Pins>

	MCAL_I2C_Init(I2C1, &I2C_Config);
 8000326:	463b      	mov	r3, r7
 8000328:	4619      	mov	r1, r3
 800032a:	4804      	ldr	r0, [pc, #16]	; (800033c <HAL_EEPROM_Init+0x40>)
 800032c:	f000 faea 	bl	8000904 <MCAL_I2C_Init>

}
 8000330:	bf00      	nop
 8000332:	3728      	adds	r7, #40	; 0x28
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	000186a0 	.word	0x000186a0
 800033c:	40005400 	.word	0x40005400

08000340 <HAL_EEPROM_Write_NBytes>:

uint8_t HAL_EEPROM_Write_NBytes(uint32_t Memory_Address, uint8_t *Byte, uint32_t Data_Length)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b0c8      	sub	sp, #288	; 0x120
 8000344:	af02      	add	r7, sp, #8
 8000346:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800034a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800034e:	6018      	str	r0, [r3, #0]
 8000350:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000354:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000358:	6019      	str	r1, [r3, #0]
 800035a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800035e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000362:	601a      	str	r2, [r3, #0]
	int i = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	uint8_t Buffer[256];

	Buffer[0] = (uint8_t)(Memory_Address >> 8);		/* High Address */
 800036a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800036e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	0a1b      	lsrs	r3, r3, #8
 8000376:	b2da      	uxtb	r2, r3
 8000378:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800037c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000380:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (uint8_t)(Memory_Address);			/* Low Address  */
 8000382:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	b2da      	uxtb	r2, r3
 800038e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000396:	705a      	strb	r2, [r3, #1]

	for(i = 2; i < (Data_Length+2); i++)
 8000398:	2302      	movs	r3, #2
 800039a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800039e:	e017      	b.n	80003d0 <HAL_EEPROM_Write_NBytes+0x90>
	{
		Buffer[i]= Byte[i-2];
 80003a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80003a4:	3b02      	subs	r3, #2
 80003a6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80003aa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	4413      	add	r3, r2
 80003b2:	7819      	ldrb	r1, [r3, #0]
 80003b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003b8:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80003bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80003c0:	4413      	add	r3, r2
 80003c2:	460a      	mov	r2, r1
 80003c4:	701a      	strb	r2, [r3, #0]
	for(i = 2; i < (Data_Length+2); i++)
 80003c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80003ca:	3301      	adds	r3, #1
 80003cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80003d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	1c9a      	adds	r2, r3, #2
 80003dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d8dd      	bhi.n	80003a0 <HAL_EEPROM_Write_NBytes+0x60>
	}

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_Address, Buffer, (Data_Length+2), With_STOP, START);
 80003e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	3302      	adds	r3, #2
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f107 0214 	add.w	r2, r7, #20
 80003f8:	2100      	movs	r1, #0
 80003fa:	9101      	str	r1, [sp, #4]
 80003fc:	2100      	movs	r1, #0
 80003fe:	9100      	str	r1, [sp, #0]
 8000400:	212a      	movs	r1, #42	; 0x2a
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <HAL_EEPROM_Write_NBytes+0xd4>)
 8000404:	f000 fbe0 	bl	8000bc8 <MCAL_I2C_MASTER_TX>

	return 0;
 8000408:	2300      	movs	r3, #0
}
 800040a:	4618      	mov	r0, r3
 800040c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40005400 	.word	0x40005400

08000418 <HAL_EEPROM_Read_NBytes>:

uint8_t HAL_EEPROM_Read_NBytes(uint32_t Memory_Address, uint8_t *Byte, uint32_t Data_Length)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af02      	add	r7, sp, #8
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
	uint8_t Buffer[2];

	Buffer[0] = (uint8_t)(Memory_Address >> 8);		/* High Address */
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	0a1b      	lsrs	r3, r3, #8
 8000428:	b2db      	uxtb	r3, r3
 800042a:	753b      	strb	r3, [r7, #20]
	Buffer[1] = (uint8_t)(Memory_Address);			/* Low Address  */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_Address, Buffer, 2, Without_STOP, START);
 8000432:	f107 0214 	add.w	r2, r7, #20
 8000436:	2300      	movs	r3, #0
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	2301      	movs	r3, #1
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	2302      	movs	r3, #2
 8000440:	212a      	movs	r1, #42	; 0x2a
 8000442:	4809      	ldr	r0, [pc, #36]	; (8000468 <HAL_EEPROM_Read_NBytes+0x50>)
 8000444:	f000 fbc0 	bl	8000bc8 <MCAL_I2C_MASTER_TX>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_Address, Byte, Data_Length, With_STOP, Repeated_START);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	2201      	movs	r2, #1
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	9200      	str	r2, [sp, #0]
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	212a      	movs	r1, #42	; 0x2a
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <HAL_EEPROM_Read_NBytes+0x50>)
 800045a:	f000 fc0d 	bl	8000c78 <MCAL_I2C_MASTER_RX>
	return 0;
 800045e:	2300      	movs	r3, #0
}
 8000460:	4618      	mov	r0, r3
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40005400 	.word	0x40005400

0800046c <MCAL_RCC_GetFreq_PCLK1>:
 * \Reentrancy      :  Reentrant
 * \Parameters (in) : none
 * \Return value:   : freq of bus (uint32_t ) in MHZ .
 *******************************************************************************/
uint32_t MCAL_RCC_GetFreq_PCLK1(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetFreq_HCLK() >> APB_preScalerTable[((RCC->CFGR>>8)&0b111)]) ;
 8000470:	f000 f810 	bl	8000494 <MCAL_RCC_GetFreq_HCLK>
 8000474:	4602      	mov	r2, r0
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <MCAL_RCC_GetFreq_PCLK1+0x20>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	4903      	ldr	r1, [pc, #12]	; (8000490 <MCAL_RCC_GetFreq_PCLK1+0x24>)
 8000482:	5ccb      	ldrb	r3, [r1, r3]
 8000484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000488:	4618      	mov	r0, r3
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000
 8000490:	20000000 	.word	0x20000000

08000494 <MCAL_RCC_GetFreq_HCLK>:
 * \Reentrancy      : Reentrant
 * \Parameters (in) : none
 * \Return value:   : Freq of bus (uint32_t ) in MHZ .
 *******************************************************************************/
uint32_t MCAL_RCC_GetFreq_HCLK(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetFreq_SYSCLK() >> AHB_preScalerTable[((RCC->CFGR>>4)&0b1111)]) ;
 8000498:	f000 f810 	bl	80004bc <MCAL_RCC_GetFreq_SYSCLK>
 800049c:	4602      	mov	r2, r0
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <MCAL_RCC_GetFreq_HCLK+0x20>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	091b      	lsrs	r3, r3, #4
 80004a4:	f003 030f 	and.w	r3, r3, #15
 80004a8:	4903      	ldr	r1, [pc, #12]	; (80004b8 <MCAL_RCC_GetFreq_HCLK+0x24>)
 80004aa:	5ccb      	ldrb	r3, [r1, r3]
 80004ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	20000008 	.word	0x20000008

080004bc <MCAL_RCC_GetFreq_SYSCLK>:
 * \Reentrancy      : Reentrant
 * \Parameters (in) : none
 * \Return value:   : Freq of bus (uint32_t ) in MHZ .
 *******************************************************************************/
uint32_t MCAL_RCC_GetFreq_SYSCLK(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	//  Default CLK is internal Oscillator 8MHZ

	switch((RCC->CFGR>>2)&0b11)
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MCAL_RCC_GetFreq_SYSCLK+0x38>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	089b      	lsrs	r3, r3, #2
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d00a      	beq.n	80004e4 <MCAL_RCC_GetFreq_SYSCLK+0x28>
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d80a      	bhi.n	80004e8 <MCAL_RCC_GetFreq_SYSCLK+0x2c>
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <MCAL_RCC_GetFreq_SYSCLK+0x20>
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d002      	beq.n	80004e0 <MCAL_RCC_GetFreq_SYSCLK+0x24>
 80004da:	e005      	b.n	80004e8 <MCAL_RCC_GetFreq_SYSCLK+0x2c>
	{
	case (0) :
			return HSI_CLK  ; // internal oscillator selected 8 MHZ
 80004dc:	2308      	movs	r3, #8
 80004de:	e004      	b.n	80004ea <MCAL_RCC_GetFreq_SYSCLK+0x2e>
			break ;
	case (1) :
			return HSE_CLK ; //External oscillator selected need more configuration by user
 80004e0:	2310      	movs	r3, #16
 80004e2:	e002      	b.n	80004ea <MCAL_RCC_GetFreq_SYSCLK+0x2e>
			break  ;
	case(2) :
			return PLL_CLK ; // PLL Module selected >> need more configuration
 80004e4:	2310      	movs	r3, #16
 80004e6:	e000      	b.n	80004ea <MCAL_RCC_GetFreq_SYSCLK+0x2e>
			break ;
	}

	return 11 ; // will never happen just for avoid warnings .
 80004e8:	230b      	movs	r3, #11
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <EXTI0_IRQHandler>:

/**********************************************************************************************************************
 *  ISR FUNCTIONS
 *********************************************************************************************************************/

void EXTI0_IRQHandler(void ){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	EXTI->PR|=(GPIO_PIN0) ;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <EXTI0_IRQHandler+0x1c>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <EXTI0_IRQHandler+0x1c>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6153      	str	r3, [r2, #20]
	CallBackHandler[0]();
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <EXTI0_IRQHandler+0x20>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4798      	blx	r3
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010400 	.word	0x40010400
 8000518:	20000034 	.word	0x20000034

0800051c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void ){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	EXTI->PR|=(GPIO_PIN1) ;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <EXTI1_IRQHandler+0x1c>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <EXTI1_IRQHandler+0x1c>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	6153      	str	r3, [r2, #20]
	CallBackHandler[1]();
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <EXTI1_IRQHandler+0x20>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010400 	.word	0x40010400
 800053c:	20000034 	.word	0x20000034

08000540 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void ){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	EXTI->PR|=(GPIO_PIN2) ;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI2_IRQHandler+0x1c>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI2_IRQHandler+0x1c>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6153      	str	r3, [r2, #20]
	CallBackHandler[2]();
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI2_IRQHandler+0x20>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4798      	blx	r3
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	20000034 	.word	0x20000034

08000564 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void ){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	EXTI->PR|=(GPIO_PIN3) ;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <EXTI3_IRQHandler+0x1c>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <EXTI3_IRQHandler+0x1c>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6153      	str	r3, [r2, #20]
	CallBackHandler[3]();
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <EXTI3_IRQHandler+0x20>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	4798      	blx	r3
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010400 	.word	0x40010400
 8000584:	20000034 	.word	0x20000034

08000588 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void ){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	EXTI->PR|=(GPIO_PIN4) ;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <EXTI4_IRQHandler+0x1c>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <EXTI4_IRQHandler+0x1c>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6153      	str	r3, [r2, #20]
	CallBackHandler[4]();
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <EXTI4_IRQHandler+0x20>)
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	4798      	blx	r3
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010400 	.word	0x40010400
 80005a8:	20000034 	.word	0x20000034

080005ac <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	if (EXTI->PR & 1<<5){ EXTI->PR |= 1<<5  ; 	CallBackHandler[5]() ; }
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d008      	beq.n	80005ce <EXTI9_5_IRQHandler+0x22>
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	6153      	str	r3, [r2, #20]
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4798      	blx	r3
	if (EXTI->PR & 1<<6){ EXTI->PR |= 1<<6  ; 	CallBackHandler[6]() ; }
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <EXTI9_5_IRQHandler+0x40>
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a1b      	ldr	r2, [pc, #108]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4798      	blx	r3
	if (EXTI->PR & 1<<7){ EXTI->PR |= 1<<7  ; 	CallBackHandler[7]() ; }
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <EXTI9_5_IRQHandler+0x5e>
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 80005fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4798      	blx	r3
	if (EXTI->PR & 1<<8){ EXTI->PR |= 1<<8  ; 	CallBackHandler[8]() ; }
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <EXTI9_5_IRQHandler+0x7c>
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a0c      	ldr	r2, [pc, #48]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800061c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	4798      	blx	r3
	if (EXTI->PR & 1<<9){ EXTI->PR |= 1<<9  ; 	CallBackHandler[9]() ; }
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <EXTI9_5_IRQHandler+0x9a>
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <EXTI9_5_IRQHandler+0xa0>)
 800063a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800063e:	6153      	str	r3, [r2, #20]
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <EXTI9_5_IRQHandler+0xa4>)
 8000642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000644:	4798      	blx	r3

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40010400 	.word	0x40010400
 8000650:	20000034 	.word	0x20000034

08000654 <Get_CRx_Position>:
 * \Reentrancy      : Non Reentrant
 * \Parameters (in) : pin      value of pin number according to ref @ GPIO_PINs_DEFINE
 * \Return value:   : uint16_t   decimal value of pin number
 * \notes 		   : PORT E not used in this chip
 *******************************************************************************/
uint16_t Get_CRx_Position(uint16_t pin) {
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	uint8_t pos = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
	switch (pin) {
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000668:	f000 809a 	beq.w	80007a0 <Get_CRx_Position+0x14c>
 800066c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000670:	f300 8099 	bgt.w	80007a6 <Get_CRx_Position+0x152>
 8000674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000678:	f000 808f 	beq.w	800079a <Get_CRx_Position+0x146>
 800067c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000680:	f300 8091 	bgt.w	80007a6 <Get_CRx_Position+0x152>
 8000684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000688:	f000 8084 	beq.w	8000794 <Get_CRx_Position+0x140>
 800068c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000690:	f300 8089 	bgt.w	80007a6 <Get_CRx_Position+0x152>
 8000694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000698:	d079      	beq.n	800078e <Get_CRx_Position+0x13a>
 800069a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800069e:	f300 8082 	bgt.w	80007a6 <Get_CRx_Position+0x152>
 80006a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006a6:	d06f      	beq.n	8000788 <Get_CRx_Position+0x134>
 80006a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ac:	dc7b      	bgt.n	80007a6 <Get_CRx_Position+0x152>
 80006ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006b2:	d066      	beq.n	8000782 <Get_CRx_Position+0x12e>
 80006b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006b8:	dc75      	bgt.n	80007a6 <Get_CRx_Position+0x152>
 80006ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006be:	d05d      	beq.n	800077c <Get_CRx_Position+0x128>
 80006c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006c4:	dc6f      	bgt.n	80007a6 <Get_CRx_Position+0x152>
 80006c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ca:	d054      	beq.n	8000776 <Get_CRx_Position+0x122>
 80006cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006d0:	dc69      	bgt.n	80007a6 <Get_CRx_Position+0x152>
 80006d2:	2b80      	cmp	r3, #128	; 0x80
 80006d4:	d064      	beq.n	80007a0 <Get_CRx_Position+0x14c>
 80006d6:	2b80      	cmp	r3, #128	; 0x80
 80006d8:	dc65      	bgt.n	80007a6 <Get_CRx_Position+0x152>
 80006da:	2b20      	cmp	r3, #32
 80006dc:	dc48      	bgt.n	8000770 <Get_CRx_Position+0x11c>
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd61      	ble.n	80007a6 <Get_CRx_Position+0x152>
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b1f      	cmp	r3, #31
 80006e6:	d85e      	bhi.n	80007a6 <Get_CRx_Position+0x152>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <Get_CRx_Position+0x9c>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000777 	.word	0x08000777
 80006f4:	0800077d 	.word	0x0800077d
 80006f8:	080007a7 	.word	0x080007a7
 80006fc:	08000783 	.word	0x08000783
 8000700:	080007a7 	.word	0x080007a7
 8000704:	080007a7 	.word	0x080007a7
 8000708:	080007a7 	.word	0x080007a7
 800070c:	08000789 	.word	0x08000789
 8000710:	080007a7 	.word	0x080007a7
 8000714:	080007a7 	.word	0x080007a7
 8000718:	080007a7 	.word	0x080007a7
 800071c:	080007a7 	.word	0x080007a7
 8000720:	080007a7 	.word	0x080007a7
 8000724:	080007a7 	.word	0x080007a7
 8000728:	080007a7 	.word	0x080007a7
 800072c:	0800078f 	.word	0x0800078f
 8000730:	080007a7 	.word	0x080007a7
 8000734:	080007a7 	.word	0x080007a7
 8000738:	080007a7 	.word	0x080007a7
 800073c:	080007a7 	.word	0x080007a7
 8000740:	080007a7 	.word	0x080007a7
 8000744:	080007a7 	.word	0x080007a7
 8000748:	080007a7 	.word	0x080007a7
 800074c:	080007a7 	.word	0x080007a7
 8000750:	080007a7 	.word	0x080007a7
 8000754:	080007a7 	.word	0x080007a7
 8000758:	080007a7 	.word	0x080007a7
 800075c:	080007a7 	.word	0x080007a7
 8000760:	080007a7 	.word	0x080007a7
 8000764:	080007a7 	.word	0x080007a7
 8000768:	080007a7 	.word	0x080007a7
 800076c:	08000795 	.word	0x08000795
 8000770:	2b40      	cmp	r3, #64	; 0x40
 8000772:	d012      	beq.n	800079a <Get_CRx_Position+0x146>
	case GPIO_PIN15:
		pos = 7;
		break;

	default:
		break;
 8000774:	e017      	b.n	80007a6 <Get_CRx_Position+0x152>
		pos = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
		break;
 800077a:	e015      	b.n	80007a8 <Get_CRx_Position+0x154>
		pos = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
		break;
 8000780:	e012      	b.n	80007a8 <Get_CRx_Position+0x154>
		pos = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	73fb      	strb	r3, [r7, #15]
		break;
 8000786:	e00f      	b.n	80007a8 <Get_CRx_Position+0x154>
		pos = 3;
 8000788:	2303      	movs	r3, #3
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e00c      	b.n	80007a8 <Get_CRx_Position+0x154>
		pos = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	73fb      	strb	r3, [r7, #15]
		break;
 8000792:	e009      	b.n	80007a8 <Get_CRx_Position+0x154>
		pos = 5;
 8000794:	2305      	movs	r3, #5
 8000796:	73fb      	strb	r3, [r7, #15]
		break;
 8000798:	e006      	b.n	80007a8 <Get_CRx_Position+0x154>
		pos = 6;
 800079a:	2306      	movs	r3, #6
 800079c:	73fb      	strb	r3, [r7, #15]
		break;
 800079e:	e003      	b.n	80007a8 <Get_CRx_Position+0x154>
		pos = 7;
 80007a0:	2307      	movs	r3, #7
 80007a2:	73fb      	strb	r3, [r7, #15]
		break;
 80007a4:	e000      	b.n	80007a8 <Get_CRx_Position+0x154>
		break;
 80007a6:	bf00      	nop
	}
	return pos * (4);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	b29b      	uxth	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <MCAL_GPIO_Init>:
 * \Parameters (in) : GPIOx      Pointer to GPIO_REG_t type which contains port Registers
 * \Parameters (in) : PinConfig  Pointer to GPIO_PinConfig_t type which contains PIN Configuration
 * \Return value:   : void
 * \notes 		   : PORT E not used in this chip
 *******************************************************************************/
void MCAL_GPIO_Init(GPIO_REG_t *GPIOx, GPIO_PinConfig_t *PinConfig) {
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

	volatile uint32_t *CRx =
			(PinConfig->GPIO_PIN <= GPIO_PIN7) ? (&GPIOx->CRL) : (&GPIOx->CRH);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	889b      	ldrh	r3, [r3, #4]
 80007ca:	2b80      	cmp	r3, #128	; 0x80
 80007cc:	d801      	bhi.n	80007d2 <MCAL_GPIO_Init+0x16>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	e001      	b.n	80007d6 <MCAL_GPIO_Init+0x1a>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3304      	adds	r3, #4
	volatile uint32_t *CRx =
 80007d6:	60fb      	str	r3, [r7, #12]

	*CRx &= ~(0b1111 << Get_CRx_Position(PinConfig->GPIO_PIN)); // reset all cnfg&mode bits //  (MODE[1:0]=00) (CNFy[1:0]=00)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	889b      	ldrh	r3, [r3, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff39 	bl	8000654 <Get_CRx_Position>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	230f      	movs	r3, #15
 80007e8:	4093      	lsls	r3, r2
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	401a      	ands	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	601a      	str	r2, [r3, #0]

	if (PinConfig->GPIO_MODE <= GPIO_MODE_INPUT_PD) // check if the pin is in input mode
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	799b      	ldrb	r3, [r3, #6]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d85b      	bhi.n	80008b6 <MCAL_GPIO_Init+0xfa>
	{
		switch (PinConfig->GPIO_MODE) {
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	799b      	ldrb	r3, [r3, #6]
 8000802:	2b03      	cmp	r3, #3
 8000804:	d87a      	bhi.n	80008fc <MCAL_GPIO_Init+0x140>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <MCAL_GPIO_Init+0x50>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	0800081d 	.word	0x0800081d
 8000810:	0800083f 	.word	0x0800083f
 8000814:	0800085d 	.word	0x0800085d
 8000818:	08000889 	.word	0x08000889
		case GPIO_MODE_ANALOG:
			*CRx &= ~(0b11 << (Get_CRx_Position(PinConfig->GPIO_PIN) + 2)); // CNFy[1:0]: 00: Analog mode
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff17 	bl	8000654 <Get_CRx_Position>
 8000826:	4603      	mov	r3, r0
 8000828:	3302      	adds	r3, #2
 800082a:	2203      	movs	r2, #3
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	43da      	mvns	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	401a      	ands	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	601a      	str	r2, [r3, #0]
			break;
 800083c:	e05e      	b.n	80008fc <MCAL_GPIO_Init+0x140>
		case GPIO_MODE_INPUT_FLOATING:
			*CRx |= (0b01 << (Get_CRx_Position(PinConfig->GPIO_PIN) + 2)); // CNFy[1:0]: 01: Floating input (reset state)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	889b      	ldrh	r3, [r3, #4]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff06 	bl	8000654 <Get_CRx_Position>
 8000848:	4603      	mov	r3, r0
 800084a:	3302      	adds	r3, #2
 800084c:	2201      	movs	r2, #1
 800084e:	409a      	lsls	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	431a      	orrs	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	601a      	str	r2, [r3, #0]
			break;
 800085a:	e04f      	b.n	80008fc <MCAL_GPIO_Init+0x140>
		case GPIO_MODE_INPUT_PU:
			*CRx |= (0b10 << (Get_CRx_Position(PinConfig->GPIO_PIN) + 2)); // CNFy[1:0]: 10: Input with pull-up / pull-down
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	889b      	ldrh	r3, [r3, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fef7 	bl	8000654 <Get_CRx_Position>
 8000866:	4603      	mov	r3, r0
 8000868:	3302      	adds	r3, #2
 800086a:	2202      	movs	r2, #2
 800086c:	409a      	lsls	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	431a      	orrs	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |= PinConfig->GPIO_PIN;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	8892      	ldrh	r2, [r2, #4]
 8000880:	431a      	orrs	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60da      	str	r2, [r3, #12]
			break;
 8000886:	e039      	b.n	80008fc <MCAL_GPIO_Init+0x140>
		case GPIO_MODE_INPUT_PD:
			*CRx |= (0b10 << (Get_CRx_Position(PinConfig->GPIO_PIN) + 2)); // CNFy[1:0]: 10: Input with pull-up / pull-down
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	889b      	ldrh	r3, [r3, #4]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fee1 	bl	8000654 <Get_CRx_Position>
 8000892:	4603      	mov	r3, r0
 8000894:	3302      	adds	r3, #2
 8000896:	2202      	movs	r2, #2
 8000898:	409a      	lsls	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	431a      	orrs	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &= ~PinConfig->GPIO_PIN;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	8892      	ldrh	r2, [r2, #4]
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60da      	str	r2, [r3, #12]
			break;
 80008b4:	e022      	b.n	80008fc <MCAL_GPIO_Init+0x140>
		}
	} else if (PinConfig->GPIO_MODE > GPIO_MODE_INPUT_PD) // check if the pin is in output mode
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	799b      	ldrb	r3, [r3, #6]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d91e      	bls.n	80008fc <MCAL_GPIO_Init+0x140>
		//            break;
		//        case GPIO_MODE_ALT_OUTPUT_OD:
		//            *CRx |= (0b11 << (Get_CRx_Position(PinConfig->GPIO_PIN) + 2)); // CNFy[1:0]: 11: Alternate function output Open-drain
		//            break;

		uint8_t configVal = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	72fb      	strb	r3, [r7, #11]
		configVal =(((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_SPEED))& 0x0F;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	799b      	ldrb	r3, [r3, #6]
 80008c6:	3b04      	subs	r3, #4
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	79db      	ldrb	r3, [r3, #7]
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 030f 	and.w	r3, r3, #15
 80008dc:	72fb      	strb	r3, [r7, #11]
		*CRx |= (configVal << (Get_CRx_Position(PinConfig->GPIO_PIN)));
 80008de:	7afc      	ldrb	r4, [r7, #11]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	889b      	ldrh	r3, [r3, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff feb5 	bl	8000654 <Get_CRx_Position>
 80008ea:	4603      	mov	r3, r0
 80008ec:	fa04 f203 	lsl.w	r2, r4, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	601a      	str	r2, [r3, #0]

		//        }
	}
}
 80008fa:	e7ff      	b.n	80008fc <MCAL_GPIO_Init+0x140>
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <MCAL_I2C_Init>:
 * @retval 			- None
 * Note 			- Supported for I2C SM mode only
 * 					- Support only 7-bit address mode
 */
void MCAL_I2C_Init(I2C_REG_t *I2Cx, I2C_Config_t *I2C_Config)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
	uint16_t Temp_Register = 0 , Freq_Range = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	82fb      	strh	r3, [r7, #22]
 8000912:	2300      	movs	r3, #0
 8000914:	82bb      	strh	r3, [r7, #20]
	uint32_t Pclk1 = 8000000;
 8000916:	4b7e      	ldr	r3, [pc, #504]	; (8000b10 <MCAL_I2C_Init+0x20c>)
 8000918:	613b      	str	r3, [r7, #16]
	uint16_t Result = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	81fb      	strh	r3, [r7, #14]

	/* 1. Enable the RCC Clock */
	if(I2Cx == I2C1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a7c      	ldr	r2, [pc, #496]	; (8000b14 <MCAL_I2C_Init+0x210>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d112      	bne.n	800094c <MCAL_I2C_Init+0x48>
	{
		/* If I2C1 Put all configurations in the global configuration */
		G_I2C_Config[I2C1_Index] = *I2C_Config;
 8000926:	4a7c      	ldr	r2, [pc, #496]	; (8000b18 <MCAL_I2C_Init+0x214>)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	4614      	mov	r4, r2
 800092c:	461d      	mov	r5, r3
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	e895 0003 	ldmia.w	r5, {r0, r1}
 800093a:	e884 0003 	stmia.w	r4, {r0, r1}

		/* Open the I2C1 RCC Clock */
		RCC_I2C1_CLK_EN();
 800093e:	4b77      	ldr	r3, [pc, #476]	; (8000b1c <MCAL_I2C_Init+0x218>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a76      	ldr	r2, [pc, #472]	; (8000b1c <MCAL_I2C_Init+0x218>)
 8000944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	e016      	b.n	800097a <MCAL_I2C_Init+0x76>
	}
	else if(I2Cx == I2C2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a74      	ldr	r2, [pc, #464]	; (8000b20 <MCAL_I2C_Init+0x21c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d112      	bne.n	800097a <MCAL_I2C_Init+0x76>
	{
		/* If I2C2 Put all configurations in the global configuration */
		G_I2C_Config[I2C2_Index] = *I2C_Config;
 8000954:	4b70      	ldr	r3, [pc, #448]	; (8000b18 <MCAL_I2C_Init+0x214>)
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800095c:	4615      	mov	r5, r2
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 0003 	ldmia.w	r5, {r0, r1}
 800096a:	e884 0003 	stmia.w	r4, {r0, r1}

		/* Open the I2C2 RCC Clock */
		RCC_I2C2_CLK_EN();
 800096e:	4b6b      	ldr	r3, [pc, #428]	; (8000b1c <MCAL_I2C_Init+0x218>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a6a      	ldr	r2, [pc, #424]	; (8000b1c <MCAL_I2C_Init+0x218>)
 8000974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000978:	61d3      	str	r3, [r2, #28]
	}

	/* 2. Set I2C Mode */
	if(I2C_Config->Mode == I2C_MODE_I2C_MODE)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d17e      	bne.n	8000a80 <MCAL_I2C_Init+0x17c>
		/* =================== Initialize Timing ==================== */
		/*
		 * --- I2C_CR2 -> Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		 */
		/* 1. Get the I2Cx "CR2" Control register 2 Value */
		Temp_Register = I2Cx->CR2;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	82fb      	strh	r3, [r7, #22]

		/* 2. Clear frequency -> FREQ[5:0] bits */
		Temp_Register &= ~(I2C_CR2_FREQ_Msk); // (0x3FUL << 0)
 8000988:	8afb      	ldrh	r3, [r7, #22]
 800098a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800098e:	82fb      	strh	r3, [r7, #22]

		/* 3. Get Pclk1 frequency value */
		Pclk1 = MCAL_RCC_GetFreq_PCLK1();
 8000990:	f7ff fd6c 	bl	800046c <MCAL_RCC_GetFreq_PCLK1>
 8000994:	6138      	str	r0, [r7, #16]

		/* 4. Set frequency bits depending in Pclk1 value */
		Freq_Range = (uint16_t)(Pclk1);
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	82bb      	strh	r3, [r7, #20]

		/* 5. Move the configuration in the temp register to set it in the CR2 register */
		Temp_Register |= Freq_Range;
 800099a:	8afa      	ldrh	r2, [r7, #22]
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	4313      	orrs	r3, r2
 80009a0:	82fb      	strh	r3, [r7, #22]

		/* 6. Set the "CR2" register with our new value */
		I2Cx->CR2 = Temp_Register;
 80009a2:	8afa      	ldrh	r2, [r7, #22]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	605a      	str	r2, [r3, #4]

		//---------------------------------------------------------------------------------------------------------
		/* ========= Configure "I2C_CCR" Clock control register ========= */

		/* 7. Disable the selected I2C peripheral to configure time */
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f023 0201 	bic.w	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]

		/* 8. Put the temp register with zero ready to put data on it */
		Temp_Register = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	82fb      	strh	r3, [r7, #22]

		/* 9. Configure the speed in the standard mode / Fast Mode */
		if((I2C_Config->Clock_Speed == I2C_CLOCK_SPEED_50KHZ)||(I2C_Config->Clock_Speed == I2C_CLOCK_SPEED_100KHZ))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d004      	beq.n	80009ce <MCAL_I2C_Init+0xca>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a56      	ldr	r2, [pc, #344]	; (8000b24 <MCAL_I2C_Init+0x220>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d115      	bne.n	80009fa <MCAL_I2C_Init+0xf6>
			/*
			 * Tclk / 2 = CCR * Tpclk1
			 * CCR = Tclk / (2 * Tpclk1)
			 * CCR = Fpclk / (2 * I2C_ClockFrequency)
			 */
			Result = (uint16_t)((Pclk1*1000000)/(I2C_Config->Clock_Speed << 1));
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	4a55      	ldr	r2, [pc, #340]	; (8000b28 <MCAL_I2C_Init+0x224>)
 80009d2:	fb03 f202 	mul.w	r2, r3, r2
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e0:	81fb      	strh	r3, [r7, #14]

			/* 12. Move the configuration in the temp register to set it in the I2C_CCR register */
			Temp_Register |= Result;
 80009e2:	8afa      	ldrh	r2, [r7, #22]
 80009e4:	89fb      	ldrh	r3, [r7, #14]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	82fb      	strh	r3, [r7, #22]

			/* 13. Set the "I2C_CCR" register with our new value */
			I2Cx->CCR = Temp_Register;
 80009ea:	8afa      	ldrh	r2, [r7, #22]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	61da      	str	r2, [r3, #28]
			 * therefore the TRISE[5:0] bits must be programmed with 09h.
			 * (1000 ns / 125 ns = 8 + 1)
			 */
			/* 14. Set the "I2C_TRISE" register with "Frequency Range + 1" as data sheet */

			I2Cx->TRISE = Freq_Range + 1;
 80009f0:	8abb      	ldrh	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	621a      	str	r2, [r3, #32]

		/* ========================================================================================== */
		/* ========= Configure "I2C_CR1" Control register 1 ========= */

		/* 1. Get the I2C CR1 value */
		Temp_Register = I2Cx->CR1;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	82fb      	strh	r3, [r7, #22]

		/* 2. Set All configuration to the temp register  */
		Temp_Register |= (uint16_t)(I2C_Config->ACK_Control | I2C_Config->General_Call | I2C_Config->Mode | I2C_Config->Stretch_Mode);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	8afb      	ldrh	r3, [r7, #22]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	82fb      	strh	r3, [r7, #22]

		/* 3. Set the "I2C_CR1" register with our new value */
		I2Cx->CR1 = Temp_Register;
 8000a2a:	8afa      	ldrh	r2, [r7, #22]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	601a      	str	r2, [r3, #0]
		/* ========================================================================================== */

		/* ========= Configure "I2C_OAR" Own address registers ========= */

		/* 1. Put the temp register with zero ready to put data on it */
		Temp_Register = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	82fb      	strh	r3, [r7, #22]

		/* 2. Check the Slave_Address type & Configure depends on it */
		if(I2C_Config->Slave_Address.Enable_Dual_Address == 1)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10d      	bne.n	8000a58 <MCAL_I2C_Init+0x154>
		{
			/* 1. Enable the Dual addressing mode */
			Temp_Register = I2C_OAR2_ENDUAL;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	82fb      	strh	r3, [r7, #22]
			/* 2. Put the input Second address form the user to the register */
			/*
			 * Bits 7:1 ADD2[7:1]: Interface address
			 * 		bits 7:1 of address in dual addressing mode
			 */
			Temp_Register |= I2C_Config->Slave_Address.Slave_Second_Address << I2C_OAR2_ADD2_Pos; // Shifting with the first bit in the register
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	7f5b      	ldrb	r3, [r3, #29]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	82fb      	strh	r3, [r7, #22]

			/* 3. Set the "I2C_OAR2" register with our new value */
			I2Cx->OAR2 = Temp_Register;
 8000a52:	8afa      	ldrh	r2, [r7, #22]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	60da      	str	r2, [r3, #12]
		}

		/* 4. Put the temp register with zero ready to put data on it */
		Temp_Register = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	82fb      	strh	r3, [r7, #22]

		/* 5. Put the input First address form the user to the register */
		Temp_Register |= I2C_Config->Slave_Address.Slave_First_Address << 1 ;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	7f1b      	ldrb	r3, [r3, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	82fb      	strh	r3, [r7, #22]

		/* 6. Configure ADDMODE Addressing mode (slave mode) */
		Temp_Register |= I2C_Config->Slave_Address.Slave_Address_Mode ;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	8afb      	ldrh	r3, [r7, #22]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	82fb      	strh	r3, [r7, #22]

		/* 7. Set the "I2C_OAR1" register with our new value */
		I2Cx->OAR1 = Temp_Register;
 8000a7a:	8afa      	ldrh	r2, [r7, #22]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
		/* Not support I2C_MODE_SMBUS_MODE*/
	}


	/* 3. Interrupt mode (Slave Mode) ==> Check the callback pointer != NULL */
	if(I2C_Config->P_Slave_CallBack != NULL) // That enable slave IRQ states mode
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d038      	beq.n	8000afa <MCAL_I2C_Init+0x1f6>
	{
		/* 1. Enable IRQ */
		I2Cx->CR2 |= (I2C_CR2_ITERREN); // Error interrupt enable
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN); // Event interrupt enable
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN); // Buffer interrupt enable
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	605a      	str	r2, [r3, #4]

		/* 2. Enable IRQ in NVIC */
		if(I2Cx == I2C1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <MCAL_I2C_Init+0x210>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d10c      	bne.n	8000ace <MCAL_I2C_Init+0x1ca>
		{
			NVIC_IRQ31_I2C1_EV_EN();
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MCAL_I2C_Init+0x228>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <MCAL_I2C_Init+0x228>)
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_EN();
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MCAL_I2C_Init+0x22c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <MCAL_I2C_Init+0x22c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e00f      	b.n	8000aee <MCAL_I2C_Init+0x1ea>
		}
		else if (I2Cx == I2C2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MCAL_I2C_Init+0x21c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10b      	bne.n	8000aee <MCAL_I2C_Init+0x1ea>
		{
			NVIC_IRQ33_I2C2_EV_EN();
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MCAL_I2C_Init+0x22c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <MCAL_I2C_Init+0x22c>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_EN();
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MCAL_I2C_Init+0x22c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MCAL_I2C_Init+0x22c>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6013      	str	r3, [r2, #0]

		}

		/* 3. Put the status registers with zero */
		I2Cx->SR1 = 0;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
	}

	/* 4. Enable the selected I2C peripheral */
	I2Cx->CR1 |= I2C_CR1_PE;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f043 0201 	orr.w	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	007a1200 	.word	0x007a1200
 8000b14:	40005400 	.word	0x40005400
 8000b18:	20000074 	.word	0x20000074
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40005800 	.word	0x40005800
 8000b24:	000186a0 	.word	0x000186a0
 8000b28:	000f4240 	.word	0x000f4240
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000e104 	.word	0xe000e104

08000b34 <MCAL_I2C_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for I2C SM MODE only
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_REG_t *I2Cx)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t I2C_GPIO_Config;

	/* Depending the recommendation in data sheet -> Table 27. I2C 	*/
	/*  "I2C pin-out"    "Configuration"     "GPIO configuration" 	*/
	if(I2Cx == I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a1f      	ldr	r2, [pc, #124]	; (8000bbc <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d118      	bne.n	8000b76 <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		/* PB6 : I2C1_SCL */
		I2C_GPIO_Config.GPIO_PIN= GPIO_PIN6;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Config.GPIO_MODE = GPIO_MODE_ALT_OUTPUT_OD;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Config.GPIO_SPEED = GPIO_SPEED_10M;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Config);
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	4619      	mov	r1, r3
 8000b56:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000b58:	f7ff fe30 	bl	80007bc <MCAL_GPIO_Init>

		/* PB7 : I2C1_SDA */
		I2C_GPIO_Config.GPIO_PIN = GPIO_PIN7;
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Config.GPIO_MODE = GPIO_MODE_ALT_OUTPUT_OD;
 8000b60:	2307      	movs	r3, #7
 8000b62:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Config.GPIO_SPEED = GPIO_SPEED_10M;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Config);
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000b70:	f7ff fe24 	bl	80007bc <MCAL_GPIO_Init>
		I2C_GPIO_Config.GPIO_PIN = GPIO_PIN11;
		I2C_GPIO_Config.GPIO_MODE = GPIO_MODE_ALT_OUTPUT_OD;
		I2C_GPIO_Config.GPIO_SPEED = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Config);
	}
}
 8000b74:	e01d      	b.n	8000bb2 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if(I2Cx == I2C2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d119      	bne.n	8000bb2 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		I2C_GPIO_Config.GPIO_PIN = GPIO_PIN10;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Config.GPIO_MODE = GPIO_MODE_ALT_OUTPUT_OD;
 8000b84:	2307      	movs	r3, #7
 8000b86:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Config.GPIO_SPEED = GPIO_SPEED_10M;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Config);
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000b94:	f7ff fe12 	bl	80007bc <MCAL_GPIO_Init>
		I2C_GPIO_Config.GPIO_PIN = GPIO_PIN11;
 8000b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b9c:	81bb      	strh	r3, [r7, #12]
		I2C_GPIO_Config.GPIO_MODE = GPIO_MODE_ALT_OUTPUT_OD;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	73bb      	strb	r3, [r7, #14]
		I2C_GPIO_Config.GPIO_SPEED = GPIO_SPEED_10M;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Config);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000bae:	f7ff fe05 	bl	80007bc <MCAL_GPIO_Init>
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	40005800 	.word	0x40005800

08000bc8 <MCAL_I2C_MASTER_TX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_MASTER_TX(I2C_REG_t *I2Cx, uint16_t Device_Address, uint8_t *pTxData, uint8_t Data_Length, STOP_Condition Stop, START_Condition Start)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	817b      	strh	r3, [r7, #10]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	727b      	strb	r3, [r7, #9]
	int i = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
	/* TODO Support timeout (configure timer working for specific duration rise interrupt)
	 * TODO Timer_interrupt(){flag =}
	 * TODO so any code exist in while (check flag || any polling conditions)
	 */
	/* 1. Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master */
	I2C_Generate_Start(I2Cx, Start, Enable);
 8000be0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000be4:	2201      	movs	r2, #1
 8000be6:	4619      	mov	r1, r3
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 f94f 	bl	8000e8c <I2C_Generate_Start>

	/* 2. Wait for EV5 */
	/* EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address. */
	while(!(I2C_Get_FlagStatus(I2Cx, SB)));
 8000bee:	bf00      	nop
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f000 f8c8 	bl	8000d88 <I2C_Get_FlagStatus>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f8      	beq.n	8000bf0 <MCAL_I2C_MASTER_TX+0x28>

	/* 3. Writing DR register with Address, Send Address */
	I2C_Send_Address(I2Cx, Device_Address, Transmitter);
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f000 f968 	bl	8000eda <I2C_Send_Address>

	/* 4. Wait for EV6 */
	/* EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2. */
	while(!(I2C_Get_FlagStatus(I2Cx, ADDR)));
 8000c0a:	bf00      	nop
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f000 f8ba 	bl	8000d88 <I2C_Get_FlagStatus>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f8      	beq.n	8000c0c <MCAL_I2C_MASTER_TX+0x44>

	/* 5. Wait for EV8_1 */
	/* EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR. */
	/* Check for TRA: Transmitter/receiver, BUSY: Bus busy, MSL: Master/slave, TxE Flags */
	while(!(I2C_Get_FlagStatus(I2Cx, Master_Transmitter_Event)));
 8000c1a:	bf00      	nop
 8000c1c:	4915      	ldr	r1, [pc, #84]	; (8000c74 <MCAL_I2C_MASTER_TX+0xac>)
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 f8b2 	bl	8000d88 <I2C_Get_FlagStatus>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f8      	beq.n	8000c1c <MCAL_I2C_MASTER_TX+0x54>

	/* Loop inside the data ready to send it */
	for (i = 0; i < Data_Length; ++i)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	e011      	b.n	8000c54 <MCAL_I2C_MASTER_TX+0x8c>
	{
		/* 6. Write in the DR register the data to be sent */
		I2Cx->DR = pTxData[i];
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

		/* 7. Wait for EV8 */
		/* EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register. */
		while(!(I2C_Get_FlagStatus(I2Cx, TXE)));
 8000c3e:	bf00      	nop
 8000c40:	2103      	movs	r1, #3
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f000 f8a0 	bl	8000d88 <I2C_Get_FlagStatus>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f8      	beq.n	8000c40 <MCAL_I2C_MASTER_TX+0x78>
	for (i = 0; i < Data_Length; ++i)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	7a7b      	ldrb	r3, [r7, #9]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbe9      	blt.n	8000c30 <MCAL_I2C_MASTER_TX+0x68>
		/* 8. Wait for EV8 */
		/* EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition. */
	}

	/* 9. Send Stop Condition */
	if(Stop == With_STOP)
 8000c5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <MCAL_I2C_MASTER_TX+0xa4>
	{
		I2C_Stop(I2Cx, Enable);
 8000c64:	2101      	movs	r1, #1
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 f957 	bl	8000f1a <I2C_Stop>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	00070080 	.word	0x00070080

08000c78 <MCAL_I2C_MASTER_RX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_MASTER_RX(I2C_REG_t *I2Cx, uint16_t Device_Address, uint8_t *pRxData, uint8_t Data_Length, STOP_Condition Stop, START_Condition Start)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	461a      	mov	r2, r3
 8000c84:	460b      	mov	r3, r1
 8000c86:	817b      	strh	r3, [r7, #10]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	727b      	strb	r3, [r7, #9]
	int i = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

	uint8_t index = I2Cx == I2C1 ? I2C1_Index : I2C2_Index;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <MCAL_I2C_MASTER_RX+0x108>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	bf14      	ite	ne
 8000c98:	2301      	movne	r3, #1
 8000c9a:	2300      	moveq	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	74fb      	strb	r3, [r7, #19]
	/* TODO Support timeout (configure timer working for specific duration rise interrupt)
	 * TODO Timer_interrupt(){flag =}
	 * TODO so any code exist in while (check flag || any polling conditions)
	 */
	/* 1. Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master */
	I2C_Generate_Start(I2Cx, Start, Enable);
 8000ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 f8ef 	bl	8000e8c <I2C_Generate_Start>

	/* 2. Wait for EV5 */
	/* EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address. */
	while(!(I2C_Get_FlagStatus(I2Cx, SB)));
 8000cae:	bf00      	nop
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f000 f868 	bl	8000d88 <I2C_Get_FlagStatus>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f8      	beq.n	8000cb0 <MCAL_I2C_MASTER_RX+0x38>

	/* 3. Writing DR register with Address, Send Address */
	I2C_Send_Address(I2Cx, Device_Address, Receiver);
 8000cbe:	897b      	ldrh	r3, [r7, #10]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f000 f908 	bl	8000eda <I2C_Send_Address>

	/* 4. Wait for EV6 */
	/* EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2. */
	while(!(I2C_Get_FlagStatus(I2Cx, ADDR)));
 8000cca:	bf00      	nop
 8000ccc:	2102      	movs	r1, #2
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f000 f85a 	bl	8000d88 <I2C_Get_FlagStatus>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f8      	beq.n	8000ccc <MCAL_I2C_MASTER_RX+0x54>

	/* 5. Enable Automatic ACK */
	/* To get ready to send ACK */
	I2C_ACKConfig(I2Cx, Enable);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f000 f937 	bl	8000f50 <I2C_ACKConfig>

	/* 6. Check if there is Data length available */
	if(Data_Length)
 8000ce2:	7a7b      	ldrb	r3, [r7, #9]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d018      	beq.n	8000d1a <MCAL_I2C_MASTER_RX+0xa2>
	{
		/* 7. Loop inside the data to read it till length become zero */
		for (i = Data_Length; i > 1 ; i--)
 8000ce8:	7a7b      	ldrb	r3, [r7, #9]
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e012      	b.n	8000d14 <MCAL_I2C_MASTER_RX+0x9c>
		{
			/* 8. Wait for EV7 */
			/* EV7: RxNE=1 cleared by reading DR register */
			while(!(I2C_Get_FlagStatus(I2Cx, RXNE)));
 8000cee:	bf00      	nop
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 f848 	bl	8000d88 <I2C_Get_FlagStatus>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f8      	beq.n	8000cf0 <MCAL_I2C_MASTER_RX+0x78>

			/* 9. Read the data in the DR register */
			*pRxData = I2Cx->DR;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	701a      	strb	r2, [r3, #0]

			/* 10. Go to next address */
			pRxData++;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
		for (i = Data_Length; i > 1 ; i--)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	dce9      	bgt.n	8000cee <MCAL_I2C_MASTER_RX+0x76>
	/* To generate the non-acknowledge pulse after the last received data byte, the ACK bit
		must be cleared just after reading the second last data byte (after second last RxNE
		event).
	 */
	/* Send ---- > NACK */
	I2C_ACKConfig(I2Cx, Disable);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 f917 	bl	8000f50 <I2C_ACKConfig>

	/* 12. Send Stop Condition */
	if(Stop == With_STOP)
 8000d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d103      	bne.n	8000d32 <MCAL_I2C_MASTER_RX+0xba>
	{
		I2C_Stop(I2Cx, Enable);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f8f4 	bl	8000f1a <I2C_Stop>
	}


	/* 8. Wait for EV7 */
	/* EV7: RxNE=1 cleared by reading DR register */
	while(!(I2C_Get_FlagStatus(I2Cx, RXNE)));
 8000d32:	bf00      	nop
 8000d34:	2104      	movs	r1, #4
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 f826 	bl	8000d88 <I2C_Get_FlagStatus>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f8      	beq.n	8000d34 <MCAL_I2C_MASTER_RX+0xbc>

	/* 9. Read the data in the DR register */
	*pRxData = I2Cx->DR;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	701a      	strb	r2, [r3, #0]



	/* 13. Re-Enable the automatic ACK */
	if(G_I2C_Config[index].ACK_Control == I2C_ACK_CONTROL_ENABLE)
 8000d4c:	7cfa      	ldrb	r2, [r7, #19]
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <MCAL_I2C_MASTER_RX+0x10c>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d62:	d104      	bne.n	8000d6e <MCAL_I2C_MASTER_RX+0xf6>
		I2C_ACKConfig(I2Cx, Enable);
 8000d64:	2101      	movs	r1, #1
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f000 f8f2 	bl	8000f50 <I2C_ACKConfig>
	else
		I2C_ACKConfig(I2Cx, Disable);
}
 8000d6c:	e003      	b.n	8000d76 <MCAL_I2C_MASTER_RX+0xfe>
		I2C_ACKConfig(I2Cx, Disable);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f000 f8ed 	bl	8000f50 <I2C_ACKConfig>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40005400 	.word	0x40005400
 8000d84:	20000074 	.word	0x20000074

08000d88 <I2C_Get_FlagStatus>:
/* ======================== Generic APIs ========================== */
/* ================================================================ */


I2C_Flagstatus I2C_Get_FlagStatus(I2C_REG_t *I2Cx, Status Flag)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
	uint32_t Flag_1 = 0, Flag_2 = 0, Last_Event;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
	I2C_Flagstatus Bit_Status = RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	75fb      	strb	r3, [r7, #23]

	switch (Flag)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d80f      	bhi.n	8000dc4 <I2C_Get_FlagStatus+0x3c>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d866      	bhi.n	8000e78 <I2C_Get_FlagStatus+0xf0>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <I2C_Get_FlagStatus+0x28>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000dcf 	.word	0x08000dcf
 8000db4:	08000de7 	.word	0x08000de7
 8000db8:	08000dff 	.word	0x08000dff
 8000dbc:	08000e17 	.word	0x08000e17
 8000dc0:	08000e2f 	.word	0x08000e2f
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	4a30      	ldr	r2, [pc, #192]	; (8000e88 <I2C_Get_FlagStatus+0x100>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d03c      	beq.n	8000e46 <I2C_Get_FlagStatus+0xbe>
			Bit_Status = RESET;
		break;
	}

	default:
		break;
 8000dcc:	e054      	b.n	8000e78 <I2C_Get_FlagStatus+0xf0>
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <I2C_Get_FlagStatus+0x58>
			Bit_Status = SET;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
		break;
 8000dde:	e04c      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
			Bit_Status = RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	75fb      	strb	r3, [r7, #23]
		break;
 8000de4:	e049      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
		if((I2Cx->SR1) & (I2C_SR1_SB))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <I2C_Get_FlagStatus+0x70>
			Bit_Status = SET;
 8000df2:	2301      	movs	r3, #1
 8000df4:	75fb      	strb	r3, [r7, #23]
		break;
 8000df6:	e040      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
			Bit_Status = RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	75fb      	strb	r3, [r7, #23]
		break;
 8000dfc:	e03d      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
		if((I2Cx->SR1) & (I2C_SR1_ADDR))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <I2C_Get_FlagStatus+0x88>
			Bit_Status = SET;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	75fb      	strb	r3, [r7, #23]
		break;
 8000e0e:	e034      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
			Bit_Status = RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	75fb      	strb	r3, [r7, #23]
		break;
 8000e14:	e031      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
		if((I2Cx->SR1) & (I2C_SR1_TXE))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <I2C_Get_FlagStatus+0xa0>
			Bit_Status = SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
		break;
 8000e26:	e028      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
			Bit_Status = RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	75fb      	strb	r3, [r7, #23]
		break;
 8000e2c:	e025      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
		if((I2Cx->SR1) & (I2C_SR1_RXNE))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <I2C_Get_FlagStatus+0xb8>
			Bit_Status = SET;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]
		break;
 8000e3e:	e01c      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
			Bit_Status = RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	75fb      	strb	r3, [r7, #23]
		break;
 8000e44:	e019      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
		Flag_1 = Master_Transmitter_Event & (0x0000FFFF);
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	613b      	str	r3, [r7, #16]
		Flag_2 = Master_Transmitter_Event >> 16;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	60fb      	str	r3, [r7, #12]
		Last_Event = ((I2Cx->SR1 & Flag_1) | ((I2Cx->SR2 & Flag_2) << 16) );
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6999      	ldr	r1, [r3, #24]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
		if(Last_Event == Flag)
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d102      	bne.n	8000e72 <I2C_Get_FlagStatus+0xea>
			Bit_Status = SET;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	75fb      	strb	r3, [r7, #23]
		break;
 8000e70:	e003      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
			Bit_Status = RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
		break;
 8000e76:	e000      	b.n	8000e7a <I2C_Get_FlagStatus+0xf2>
		break;
 8000e78:	bf00      	nop
	}
	return Bit_Status;
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	00070080 	.word	0x00070080

08000e8c <I2C_Generate_Start>:

void I2C_Generate_Start(I2C_REG_t *I2Cx,START_Condition Start, Functional_State State)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	70bb      	strb	r3, [r7, #2]
	/* Check the type of start (Start or Repeated Start) */
	if(Start != Repeated_START)
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d007      	beq.n	8000eb2 <I2C_Generate_Start+0x26>
	{
		/* Check if the bus is idle */
		while(I2C_Get_FlagStatus(I2Cx, BUS_BUSY));
 8000ea2:	bf00      	nop
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff6e 	bl	8000d88 <I2C_Get_FlagStatus>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f8      	bne.n	8000ea4 <I2C_Generate_Start+0x18>
		1: Repeated start generation
		In Slave mode:
		0: No Start generation
		1: Start generation when the bus is free
	 */
	if(State != Disable)
 8000eb2:	78bb      	ldrb	r3, [r7, #2]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <I2C_Generate_Start+0x3a>
	{
		/* Generate a START condition */
		I2Cx->CR1 |= I2C_CR1_START;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	601a      	str	r2, [r3, #0]
	{
		/* Disable the START condition generation */
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}

}
 8000ec4:	e005      	b.n	8000ed2 <I2C_Generate_Start+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	601a      	str	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <I2C_Send_Address>:

void I2C_Send_Address(I2C_REG_t *I2Cx, uint16_t Device_Address,I2C_Direction Direction)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	807b      	strh	r3, [r7, #2]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	707b      	strb	r3, [r7, #1]
	/* Support 7-bit address mode only */
	if(Direction == Receiver)
 8000eea:	787b      	ldrb	r3, [r7, #1]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d107      	bne.n	8000f00 <I2C_Send_Address+0x26>
	{
		/* Set the address bit 0 for read */
		I2Cx->DR = ((Device_Address << 1) | (0x01));
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	461a      	mov	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	611a      	str	r2, [r3, #16]
	else if(Direction == Transmitter)
	{
		/* Reset the address bit 0 for write */
		I2Cx->DR = (Device_Address << 1);
	}
}
 8000efe:	e007      	b.n	8000f10 <I2C_Send_Address+0x36>
	else if(Direction == Transmitter)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d104      	bne.n	8000f10 <I2C_Send_Address+0x36>
		I2Cx->DR = (Device_Address << 1);
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	611a      	str	r2, [r3, #16]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <I2C_Stop>:

void I2C_Stop(I2C_REG_t *I2Cx, Functional_State State)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	if(State == Enable)
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d106      	bne.n	8000f3a <I2C_Stop+0x20>
	{
		/* Generate a stop condition, Enable stop bit */
		I2Cx->CR1 |= (I2C_CR1_STOP);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the stop condition generation, Disable stop bit */
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000f38:	e005      	b.n	8000f46 <I2C_Stop+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <I2C_ACKConfig>:

void I2C_ACKConfig(I2C_REG_t *I2Cx, Functional_State State)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	if(State == Enable)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d106      	bne.n	8000f70 <I2C_ACKConfig+0x20>
	{
		/* Enable Automatic ACK */
		I2Cx->CR1 |= (I2C_CR1_ACK);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable Automatic ACK */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000f6e:	e005      	b.n	8000f7c <I2C_ACKConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
	...

08000f88 <I2C1_EV_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void I2C1_EV_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 8000f8e:	4b39      	ldr	r3, [pc, #228]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f96:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <I2C1_EV_IRQHandler+0x40>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d007      	beq.n	8000fc8 <I2C1_EV_IRQHandler+0x40>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C1->CR1 |= 0x0000;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000fba:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6013      	str	r3, [r2, #0]
		G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_STOP);
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <I2C1_EV_IRQHandler+0xf0>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));		//ADDR
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00c      	beq.n	8000ff2 <I2C1_EV_IRQHandler+0x6a>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d009      	beq.n	8000ff2 <I2C1_EV_IRQHandler+0x6a>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <I2C1_EV_IRQHandler+0x6a>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_ADD_MATCHED);
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <I2C1_EV_IRQHandler+0xf0>)
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	2001      	movs	r0, #1
 8000ff0:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));		// TXE
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d015      	beq.n	800102e <I2C1_EV_IRQHandler+0xa6>
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d012      	beq.n	800102e <I2C1_EV_IRQHandler+0xa6>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00f      	beq.n	800102e <I2C1_EV_IRQHandler+0xa6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (I2C_SR2_MSL))
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d109      	bne.n	800102e <I2C1_EV_IRQHandler+0xa6>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C1->SR2 & (I2C_SR2_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <I2C1_EV_IRQHandler+0xa6>
			{
				G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_REQ);
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <I2C1_EV_IRQHandler+0xf0>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	2002      	movs	r0, #2
 800102c:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));		// RXNE
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001036:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d015      	beq.n	800106a <I2C1_EV_IRQHandler+0xe2>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d012      	beq.n	800106a <I2C1_EV_IRQHandler+0xe2>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00f      	beq.n	800106a <I2C1_EV_IRQHandler+0xe2>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (I2C_SR2_MSL))
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <I2C1_EV_IRQHandler+0xe2>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(!(I2C1->SR2 & (I2C_SR2_TRA)))		//TRA: Transmitter/receiver: 0: Data bytes received
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <I2C1_EV_IRQHandler+0xec>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <I2C1_EV_IRQHandler+0xe2>
			{
				G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_RCV);
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <I2C1_EV_IRQHandler+0xf0>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	2003      	movs	r0, #3
 8001068:	4798      	blx	r3
			}
		}
	}
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40005400 	.word	0x40005400
 8001078:	20000074 	.word	0x20000074

0800107c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <SPI1_IRQHandler>:
/**********************************************************************************************************************
 * ISR
 *********************************************************************************************************************/


void SPI1_IRQHandler(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC_t interrupt_source ;
	interrupt_source.TXE = SPI1->SR>>1;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <SPI1_IRQHandler+0x54>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	085b      	lsrs	r3, r3, #1
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	793b      	ldrb	r3, [r7, #4]
 80010b4:	f362 0300 	bfi	r3, r2, #0, #1
 80010b8:	713b      	strb	r3, [r7, #4]
	interrupt_source.RXNE = SPI1->SR>>0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <SPI1_IRQHandler+0x54>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	793b      	ldrb	r3, [r7, #4]
 80010c6:	f362 0341 	bfi	r3, r2, #1, #1
 80010ca:	713b      	strb	r3, [r7, #4]
	interrupt_source.ERR = SPI1->SR>>4;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <SPI1_IRQHandler+0x54>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	f362 0382 	bfi	r3, r2, #2, #1
 80010de:	713b      	strb	r3, [r7, #4]
	Gptr_SPICnfig[SPI1_Index]->ptr_IRQ_CallBack(interrupt_source);
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SPI1_IRQHandler+0x58>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	7938      	ldrb	r0, [r7, #4]
 80010e8:	4798      	blx	r3

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013000 	.word	0x40013000
 80010f8:	200000c4 	.word	0x200000c4

080010fc <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	SPI_IRQ_SRC_t interrupt_source ;
	interrupt_source.TXE = SPI2->SR>>1;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <SPI2_IRQHandler+0x54>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	793b      	ldrb	r3, [r7, #4]
 8001110:	f362 0300 	bfi	r3, r2, #0, #1
 8001114:	713b      	strb	r3, [r7, #4]
	interrupt_source.RXNE = SPI2->SR>>0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <SPI2_IRQHandler+0x54>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	793b      	ldrb	r3, [r7, #4]
 8001122:	f362 0341 	bfi	r3, r2, #1, #1
 8001126:	713b      	strb	r3, [r7, #4]
	interrupt_source.ERR = SPI2->SR>>4;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <SPI2_IRQHandler+0x54>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	793b      	ldrb	r3, [r7, #4]
 8001136:	f362 0382 	bfi	r3, r2, #2, #1
 800113a:	713b      	strb	r3, [r7, #4]
	Gptr_SPICnfig[SPI2_Index]->ptr_IRQ_CallBack(interrupt_source);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SPI2_IRQHandler+0x58>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	7938      	ldrb	r0, [r7, #4]
 8001144:	4798      	blx	r3

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40003800 	.word	0x40003800
 8001154:	200000c4 	.word	0x200000c4

08001158 <USART1_IRQHandler>:
}


//ISR

void USART1_IRQHandler(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	Gptr_UartCnfig->ptr_IRQ_CallBack();
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <USART1_IRQHandler+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	4798      	blx	r3
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000cc 	.word	0x200000cc

0800116c <USART2_IRQHandler>:
void USART2_IRQHandler(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	Gptr_UartCnfig->ptr_IRQ_CallBack();
 8001170:	4b02      	ldr	r3, [pc, #8]	; (800117c <USART2_IRQHandler+0x10>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	4798      	blx	r3

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000cc 	.word	0x200000cc

08001180 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	Gptr_UartCnfig->ptr_IRQ_CallBack();
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <USART3_IRQHandler+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	4798      	blx	r3

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000cc 	.word	0x200000cc

08001194 <__libc_init_array>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	2600      	movs	r6, #0
 8001198:	4d0c      	ldr	r5, [pc, #48]	; (80011cc <__libc_init_array+0x38>)
 800119a:	4c0d      	ldr	r4, [pc, #52]	; (80011d0 <__libc_init_array+0x3c>)
 800119c:	1b64      	subs	r4, r4, r5
 800119e:	10a4      	asrs	r4, r4, #2
 80011a0:	42a6      	cmp	r6, r4
 80011a2:	d109      	bne.n	80011b8 <__libc_init_array+0x24>
 80011a4:	f000 f81a 	bl	80011dc <_init>
 80011a8:	2600      	movs	r6, #0
 80011aa:	4d0a      	ldr	r5, [pc, #40]	; (80011d4 <__libc_init_array+0x40>)
 80011ac:	4c0a      	ldr	r4, [pc, #40]	; (80011d8 <__libc_init_array+0x44>)
 80011ae:	1b64      	subs	r4, r4, r5
 80011b0:	10a4      	asrs	r4, r4, #2
 80011b2:	42a6      	cmp	r6, r4
 80011b4:	d105      	bne.n	80011c2 <__libc_init_array+0x2e>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011bc:	4798      	blx	r3
 80011be:	3601      	adds	r6, #1
 80011c0:	e7ee      	b.n	80011a0 <__libc_init_array+0xc>
 80011c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c6:	4798      	blx	r3
 80011c8:	3601      	adds	r6, #1
 80011ca:	e7f2      	b.n	80011b2 <__libc_init_array+0x1e>
 80011cc:	080011fc 	.word	0x080011fc
 80011d0:	080011fc 	.word	0x080011fc
 80011d4:	080011fc 	.word	0x080011fc
 80011d8:	08001200 	.word	0x08001200

080011dc <_init>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	bf00      	nop
 80011e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e2:	bc08      	pop	{r3}
 80011e4:	469e      	mov	lr, r3
 80011e6:	4770      	bx	lr

080011e8 <_fini>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr
