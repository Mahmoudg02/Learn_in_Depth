
Unit6_Lesson4_SEC_LAB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000723  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e2  00000000  00000000  0000098f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f8  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_2>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
#define GPIO_PORTD  *(volatile uint8_t *)(GPIO_base + 0x12)
#define GPIO_DDRD  *(volatile uint8_t *)(GPIO_base + 0x11)

void GPIO_init(void ){

	GPIO_DDRD|=(0b111<<5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
  72:	08 95       	ret

00000074 <interrupt_init>:


void interrupt_init(void)
{
	// enable global interrupt
	SREG|=(1<<7) ;
  74:	8f b7       	in	r24, 0x3f	; 63
  76:	80 68       	ori	r24, 0x80	; 128
  78:	8f bf       	out	0x3f, r24	; 63
	//Interrupt0 for level change
	MCUCR|=(0b01<<0) ;
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	85 bf       	out	0x35, r24	; 53
	//Interrupt1 for rising
	MCUCR|=(0b11<<2) ;
  80:	85 b7       	in	r24, 0x35	; 53
  82:	8c 60       	ori	r24, 0x0C	; 12
  84:	85 bf       	out	0x35, r24	; 53
	//interrupt 2  rising
	MCUCSR &=~(0b1<<6) ;
  86:	84 b7       	in	r24, 0x34	; 52
  88:	8f 7b       	andi	r24, 0xBF	; 191
  8a:	84 bf       	out	0x34, r24	; 52
	// enable interrupt mask
	GICR |=(0b111<<5) ;
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 6e       	ori	r24, 0xE0	; 224
  90:	8b bf       	out	0x3b, r24	; 59
  92:	08 95       	ret

00000094 <main>:

int main(void)
{
	
	
GPIO_init();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
interrupt_init();
  98:	0e 94 3a 00 	call	0x74	; 0x74 <interrupt_init>

    while(1)
    {
		GPIO_PORTD &= ~((1<<5) | (1<<6) | (1<<7)) ;
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8f 71       	andi	r24, 0x1F	; 31
  a0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f e3       	ldi	r18, 0x3F	; 63
  a4:	8d e0       	ldi	r24, 0x0D	; 13
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x14>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x1e>
  b2:	00 00       	nop
  b4:	f3 cf       	rjmp	.-26     	; 0x9c <main+0x8>

000000b6 <__vector_1>:
}



ISR(INT0_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	GPIO_PORTD |= 1<<5;
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__vector_1+0x1c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <__vector_1+0x26>
  dc:	00 00       	nop
	_delay_ms(1000) ;
}
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_2>:

ISR(INT1_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	GPIO_PORTD |= 1<<6;
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	80 64       	ori	r24, 0x40	; 64
 102:	82 bb       	out	0x12, r24	; 18
 104:	2f e3       	ldi	r18, 0x3F	; 63
 106:	8d e0       	ldi	r24, 0x0D	; 13
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <__vector_2+0x1c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <__vector_2+0x26>
 114:	00 00       	nop
	_delay_ms(1000) ;
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_3>:

ISR(INT2_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
	GPIO_PORTD |= 1<<7 ;
 136:	82 b3       	in	r24, 0x12	; 18
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	2f e3       	ldi	r18, 0x3F	; 63
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	93 e0       	ldi	r25, 0x03	; 3
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <__vector_3+0x1c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <__vector_3+0x26>
 14c:	00 00       	nop
	_delay_ms(1000) ;
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
